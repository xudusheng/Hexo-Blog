{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/friends.js","path":"js/plugins/friends.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/sites.js","path":"js/plugins/sites.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"873bcacfe4838b06ed634fd2ef4a9b6aca693aa3","modified":1621171611986},{"_id":"source/_posts/hello-world.md","hash":"54325f6c94a35ac0259094345a283230fa72ddec","modified":1621170731096},{"_id":"source/_posts/iHappy，基于React Native的开发.md","hash":"58f71730d2547a757fa65e43fffccf020e135dd6","modified":1621167070322},{"_id":"source/_posts/搭建一个简易的直播APP（iOS版）.md","hash":"6eb14f522b7da8538131de8688924dfb8c985ea4","modified":1621167070322},{"_id":"source/_posts/热修复（JSPath）.md","hash":"7f2eb7b331974ebc2c8b312555f11d34669fc388","modified":1621167070322},{"_id":"source/_posts/热修复（React Native）.md","hash":"ab738bfa0f9db832c575bddc9fe0747c7d62b99f","modified":1621167070322},{"_id":"source/_posts/第三方库（Aspects）.md","hash":"89532b23e18652aec4462233d453663e69cf7e90","modified":1621167070322},{"_id":"source/_posts/第三方库（ReactCocoa）.md","hash":"b6e9c15ed149768edbbe46ce7c63f34d58a26dee","modified":1621167070322},{"_id":"source/_posts/第三方库（WebViewJavaScriptBridge）.md","hash":"ea7e28ca903c4a2e711c56b9265fcdd4d8d75723","modified":1621167070323},{"_id":"source/_posts/编程规范（Xcode工程目录结构）.md","hash":"faaa3e3dcb8224b772ec90b717c00f81a2701398","modified":1621167070323},{"_id":"source/_posts/编程规范（代码规范）.md","hash":"4d0c9301d892382817edc8c569577b7e8e0db310","modified":1621169777605},{"_id":"source/_posts/编程规范（注解规范）.md","hash":"56ea342709f479ce7b7fe47b042e843b9bdf969c","modified":1621167070323},{"_id":"source/_posts/自动化测试（Jenkins+GitHub+fir-cli自动打包发布）.md","hash":"c6fbe57f89c4536e92368ba0576319e145e28406","modified":1621167070323},{"_id":"source/_posts/自动化测试（Test Flight）.md","hash":"533ddd9fdf0c5c6a9d708253d7df7b2052ae7c03","modified":1621167070324},{"_id":"source/_posts/自动化测试（Xcode一键打包发布）.md","hash":"9c096c6f617ec5216d741ea3d6fb6d362bb795aa","modified":1621167070324},{"_id":"source/_posts/自动化测试（脚本打包）.md","hash":"25402d1cc76b280ecbd68eefb65d7c96db9addc8","modified":1621167070324},{"_id":"node_modules/hexo-theme-stellar/LICENSE","hash":"7fdfdb5dbc7d672fa28a2a3c9efa03ff8df5917d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/README.md","hash":"380d7b4de3fa89275e072a91d763f90925f9eb30","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/_config.yml","hash":"97501c931758cb5c044e29edc42feaedb6d00920","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/package.json","hash":"f5e7d6ff75305f5d60589227e3796fd4d4378fcb","modified":1621162846051},{"_id":"node_modules/hexo-theme-stellar/languages/en.yml","hash":"1864baaa91c996d7893655269731a8068d25659a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/languages/zh-CN.yml","hash":"aea20515a3203b6236ef8a2f8fedbe8b0c2ecc74","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/languages/zh-TW.yml","hash":"391e7df8baff845efb094bcd73f77040ad091dbb","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/404.ejs","hash":"c939d1f916f6ca3fc591ce7fb0b745642da79e73","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/archive.ejs","hash":"32af3fd52bb7ac653816a3cf5f2b542226081518","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/categories.ejs","hash":"80da9b1a714fe0868abe7d45cebff08164d06af1","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/index.ejs","hash":"0d4a884fc1f6e999aa18f2b4347f11b09048fc7a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/layout.ejs","hash":"fa4f0803326acf105a3bbab6176f45f7a334ff3b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/page.ejs","hash":"90170dbc9ed8ffdaa9e02d2c246cdb8cc3f093ec","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/post.ejs","hash":"ff002b086e0b1de72ddb80a1b692d9ba5c76a6a0","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/wiki.ejs","hash":"aa030ca65bee4fde0923653402d9b7bd249b8c94","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/tags.ejs","hash":"e0a6002fe01a2a93e2d84426383014a48b99a1aa","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/head.ejs","hash":"3f455e4f979ff8da0fa812510fd8c0b20d03d0bc","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/menubtn.ejs","hash":"b8407e7d00e896a1563d8708e04da4118cf83e39","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/events/index.js","hash":"97c1101964fef94c797b11edd0e564abbb5e3471","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/index.js","hash":"5667f028990dd556133080090a5fcb00c64f05ac","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/404.js","hash":"294c2e12ebc858cb47363626e5c6edcf4a5d67fa","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/categories.js","hash":"37a443389795bf9047ab530e6111a5dde8567db5","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/tags.js","hash":"9f9421ec4dc85e2bb8c3a376d4eb1c7c59d3b211","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/wiki.js","hash":"a496297955c12817dc510ba9bc5a8f423d103416","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/category_color.js","hash":"35f459e5dcd845eef3d9b7a6205f015b92399d24","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/doc_tree.js","hash":"b8264dbd82e3239d2a787e76c7e98ba1926904b8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/parse_config.js","hash":"c9712de293586ca529b9df8789b79e561acf85a9","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/related_posts.js","hash":"65075125851131ced601afb12a9b0d8c392a3e0d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/scrollreveal.js","hash":"aecbaf28dfafe100bca014381e3f6e8f799da4d1","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/stellar_info.js","hash":"5b7a10c8b09237a467767f5467749c7d9378c2c1","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/about.js","hash":"acd4cfea4ca8d3203c76afbb8752b50b0b9f5904","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/checkbox.js","hash":"85a0f422a338cb5fa5c70ef30c93da95ef5ebbcf","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/copy.js","hash":"26c9bc88aafda3b2c6c21aa8ce85607969cc3b00","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/folding.js","hash":"b9cd2ff097aafcfcd461a898f20c2d6cd25ecc5b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/frame.js","hash":"6eba9dab0fde8908234df632b85efa6a312e7bf3","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/friends.js","hash":"a2e9827810122e47f583f3cf1e418bf7933f781d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/ghcard.js","hash":"33d6d41ba4e01232eb72915b5b17fb0ed44f899c","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/image.js","hash":"770c5e98ebd1e16a4fdbccbedaee490c4f476231","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/index.js","hash":"eef64269ad7d7519fb3563f0118faff135760a2f","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/issues.js","hash":"2028247a41e8427755b0007a6cf629f9f094f233","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/link.js","hash":"857210520d82218bd9b61ac19414353ae5cb618c","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/navbar.js","hash":"b403df437e2ac3c436461abb640d281b520bb0b8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/note.js","hash":"de6080779751eb6256912418383b2ea9afafe9d8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/site.js","hash":"5d32da930d4b10338386c20ca7e3414803954a1c","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/swiper.js","hash":"dcecff446269b9553d280778640ff434391bfe9b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/timeline.js","hash":"549a5aeecea2f4dc730a08fb14e39de307d0844e","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_custom.styl","hash":"90251301e412e44bb036345c411d4723c6c47e76","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","hash":"28f7f6f69ed6aa3083784c0f4c1b17955dc5924e","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","hash":"a9f17a43d63c00994a40b156a5fb45e89dd5b272","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/footer.ejs","hash":"77c785070f5e96d03217f846ad77065e97620432","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/index.ejs","hash":"85c8728b1fb9a59577fb6e1f4fcd8ca8eb63bc22","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/header.ejs","hash":"c2569ecab9b22bb7861a13f6bce095338027b3b6","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/index.ejs","hash":"0a32b2f28cd802a06bde4a1de09fa29c5475d6e8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/logo.ejs","hash":"70279a289615c9b343c61e13049aa154e65270c1","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/utils.js","hash":"2c342ae9ada7275beb6eaf51d010ee1cccf1033d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/config.js","hash":"a7c1b1d9009e3c84a8f18e97c9c12406bea07f42","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_lazyload.js","hash":"b3dedcc1fc4189589e63d4fa6f169a70e9d63cd1","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_onerror.js","hash":"d44a8e20d4d537c0cf85b980e1fc3bc84865a2d3","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/tabs.js","hash":"79109c237faa248d38445effd75a748f550daeca","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/base.styl","hash":"5a0aa29da6cb2bdaa9821add153c10f33498e4c8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/blur.styl","hash":"565c4598e306a7f69120ed9da6241cd66820d09a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/button.styl","hash":"29629862102ce14ebc5858c572e640d9e38917ce","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/cap.styl","hash":"41d81510d3781bf938987265ebd6b6fdaeac027c","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/.DS_Store","hash":"624dea691a1d25233ef4e90601a21dd8ff6b093a","modified":1621163590662},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/control.styl","hash":"75081ca9d522a76ec4acffb8111c918b2297650a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/highlight.styl","hash":"5ae1a5c07319fc5296276301f688e3536d7044d7","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/html.styl","hash":"fc4bf71512a12ae58b08da251394df7ac6e545c6","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/image.styl","hash":"cca1103a9185202b13be49e16d77d259e9ffb482","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/input.styl","hash":"2a765355617dd96c5974e7872c34eabc0052ed6f","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/loading.styl","hash":"e05f621d367cd2b19c5f4c629f5213fbf3f39343","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/mobile-only.styl","hash":"d357f92a758d51108886b8be575bddc9e4a5a3c8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/span.styl","hash":"78cf1b0b82fd60234e1f352501c3a27d1fe3be6b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/svg.styl","hash":"dd2fbe25de3e3cf475279d375e0d5e925f9058ea","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/title.styl","hash":"a82504c42ae16920192370e4936d8a48ddf39cbe","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/toast.styl","hash":"61ca6b42ded511bcc99fd684800bf84c5ab9454a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/const.styl","hash":"1fc5588e6eeff7af7fcf4be3ba9be43cca7c1b6a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/func.styl","hash":"229cf061e589443d065c106cde560967e8cdd8fa","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/theme.styl","hash":"8fe20db2b1d1ce2002123b624683310605068536","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/index.styl","hash":"388efb67ba82dc257f142281759519c69aba86ce","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/layout.styl","hash":"b086ecce84a5c319f071dea52bbdcd33645454ae","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/list.styl","hash":"5c386939f89ea3c5795706ac05033417857aa5b0","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/main.styl","hash":"1849a1615f632545fc5a32692bb3a52e04466ba0","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/md.styl","hash":"c00942b52d80fe887663edf3d7a2b085dfe47413","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/index.styl","hash":"a5f73c7e6af62a2372adbe4dcc15970fa23bdb69","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/lazyload.styl","hash":"a77e3ee71ab03628ce6085acdbfc35ef59faaf27","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/scrollreveal.styl","hash":"bfeabad9cdaaa77ea0fa1fc0f20dc91520356a6f","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/swiper.styl","hash":"4c7862c3de6922c92b715609a5c20b063335f193","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/friends.js","hash":"9815baf1e18d7cc2c8cb0623ce032a584cb2d40a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/sites.js","hash":"dff454cd2bc34b718692dc4e941976311c73f670","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/read_next.ejs","hash":"3db49086f591294225cfa39eac2343fdab701410","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/article_footer.ejs","hash":"4f3b6cfe51985f4ac081465a60c043e7ccd8dffa","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/related_posts.ejs","hash":"43c0fcdd9c55f287c65b8cd61c6e4a48e6f49dc8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/wiki_cover.ejs","hash":"44ed20ec39b6973ff00513e4c0bf6f2dd615d8ed","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/header/index.ejs","hash":"bf1d8a6979daf4339e5452be1a2d23a152b44729","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/paginator.ejs","hash":"285c00bd0a97b9ff2c0daf30eee20739eb64d2c8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/post_card.ejs","hash":"3e0fdafed6a1b3d9f6b2cfe9a9b05a1f5379e929","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/wiki_card.ejs","hash":"8f4a365b093f8743ab39256d8b1ddc08d650292d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb.ejs","hash":"d9db4297891154b76b50c50c688b6818de52b68f","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejs","hash":"7061ddc45c81a3c2fbc2f0376f2b1203d3835248","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_wiki.ejs","hash":"bac0a90762e71f25f6fbf5134734c5dd44310308","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/layout.ejs","hash":"5f678bf8dac466fad0eea60fe7dced95737b716e","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/script.ejs","hash":"a9dce8066723ada71d91960d5dd07ab194cc3b05","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/markdown.ejs","hash":"2f14098e0834ad2b98b0dff3b6d19eed435ca689","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/recent.ejs","hash":"a9a215a52fd93be7ecf93cb70d4384d5fead01b2","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/toc.ejs","hash":"8d9f9dceb71e312054fc540bf28d2386c51812ef","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/widgets/wiki_more.ejs","hash":"ce52d61b9018c3c7688b0e9d05e8ab24a108ecf6","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/archives.styl","hash":"f2fed99aebbdd42bcf80d00d9c2880f4107265b4","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/error.styl","hash":"4c93c760b22d0e21800c45d7dc6f9e50c50da590","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/article-footer.styl","hash":"b9041521e7557f13b876d51bc53eca966e3db49a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/bread-nav.styl","hash":"478d2f568f42a4fdf3cc7b43157070d1d2897d4b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/cover.styl","hash":"d57c16a3f3342f0189d8c3bb76d61ad159a47d25","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/footer.styl","hash":"2da24b52b8c7ee98f1d55e296dc5279493ec2dd8","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/navbar.styl","hash":"7a340b73437e27d763d8164a5c0116e82c955cdc","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/paginator.styl","hash":"aaad37313623d12785088ab78846ead6a973dd12","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/related.styl","hash":"4cabb6a1e43c470200f01e18aa406bb2d0c8f890","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/footer.styl","hash":"283ccc89cb389b990a9fe7422f39e93cb4d07351","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/sidebar.styl","hash":"6f39c8d3aedc30851add960fcdb4fb66df9cfa32","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/toc.styl","hash":"2f2fd06702ba1a909bf3b4909b003e5dffc0f374","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/about.styl","hash":"bda2ceb5a06324de67123a9c13c2c29980922839","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/checkbox.styl","hash":"58f5cad89fe3879aa00bb8c9854d3f262fb2f2b4","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/common.styl","hash":"373d896b12f59e049ab3fb61a8ea37943ec8251b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/copy.styl","hash":"a0c2c2d3d6b17f6bd92e4be47537cb0cc9bffdcc","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/folding.styl","hash":"e18f3fe7dbe5b62d43f7cc1c23ceb2310943ff2d","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/frame.styl","hash":"e15f5390951653b6ad62420afaed3ea2fe3f673c","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/friends.styl","hash":"8f9e60b94c02197e4555f923d357017742bf8d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/ghcard.styl","hash":"98a50d3fab79ce03dd7f161fe3442d803712c284","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/image.styl","hash":"6e8830da3d63216488b2d41936a553a7308907fd","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/link.styl","hash":"5b53ce326172750ec895c814aab5b4574f8a44c0","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/navbar.styl","hash":"e2216d3777fc49584f7e1d3f9115cfe0f08c8dac","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/note.styl","hash":"3cd8f7e5264744b0d07d44cd396886ef8522bbcb","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/sites.styl","hash":"df8db4a080a7b8595cad2676b94c855005cc6f19","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/tabs.styl","hash":"fe272684d545563c1914a6c3ba4d323f97d099ca","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/timeline.styl","hash":"50850e94bc31250b13ca616fdadb583edfe2d124","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/utterances.styl","hash":"80ef659cc375487632fab9768be482ec4bfc757a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/valine.styl","hash":"246e66527c3eef915e4d7713ebf0fc8b7eb07d2a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/utterances/layout.ejs","hash":"4e2ae1fdee9daa6bb8d92a74281d6a60ae0fc79a","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/utterances/script.ejs","hash":"4c00276007d6f8c327d2f7790efca5c9417ff194","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/valine/layout.ejs","hash":"e0b3ed8b13bb4b995b4bd8c8c7ec75e43b074d8e","modified":499162500000},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/plugins/comments/valine/script.ejs","hash":"38d19501c576e444e349e7cab3d9f958d889a42b","modified":499162500000},{"_id":"public/404.html","hash":"f557ecf0c72849dae75045f0cbb5fe4e66518b94","modified":1621172876269},{"_id":"public/2021/05/16/hello-world/index.html","hash":"8f7041afa5313e50abdeed4fa01c34acffe5cb42","modified":1621172876269},{"_id":"public/2017/03/02/自动化测试（Test Flight）/index.html","hash":"552759fbb3b9dbd56434ede7416ecb6b05eaaa8e","modified":1621172876269},{"_id":"public/2016/12/10/iHappy，基于React Native的开发/index.html","hash":"c26f65cb1d05803f50ed524b87473afe9db2b469","modified":1621172876269},{"_id":"public/2016/12/09/热修复（JSPath）/index.html","hash":"bfe009d8a912af359b1b4c8f3e846934ef3c710a","modified":1621172876269},{"_id":"public/2016/12/09/热修复（React Native）/index.html","hash":"1bd65ca158fa22c7fbd3b81a8e61a9ee3ec70fd3","modified":1621172876269},{"_id":"public/2016/12/09/第三方库（Aspects）/index.html","hash":"79115894890b649c5f0464115bbf92b5c1afd05a","modified":1621172876269},{"_id":"public/2016/12/09/第三方库（ReactCocoa）/index.html","hash":"25b8811575791138039c63f65f020a5f8540ca2f","modified":1621172876269},{"_id":"public/2016/12/09/第三方库（WebViewJavaScriptBridge）/index.html","hash":"08485e4ee18538652cc0224669c6c4008a98a3b7","modified":1621172876269},{"_id":"public/2016/12/09/编程规范（Xcode工程目录结构）/index.html","hash":"1926a2cc56b50c03e58bfef67fbb1a974083804a","modified":1621172876269},{"_id":"public/2016/12/09/编程规范（注解规范）/index.html","hash":"de90fba4d85313960092f0e83dda3f61fadee92f","modified":1621172876269},{"_id":"public/categories/React-Native/index.html","hash":"e1fe1ff773fc357956107403ea5e2cf68c8d57e5","modified":1621172876269},{"_id":"public/categories/热修复/index.html","hash":"2a76ff129205fd85214e6424f3dd999af4c70552","modified":1621172876269},{"_id":"public/categories/第三方库/index.html","hash":"ec0c74ab087985aeb3192641c2faf4899de758b4","modified":1621172876269},{"_id":"public/categories/编程规范/index.html","hash":"059c1fccf9b38dd987d3fa3dfbe6b53f0cb1309f","modified":1621172876269},{"_id":"public/categories/自动化测试/index.html","hash":"e5ba93ba956175e337bb445a59432440f81614a0","modified":1621172876269},{"_id":"public/categories/直播/index.html","hash":"fdedfe0e47d473df9cc5e8a317dc09096882cd31","modified":1621172876269},{"_id":"public/page/2/index.html","hash":"4425d5caf5e41549767b2571e0692908bb3412f8","modified":1621172876269},{"_id":"public/categories/index.html","hash":"6d6e91b34b87e6bbd24c72c26058bfdf36f0fb0f","modified":1621172876269},{"_id":"public/2019/03/19/编程规范（代码规范）/index.html","hash":"f7c480e2956c1361f9f6755249a1c3abe04a4f48","modified":1621172876269},{"_id":"public/2019/03/13/自动化测试（脚本打包）/index.html","hash":"458b57cf5458c1ae9cea4b227ad6aa6d1101f08c","modified":1621172876269},{"_id":"public/2017/03/09/搭建一个简易的直播APP（iOS版）/index.html","hash":"a9578bee9414fe214ee5853d18b4cdf1903e6a9e","modified":1621172876269},{"_id":"public/2017/02/26/自动化测试（Xcode一键打包发布）/index.html","hash":"a8eb2f1de618741d088ab0a5275dc96fe28ee826","modified":1621172876269},{"_id":"public/2017/02/19/自动化测试（Jenkins+GitHub+fir-cli自动打包发布）/index.html","hash":"d258960c5e2c7b116c7668842fde3a65212d2cdf","modified":1621172876269},{"_id":"public/archives/index.html","hash":"bda0df33763793424c64064e29ee9bcf33440bbe","modified":1621172876269},{"_id":"public/archives/page/2/index.html","hash":"6669014f8907fafcfbb8014c4ca53dc68f3cf118","modified":1621172876269},{"_id":"public/archives/2016/index.html","hash":"672b8d33fe2dfd088aa75966cf27ada853fdc951","modified":1621172876269},{"_id":"public/archives/2016/12/index.html","hash":"e5816fc93d2be9ad6b2e543a1221a132fd9358d6","modified":1621172876269},{"_id":"public/archives/2017/index.html","hash":"7eea740ba96e110e41c11bf08e3a9777ebf1563c","modified":1621172876269},{"_id":"public/archives/2017/02/index.html","hash":"acd8c61157a111b2440abc0672481c5d2cbb8177","modified":1621172876269},{"_id":"public/archives/2017/03/index.html","hash":"d89678792f4e8aac0973ef7ef0b367d475c7591c","modified":1621172876269},{"_id":"public/archives/2019/index.html","hash":"a9f9d10d5096eb90112de73c35d4a72e128394b3","modified":1621172876269},{"_id":"public/archives/2019/03/index.html","hash":"06c15a1b615bf24b9b23821e39ee5f9b214c8ce0","modified":1621172876269},{"_id":"public/archives/2021/index.html","hash":"22840d70d85a0c337498cb61bd89f2eea81a2db7","modified":1621172876269},{"_id":"public/archives/2021/05/index.html","hash":"6f3c73196ddb2f7bcc7337f222c19647eefe9618","modified":1621172876269},{"_id":"public/index.html","hash":"846e8120a7b0b4d3d1d69faae6adc2031e1f0479","modified":1621172876269},{"_id":"public/js/main.js","hash":"a9f17a43d63c00994a40b156a5fb45e89dd5b272","modified":1621172876269},{"_id":"public/js/plugins/friends.js","hash":"9815baf1e18d7cc2c8cb0623ce032a584cb2d40a","modified":1621172876269},{"_id":"public/js/plugins/sites.js","hash":"dff454cd2bc34b718692dc4e941976311c73f670","modified":1621172876269},{"_id":"public/css/main.css","hash":"1133bfb1b8930eca98ca009f0aa2f4ff65ad7f79","modified":1621172876269}],"Category":[{"name":"React Native","_id":"ckor8h1d50003xn8nh0ihh8b4"},{"name":"热修复","_id":"ckor8h1d90007xn8nfac05h66"},{"name":"第三方库","_id":"ckor8h1df000exn8n2i7ghydi"},{"name":"编程规范","_id":"ckor8h1dl000oxn8n5epecn0r"},{"name":"自动化测试","_id":"ckor8h1dm000uxn8ndora5f9e"},{"name":"直播","_id":"ckor8h1dr0015xn8n1pund6lq"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","cover":"https://cdn.jsdelivr.net/gh/cdn-x/xaoxuu/blog/2020-0927a@1x.svg","_content":"在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncover: https://cdn.jsdelivr.net/gh/cdn-x/xaoxuu/blog/2020-0927a@1x.svg\n---\n在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。\n\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-05-16T12:17:06.945Z","updated":"2021-05-16T13:12:11.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1cw0000xn8n25f2h5a7","content":"<p>在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。</p>\n<span id=\"more\"></span>\n\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>在心率管家默默无闻地上线了一年多之后，现在终于打算来好好聊聊关于手机摄像头测量心率的那些事。本文参考了很多前辈的文章，将在文末列出。</p>","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"iHappy，基于React Native的开发","date":"2016-12-09T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/iHappy，基于React Native的开发.md","raw":"---\ntitle: iHappy，基于React Native的开发\ndate: 2016-12-10\ncategories: React Native\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"iHappy，基于React Native的开发","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d20001xn8ngi77a82r","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"热修复（JSPath）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/热修复（JSPath）.md","raw":"---\ntitle: 热修复（JSPath）\ndate: 2016-12-09\ncategories: [热修复]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"热修复（JSPath）","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d30002xn8nbkn20i2k","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"热修复（React Native）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/热修复（React Native）.md","raw":"---\ntitle: 热修复（React Native）\ndate: 2016-12-09\ncategories: [热修复]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"热修复（React Native）","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d60004xn8n40gfas4i","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"第三方库（Aspects）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/第三方库（Aspects）.md","raw":"---\ntitle: 第三方库（Aspects）\ndate: 2016-12-09\ncategories: [第三方库]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"第三方库（Aspects）","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d70005xn8n9v1jdfb8","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"第三方库（ReactCocoa）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/第三方库（ReactCocoa）.md","raw":"---\ntitle: 第三方库（ReactCocoa）\ndate: 2016-12-09\ncategories: [第三方库]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"第三方库（ReactCocoa）","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d80006xn8n78jc88l7","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"第三方库（WebViewJavaScriptBridge）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/第三方库（WebViewJavaScriptBridge）.md","raw":"---\ntitle: 第三方库（WebViewJavaScriptBridge）\ndate: 2016-12-09\ncategories: [第三方库]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"第三方库（WebViewJavaScriptBridge）","published":1,"updated":"2021-05-16T12:11:10.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1d90008xn8n7g0j0sof","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"编程规范（Xcode工程目录结构）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/编程规范（Xcode工程目录结构）.md","raw":"---\ntitle: 编程规范（Xcode工程目录结构）\ndate: 2016-12-09\ncategories: [编程规范]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"编程规范（Xcode工程目录结构）","published":1,"updated":"2021-05-16T12:11:10.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1da0009xn8n9dljfhhf","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"编程规范（Objective-C编码规范）","date":"2019-03-18T16:00:00.000Z","toc":true,"comments":1,"sidebar":["markdown","toc"],"_content":"\n## 目的  \n\n统一编程风格，提高的可读性与编码效率，避免团队开发可能带来的混乱。\n\n## 适用范围\n\n本规范适用于公司项目产品运用Objective-C作为开发语言的编码活动。\n\n## 定义\n规则 : 编程时必须遵守的约定 \n\n建议 : 编程时需要考虑的约定 \n\n绿色代码 : 对此规则或建议给出的正确例子 \n\n红色代码: 对此规则或建议给出的反面例子 \n\n匈牙利命名法：是一种编程时的命名规范。基本原则是：变量名＝属性＋类型＋对象描述，其中每一对象的名称都要求有明确含义，可以取对象名字全称或名字的一部分 \n\n驼峰命名法：就是当变量名或函式名是由一个或多个单字连结在一起，而构成的唯一识别字时，驼峰命名法第一个单字以小写字母开始；第二个单字的首字母大写或每一个单字的首字母都采用大写字母 \n\n## 代码布局\n### 间隔与格式化\n使用`tab`进行行缩进，代码之间不要使用`tab`。使用`空格`进行行缩进，Xcode会自动转成`tab`缩进。\n\n函数声明、变量、常量声明等\n留一个空格在-或+和返回类型之间，但参数列表里的参数之间不要留间隔；\n函数名与`{`之间保留一个空格，任何地方`{`不要单独起一行\n参数对象的星号前需要加空格，以下是示例代码\n{% codeblock lang:objc %}\n//正确演示\n@property (nonatomic, strong) BSNLHomeModel *homeModel;\n@property (nonatomic, copy)  NSArray *categoryList;\n\n- (void)selectMarketingModel:(BSNLHomeMarketingModel *)marketingModel;\n- (void)selectFunctionModel:(BSNLHomeFunctionModel *)fuctionModel;\n- (void)selectHomeAdModel:(BSNLHomeAdModel *)adModel;\n- (void)selectGoods:(BSNLGoodModel *)goodsModel;\n\n- (void)umengEvent:(NSString *)eventId\n        attributes:(NSDictionary *)attributes\n            number:(NSNumber *)number {\n    NSString *numberKey = @\"__ct__\";\n    NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes];\n    [mutableDictionary setObject:[number stringValue] forKey:numberKey];\n    [MobClick event:eventId attributes:mutableDictionary];\n}\n\n//错误演示\n-(void)umengEvent:(NSString*)eventId//错误1.-前面没有留空格\n        attributes:(NSDictionary*)attributes//错误2.NSDictionary与*之间没有留空格\n            number:(NSNumber*)number \n{//错误3. {单独起一行\n    NSString* numberKey = @\"__ct__\";//错误4.NSString与*之间没有留空格，*与numberKey不应该留空格\n    NSMutableDictionary* mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes];\n    [mutableDictionary setObject:[number stringValue] forKey:numberKey];\n    [MobClick event:eventId attributes:mutableDictionary];\n}\n\n{% endcodeblock %}\n\n\n\n### 代码行长度限制\n码中的每行文本不要超过200个字符的长度。\nC++的规范是行长度不超过80个文本，考虑到Objective-C语法命名要求尽量详细明了，这里规定每行文本不超过200个字符长度。\n你可以在Xcode里清楚地发现代码中的违规，设置Xcode>Preferences>TextEditing>勾选Page Guide at culomn，并设置数量为200(之后就可以在代码编辑区域里看到一块指定字符长度的区域)\n\n函数入参超过3个时，需进行换行显示，如\n{% codeblock lang:objc %}\n//正确演示\n- (void)saveLogWithEventName:(NSString *)eventName\n                    eventKey:(NSString *)eventKey\n                    pre_page:(NSString *)pre_page\n                current_page:(NSString *)current_page\n                   next_page:(NSString *)next_page\n                  eventValue:(NSDictionary *)eventValue;\n\n[[BXEventLogManager sharedManager] saveLogWithEventName:eventType\n                                               eventKey:eventName\n                                               pre_page:prePage\n                                           current_page:currentPage\n                                              next_page:nextPage\n                                             eventValue:param];\n\n//错误演示\n- (void)saveLogWithEventName:(NSString *)eventName eventKey:(NSString *)eventKey pre_page:(NSString *)pre_page current_page:(NSString *)current_page next_page:(NSString *)next_page eventValue:(NSDictionary *)eventValue;\n\n[[BXEventLogManager sharedManager] saveLogWithEventName:eventType eventKey:eventName pre_page:prePage current_page:currentPage next_page:nextPage eventValue:param];\n\n{% endcodeblock %}\n\n## 命名\n### 文件命名\n### Objective-C++\n### 类命名\n### 类别命名\n### Objective-C方法命名\n### 变量命名\n### 实体变量\n### 常量\n## 注释\n### 声明注释\n### 注释内容\n## Cocoa和Objective-C特性\n### 成员变量应该定义为@private\n### 明确指定初始化\n### 重写指定初始化\n### 重写NSObject的方法\n### 避免调用new方法\n### 初始化变量\n### 保持公有API简明\n### #import和#include\n### 使用根框架\n### 构建时即设定autorelease\n### 优先autorelease而非retain\n### 以声明时的顺序dealloc处理实例变量\n### Setters copy NSStrings\n### 避免抛出异常\n### nil检查\n### BOOL类型陷阱\n### 属性\n### 为NSString使用Copy属性\n\n## 常用快捷键汇总\n格式化代码快捷键：`Ctrl + i`\n\n\n\n\n\n","source":"_posts/编程规范（代码规范）.md","raw":"---\ntitle: 编程规范（Objective-C编码规范）\ndate: 2019-03-19\ncategories: [编程规范]\ntoc: true\ncomments: true\nsidebar: [markdown, toc]\n---\n\n## 目的  \n\n统一编程风格，提高的可读性与编码效率，避免团队开发可能带来的混乱。\n\n## 适用范围\n\n本规范适用于公司项目产品运用Objective-C作为开发语言的编码活动。\n\n## 定义\n规则 : 编程时必须遵守的约定 \n\n建议 : 编程时需要考虑的约定 \n\n绿色代码 : 对此规则或建议给出的正确例子 \n\n红色代码: 对此规则或建议给出的反面例子 \n\n匈牙利命名法：是一种编程时的命名规范。基本原则是：变量名＝属性＋类型＋对象描述，其中每一对象的名称都要求有明确含义，可以取对象名字全称或名字的一部分 \n\n驼峰命名法：就是当变量名或函式名是由一个或多个单字连结在一起，而构成的唯一识别字时，驼峰命名法第一个单字以小写字母开始；第二个单字的首字母大写或每一个单字的首字母都采用大写字母 \n\n## 代码布局\n### 间隔与格式化\n使用`tab`进行行缩进，代码之间不要使用`tab`。使用`空格`进行行缩进，Xcode会自动转成`tab`缩进。\n\n函数声明、变量、常量声明等\n留一个空格在-或+和返回类型之间，但参数列表里的参数之间不要留间隔；\n函数名与`{`之间保留一个空格，任何地方`{`不要单独起一行\n参数对象的星号前需要加空格，以下是示例代码\n{% codeblock lang:objc %}\n//正确演示\n@property (nonatomic, strong) BSNLHomeModel *homeModel;\n@property (nonatomic, copy)  NSArray *categoryList;\n\n- (void)selectMarketingModel:(BSNLHomeMarketingModel *)marketingModel;\n- (void)selectFunctionModel:(BSNLHomeFunctionModel *)fuctionModel;\n- (void)selectHomeAdModel:(BSNLHomeAdModel *)adModel;\n- (void)selectGoods:(BSNLGoodModel *)goodsModel;\n\n- (void)umengEvent:(NSString *)eventId\n        attributes:(NSDictionary *)attributes\n            number:(NSNumber *)number {\n    NSString *numberKey = @\"__ct__\";\n    NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes];\n    [mutableDictionary setObject:[number stringValue] forKey:numberKey];\n    [MobClick event:eventId attributes:mutableDictionary];\n}\n\n//错误演示\n-(void)umengEvent:(NSString*)eventId//错误1.-前面没有留空格\n        attributes:(NSDictionary*)attributes//错误2.NSDictionary与*之间没有留空格\n            number:(NSNumber*)number \n{//错误3. {单独起一行\n    NSString* numberKey = @\"__ct__\";//错误4.NSString与*之间没有留空格，*与numberKey不应该留空格\n    NSMutableDictionary* mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:attributes];\n    [mutableDictionary setObject:[number stringValue] forKey:numberKey];\n    [MobClick event:eventId attributes:mutableDictionary];\n}\n\n{% endcodeblock %}\n\n\n\n### 代码行长度限制\n码中的每行文本不要超过200个字符的长度。\nC++的规范是行长度不超过80个文本，考虑到Objective-C语法命名要求尽量详细明了，这里规定每行文本不超过200个字符长度。\n你可以在Xcode里清楚地发现代码中的违规，设置Xcode>Preferences>TextEditing>勾选Page Guide at culomn，并设置数量为200(之后就可以在代码编辑区域里看到一块指定字符长度的区域)\n\n函数入参超过3个时，需进行换行显示，如\n{% codeblock lang:objc %}\n//正确演示\n- (void)saveLogWithEventName:(NSString *)eventName\n                    eventKey:(NSString *)eventKey\n                    pre_page:(NSString *)pre_page\n                current_page:(NSString *)current_page\n                   next_page:(NSString *)next_page\n                  eventValue:(NSDictionary *)eventValue;\n\n[[BXEventLogManager sharedManager] saveLogWithEventName:eventType\n                                               eventKey:eventName\n                                               pre_page:prePage\n                                           current_page:currentPage\n                                              next_page:nextPage\n                                             eventValue:param];\n\n//错误演示\n- (void)saveLogWithEventName:(NSString *)eventName eventKey:(NSString *)eventKey pre_page:(NSString *)pre_page current_page:(NSString *)current_page next_page:(NSString *)next_page eventValue:(NSDictionary *)eventValue;\n\n[[BXEventLogManager sharedManager] saveLogWithEventName:eventType eventKey:eventName pre_page:prePage current_page:currentPage next_page:nextPage eventValue:param];\n\n{% endcodeblock %}\n\n## 命名\n### 文件命名\n### Objective-C++\n### 类命名\n### 类别命名\n### Objective-C方法命名\n### 变量命名\n### 实体变量\n### 常量\n## 注释\n### 声明注释\n### 注释内容\n## Cocoa和Objective-C特性\n### 成员变量应该定义为@private\n### 明确指定初始化\n### 重写指定初始化\n### 重写NSObject的方法\n### 避免调用new方法\n### 初始化变量\n### 保持公有API简明\n### #import和#include\n### 使用根框架\n### 构建时即设定autorelease\n### 优先autorelease而非retain\n### 以声明时的顺序dealloc处理实例变量\n### Setters copy NSStrings\n### 避免抛出异常\n### nil检查\n### BOOL类型陷阱\n### 属性\n### 为NSString使用Copy属性\n\n## 常用快捷键汇总\n格式化代码快捷键：`Ctrl + i`\n\n\n\n\n\n","slug":"编程规范（代码规范）","published":1,"updated":"2021-05-16T12:56:17.605Z","layout":"post","photos":[],"link":"","_id":"ckor8h1dd000cxn8n5yexbtlj","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>统一编程风格，提高的可读性与编码效率，避免团队开发可能带来的混乱。</p>\n<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><p>本规范适用于公司项目产品运用Objective-C作为开发语言的编码活动。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>规则 : 编程时必须遵守的约定 </p>\n<p>建议 : 编程时需要考虑的约定 </p>\n<p>绿色代码 : 对此规则或建议给出的正确例子 </p>\n<p>红色代码: 对此规则或建议给出的反面例子 </p>\n<p>匈牙利命名法：是一种编程时的命名规范。基本原则是：变量名＝属性＋类型＋对象描述，其中每一对象的名称都要求有明确含义，可以取对象名字全称或名字的一部分 </p>\n<p>驼峰命名法：就是当变量名或函式名是由一个或多个单字连结在一起，而构成的唯一识别字时，驼峰命名法第一个单字以小写字母开始；第二个单字的首字母大写或每一个单字的首字母都采用大写字母 </p>\n<h2 id=\"代码布局\"><a href=\"#代码布局\" class=\"headerlink\" title=\"代码布局\"></a>代码布局</h2><h3 id=\"间隔与格式化\"><a href=\"#间隔与格式化\" class=\"headerlink\" title=\"间隔与格式化\"></a>间隔与格式化</h3><p>使用<code>tab</code>进行行缩进，代码之间不要使用<code>tab</code>。使用<code>空格</code>进行行缩进，Xcode会自动转成<code>tab</code>缩进。</p>\n<p>函数声明、变量、常量声明等<br>留一个空格在-或+和返回类型之间，但参数列表里的参数之间不要留间隔；<br>函数名与<code>&#123;</code>之间保留一个空格，任何地方<code>&#123;</code>不要单独起一行<br>参数对象的星号前需要加空格，以下是示例代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确演示</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) BSNLHomeModel *homeModel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>)  <span class=\"built_in\">NSArray</span> *categoryList;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectMarketingModel:(BSNLHomeMarketingModel *)marketingModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectFunctionModel:(BSNLHomeFunctionModel *)fuctionModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectHomeAdModel:(BSNLHomeAdModel *)adModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectGoods:(BSNLGoodModel *)goodsModel;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)umengEvent:(<span class=\"built_in\">NSString</span> *)eventId</span><br><span class=\"line\">        attributes:(<span class=\"built_in\">NSDictionary</span> *)attributes</span><br><span class=\"line\">            number:(<span class=\"built_in\">NSNumber</span> *)number &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *numberKey = <span class=\"string\">@&quot;__ct__&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *mutableDictionary = [<span class=\"built_in\">NSMutableDictionary</span> dictionaryWithDictionary:attributes];</span><br><span class=\"line\">    [mutableDictionary setObject:[number stringValue] forKey:numberKey];</span><br><span class=\"line\">    [MobClick event:eventId attributes:mutableDictionary];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误演示</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)umengEvent:(<span class=\"built_in\">NSString</span>*)eventId<span class=\"comment\">//错误1.-前面没有留空格</span></span><br><span class=\"line\">        attributes:(<span class=\"built_in\">NSDictionary</span>*)attributes<span class=\"comment\">//错误2.NSDictionary与*之间没有留空格</span></span><br><span class=\"line\">            number:(<span class=\"built_in\">NSNumber</span>*)number </span><br><span class=\"line\">&#123;<span class=\"comment\">//错误3. &#123;单独起一行</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* numberKey = <span class=\"string\">@&quot;__ct__&quot;</span>;<span class=\"comment\">//错误4.NSString与*之间没有留空格，*与numberKey不应该留空格</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span>* mutableDictionary = [<span class=\"built_in\">NSMutableDictionary</span> dictionaryWithDictionary:attributes];</span><br><span class=\"line\">    [mutableDictionary setObject:[number stringValue] forKey:numberKey];</span><br><span class=\"line\">    [MobClick event:eventId attributes:mutableDictionary];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码行长度限制\"><a href=\"#代码行长度限制\" class=\"headerlink\" title=\"代码行长度限制\"></a>代码行长度限制</h3><p>码中的每行文本不要超过200个字符的长度。<br>C++的规范是行长度不超过80个文本，考虑到Objective-C语法命名要求尽量详细明了，这里规定每行文本不超过200个字符长度。<br>你可以在Xcode里清楚地发现代码中的违规，设置Xcode&gt;Preferences&gt;TextEditing&gt;勾选Page Guide at culomn，并设置数量为200(之后就可以在代码编辑区域里看到一块指定字符长度的区域)</p>\n<p>函数入参超过3个时，需进行换行显示，如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确演示</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)saveLogWithEventName:(<span class=\"built_in\">NSString</span> *)eventName</span><br><span class=\"line\">                    eventKey:(<span class=\"built_in\">NSString</span> *)eventKey</span><br><span class=\"line\">                    pre_page:(<span class=\"built_in\">NSString</span> *)pre_page</span><br><span class=\"line\">                current_page:(<span class=\"built_in\">NSString</span> *)current_page</span><br><span class=\"line\">                   next_page:(<span class=\"built_in\">NSString</span> *)next_page</span><br><span class=\"line\">                  eventValue:(<span class=\"built_in\">NSDictionary</span> *)eventValue;</span><br><span class=\"line\"></span><br><span class=\"line\">[[BXEventLogManager sharedManager] saveLogWithEventName:eventType</span><br><span class=\"line\">                                               eventKey:eventName</span><br><span class=\"line\">                                               pre_page:prePage</span><br><span class=\"line\">                                           current_page:currentPage</span><br><span class=\"line\">                                              next_page:nextPage</span><br><span class=\"line\">                                             eventValue:param];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误演示</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)saveLogWithEventName:(<span class=\"built_in\">NSString</span> *)eventName eventKey:(<span class=\"built_in\">NSString</span> *)eventKey pre_page:(<span class=\"built_in\">NSString</span> *)pre_page current_page:(<span class=\"built_in\">NSString</span> *)current_page next_page:(<span class=\"built_in\">NSString</span> *)next_page eventValue:(<span class=\"built_in\">NSDictionary</span> *)eventValue;</span><br><span class=\"line\"></span><br><span class=\"line\">[[BXEventLogManager sharedManager] saveLogWithEventName:eventType eventKey:eventName pre_page:prePage current_page:currentPage next_page:nextPage eventValue:param];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><h3 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h3><h3 id=\"Objective-C\"><a href=\"#Objective-C\" class=\"headerlink\" title=\"Objective-C++\"></a>Objective-C++</h3><h3 id=\"类命名\"><a href=\"#类命名\" class=\"headerlink\" title=\"类命名\"></a>类命名</h3><h3 id=\"类别命名\"><a href=\"#类别命名\" class=\"headerlink\" title=\"类别命名\"></a>类别命名</h3><h3 id=\"Objective-C方法命名\"><a href=\"#Objective-C方法命名\" class=\"headerlink\" title=\"Objective-C方法命名\"></a>Objective-C方法命名</h3><h3 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h3><h3 id=\"实体变量\"><a href=\"#实体变量\" class=\"headerlink\" title=\"实体变量\"></a>实体变量</h3><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><h3 id=\"声明注释\"><a href=\"#声明注释\" class=\"headerlink\" title=\"声明注释\"></a>声明注释</h3><h3 id=\"注释内容\"><a href=\"#注释内容\" class=\"headerlink\" title=\"注释内容\"></a>注释内容</h3><h2 id=\"Cocoa和Objective-C特性\"><a href=\"#Cocoa和Objective-C特性\" class=\"headerlink\" title=\"Cocoa和Objective-C特性\"></a>Cocoa和Objective-C特性</h2><h3 id=\"成员变量应该定义为-private\"><a href=\"#成员变量应该定义为-private\" class=\"headerlink\" title=\"成员变量应该定义为@private\"></a>成员变量应该定义为@private</h3><h3 id=\"明确指定初始化\"><a href=\"#明确指定初始化\" class=\"headerlink\" title=\"明确指定初始化\"></a>明确指定初始化</h3><h3 id=\"重写指定初始化\"><a href=\"#重写指定初始化\" class=\"headerlink\" title=\"重写指定初始化\"></a>重写指定初始化</h3><h3 id=\"重写NSObject的方法\"><a href=\"#重写NSObject的方法\" class=\"headerlink\" title=\"重写NSObject的方法\"></a>重写NSObject的方法</h3><h3 id=\"避免调用new方法\"><a href=\"#避免调用new方法\" class=\"headerlink\" title=\"避免调用new方法\"></a>避免调用new方法</h3><h3 id=\"初始化变量\"><a href=\"#初始化变量\" class=\"headerlink\" title=\"初始化变量\"></a>初始化变量</h3><h3 id=\"保持公有API简明\"><a href=\"#保持公有API简明\" class=\"headerlink\" title=\"保持公有API简明\"></a>保持公有API简明</h3><h3 id=\"import和-include\"><a href=\"#import和-include\" class=\"headerlink\" title=\"#import和#include\"></a>#import和#include</h3><h3 id=\"使用根框架\"><a href=\"#使用根框架\" class=\"headerlink\" title=\"使用根框架\"></a>使用根框架</h3><h3 id=\"构建时即设定autorelease\"><a href=\"#构建时即设定autorelease\" class=\"headerlink\" title=\"构建时即设定autorelease\"></a>构建时即设定autorelease</h3><h3 id=\"优先autorelease而非retain\"><a href=\"#优先autorelease而非retain\" class=\"headerlink\" title=\"优先autorelease而非retain\"></a>优先autorelease而非retain</h3><h3 id=\"以声明时的顺序dealloc处理实例变量\"><a href=\"#以声明时的顺序dealloc处理实例变量\" class=\"headerlink\" title=\"以声明时的顺序dealloc处理实例变量\"></a>以声明时的顺序dealloc处理实例变量</h3><h3 id=\"Setters-copy-NSStrings\"><a href=\"#Setters-copy-NSStrings\" class=\"headerlink\" title=\"Setters copy NSStrings\"></a>Setters copy NSStrings</h3><h3 id=\"避免抛出异常\"><a href=\"#避免抛出异常\" class=\"headerlink\" title=\"避免抛出异常\"></a>避免抛出异常</h3><h3 id=\"nil检查\"><a href=\"#nil检查\" class=\"headerlink\" title=\"nil检查\"></a>nil检查</h3><h3 id=\"BOOL类型陷阱\"><a href=\"#BOOL类型陷阱\" class=\"headerlink\" title=\"BOOL类型陷阱\"></a>BOOL类型陷阱</h3><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><h3 id=\"为NSString使用Copy属性\"><a href=\"#为NSString使用Copy属性\" class=\"headerlink\" title=\"为NSString使用Copy属性\"></a>为NSString使用Copy属性</h3><h2 id=\"常用快捷键汇总\"><a href=\"#常用快捷键汇总\" class=\"headerlink\" title=\"常用快捷键汇总\"></a>常用快捷键汇总</h2><p>格式化代码快捷键：<code>Ctrl + i</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>统一编程风格，提高的可读性与编码效率，避免团队开发可能带来的混乱。</p>\n<h2 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h2><p>本规范适用于公司项目产品运用Objective-C作为开发语言的编码活动。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>规则 : 编程时必须遵守的约定 </p>\n<p>建议 : 编程时需要考虑的约定 </p>\n<p>绿色代码 : 对此规则或建议给出的正确例子 </p>\n<p>红色代码: 对此规则或建议给出的反面例子 </p>\n<p>匈牙利命名法：是一种编程时的命名规范。基本原则是：变量名＝属性＋类型＋对象描述，其中每一对象的名称都要求有明确含义，可以取对象名字全称或名字的一部分 </p>\n<p>驼峰命名法：就是当变量名或函式名是由一个或多个单字连结在一起，而构成的唯一识别字时，驼峰命名法第一个单字以小写字母开始；第二个单字的首字母大写或每一个单字的首字母都采用大写字母 </p>\n<h2 id=\"代码布局\"><a href=\"#代码布局\" class=\"headerlink\" title=\"代码布局\"></a>代码布局</h2><h3 id=\"间隔与格式化\"><a href=\"#间隔与格式化\" class=\"headerlink\" title=\"间隔与格式化\"></a>间隔与格式化</h3><p>使用<code>tab</code>进行行缩进，代码之间不要使用<code>tab</code>。使用<code>空格</code>进行行缩进，Xcode会自动转成<code>tab</code>缩进。</p>\n<p>函数声明、变量、常量声明等<br>留一个空格在-或+和返回类型之间，但参数列表里的参数之间不要留间隔；<br>函数名与<code>&#123;</code>之间保留一个空格，任何地方<code>&#123;</code>不要单独起一行<br>参数对象的星号前需要加空格，以下是示例代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确演示</span></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) BSNLHomeModel *homeModel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>)  <span class=\"built_in\">NSArray</span> *categoryList;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectMarketingModel:(BSNLHomeMarketingModel *)marketingModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectFunctionModel:(BSNLHomeFunctionModel *)fuctionModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectHomeAdModel:(BSNLHomeAdModel *)adModel;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)selectGoods:(BSNLGoodModel *)goodsModel;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)umengEvent:(<span class=\"built_in\">NSString</span> *)eventId</span><br><span class=\"line\">        attributes:(<span class=\"built_in\">NSDictionary</span> *)attributes</span><br><span class=\"line\">            number:(<span class=\"built_in\">NSNumber</span> *)number &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *numberKey = <span class=\"string\">@&quot;__ct__&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span> *mutableDictionary = [<span class=\"built_in\">NSMutableDictionary</span> dictionaryWithDictionary:attributes];</span><br><span class=\"line\">    [mutableDictionary setObject:[number stringValue] forKey:numberKey];</span><br><span class=\"line\">    [MobClick event:eventId attributes:mutableDictionary];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误演示</span></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)umengEvent:(<span class=\"built_in\">NSString</span>*)eventId<span class=\"comment\">//错误1.-前面没有留空格</span></span><br><span class=\"line\">        attributes:(<span class=\"built_in\">NSDictionary</span>*)attributes<span class=\"comment\">//错误2.NSDictionary与*之间没有留空格</span></span><br><span class=\"line\">            number:(<span class=\"built_in\">NSNumber</span>*)number </span><br><span class=\"line\">&#123;<span class=\"comment\">//错误3. &#123;单独起一行</span></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span>* numberKey = <span class=\"string\">@&quot;__ct__&quot;</span>;<span class=\"comment\">//错误4.NSString与*之间没有留空格，*与numberKey不应该留空格</span></span><br><span class=\"line\">    <span class=\"built_in\">NSMutableDictionary</span>* mutableDictionary = [<span class=\"built_in\">NSMutableDictionary</span> dictionaryWithDictionary:attributes];</span><br><span class=\"line\">    [mutableDictionary setObject:[number stringValue] forKey:numberKey];</span><br><span class=\"line\">    [MobClick event:eventId attributes:mutableDictionary];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码行长度限制\"><a href=\"#代码行长度限制\" class=\"headerlink\" title=\"代码行长度限制\"></a>代码行长度限制</h3><p>码中的每行文本不要超过200个字符的长度。<br>C++的规范是行长度不超过80个文本，考虑到Objective-C语法命名要求尽量详细明了，这里规定每行文本不超过200个字符长度。<br>你可以在Xcode里清楚地发现代码中的违规，设置Xcode&gt;Preferences&gt;TextEditing&gt;勾选Page Guide at culomn，并设置数量为200(之后就可以在代码编辑区域里看到一块指定字符长度的区域)</p>\n<p>函数入参超过3个时，需进行换行显示，如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确演示</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)saveLogWithEventName:(<span class=\"built_in\">NSString</span> *)eventName</span><br><span class=\"line\">                    eventKey:(<span class=\"built_in\">NSString</span> *)eventKey</span><br><span class=\"line\">                    pre_page:(<span class=\"built_in\">NSString</span> *)pre_page</span><br><span class=\"line\">                current_page:(<span class=\"built_in\">NSString</span> *)current_page</span><br><span class=\"line\">                   next_page:(<span class=\"built_in\">NSString</span> *)next_page</span><br><span class=\"line\">                  eventValue:(<span class=\"built_in\">NSDictionary</span> *)eventValue;</span><br><span class=\"line\"></span><br><span class=\"line\">[[BXEventLogManager sharedManager] saveLogWithEventName:eventType</span><br><span class=\"line\">                                               eventKey:eventName</span><br><span class=\"line\">                                               pre_page:prePage</span><br><span class=\"line\">                                           current_page:currentPage</span><br><span class=\"line\">                                              next_page:nextPage</span><br><span class=\"line\">                                             eventValue:param];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误演示</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)saveLogWithEventName:(<span class=\"built_in\">NSString</span> *)eventName eventKey:(<span class=\"built_in\">NSString</span> *)eventKey pre_page:(<span class=\"built_in\">NSString</span> *)pre_page current_page:(<span class=\"built_in\">NSString</span> *)current_page next_page:(<span class=\"built_in\">NSString</span> *)next_page eventValue:(<span class=\"built_in\">NSDictionary</span> *)eventValue;</span><br><span class=\"line\"></span><br><span class=\"line\">[[BXEventLogManager sharedManager] saveLogWithEventName:eventType eventKey:eventName pre_page:prePage current_page:currentPage next_page:nextPage eventValue:param];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><h3 id=\"文件命名\"><a href=\"#文件命名\" class=\"headerlink\" title=\"文件命名\"></a>文件命名</h3><h3 id=\"Objective-C\"><a href=\"#Objective-C\" class=\"headerlink\" title=\"Objective-C++\"></a>Objective-C++</h3><h3 id=\"类命名\"><a href=\"#类命名\" class=\"headerlink\" title=\"类命名\"></a>类命名</h3><h3 id=\"类别命名\"><a href=\"#类别命名\" class=\"headerlink\" title=\"类别命名\"></a>类别命名</h3><h3 id=\"Objective-C方法命名\"><a href=\"#Objective-C方法命名\" class=\"headerlink\" title=\"Objective-C方法命名\"></a>Objective-C方法命名</h3><h3 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h3><h3 id=\"实体变量\"><a href=\"#实体变量\" class=\"headerlink\" title=\"实体变量\"></a>实体变量</h3><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><h3 id=\"声明注释\"><a href=\"#声明注释\" class=\"headerlink\" title=\"声明注释\"></a>声明注释</h3><h3 id=\"注释内容\"><a href=\"#注释内容\" class=\"headerlink\" title=\"注释内容\"></a>注释内容</h3><h2 id=\"Cocoa和Objective-C特性\"><a href=\"#Cocoa和Objective-C特性\" class=\"headerlink\" title=\"Cocoa和Objective-C特性\"></a>Cocoa和Objective-C特性</h2><h3 id=\"成员变量应该定义为-private\"><a href=\"#成员变量应该定义为-private\" class=\"headerlink\" title=\"成员变量应该定义为@private\"></a>成员变量应该定义为@private</h3><h3 id=\"明确指定初始化\"><a href=\"#明确指定初始化\" class=\"headerlink\" title=\"明确指定初始化\"></a>明确指定初始化</h3><h3 id=\"重写指定初始化\"><a href=\"#重写指定初始化\" class=\"headerlink\" title=\"重写指定初始化\"></a>重写指定初始化</h3><h3 id=\"重写NSObject的方法\"><a href=\"#重写NSObject的方法\" class=\"headerlink\" title=\"重写NSObject的方法\"></a>重写NSObject的方法</h3><h3 id=\"避免调用new方法\"><a href=\"#避免调用new方法\" class=\"headerlink\" title=\"避免调用new方法\"></a>避免调用new方法</h3><h3 id=\"初始化变量\"><a href=\"#初始化变量\" class=\"headerlink\" title=\"初始化变量\"></a>初始化变量</h3><h3 id=\"保持公有API简明\"><a href=\"#保持公有API简明\" class=\"headerlink\" title=\"保持公有API简明\"></a>保持公有API简明</h3><h3 id=\"import和-include\"><a href=\"#import和-include\" class=\"headerlink\" title=\"#import和#include\"></a>#import和#include</h3><h3 id=\"使用根框架\"><a href=\"#使用根框架\" class=\"headerlink\" title=\"使用根框架\"></a>使用根框架</h3><h3 id=\"构建时即设定autorelease\"><a href=\"#构建时即设定autorelease\" class=\"headerlink\" title=\"构建时即设定autorelease\"></a>构建时即设定autorelease</h3><h3 id=\"优先autorelease而非retain\"><a href=\"#优先autorelease而非retain\" class=\"headerlink\" title=\"优先autorelease而非retain\"></a>优先autorelease而非retain</h3><h3 id=\"以声明时的顺序dealloc处理实例变量\"><a href=\"#以声明时的顺序dealloc处理实例变量\" class=\"headerlink\" title=\"以声明时的顺序dealloc处理实例变量\"></a>以声明时的顺序dealloc处理实例变量</h3><h3 id=\"Setters-copy-NSStrings\"><a href=\"#Setters-copy-NSStrings\" class=\"headerlink\" title=\"Setters copy NSStrings\"></a>Setters copy NSStrings</h3><h3 id=\"避免抛出异常\"><a href=\"#避免抛出异常\" class=\"headerlink\" title=\"避免抛出异常\"></a>避免抛出异常</h3><h3 id=\"nil检查\"><a href=\"#nil检查\" class=\"headerlink\" title=\"nil检查\"></a>nil检查</h3><h3 id=\"BOOL类型陷阱\"><a href=\"#BOOL类型陷阱\" class=\"headerlink\" title=\"BOOL类型陷阱\"></a>BOOL类型陷阱</h3><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><h3 id=\"为NSString使用Copy属性\"><a href=\"#为NSString使用Copy属性\" class=\"headerlink\" title=\"为NSString使用Copy属性\"></a>为NSString使用Copy属性</h3><h2 id=\"常用快捷键汇总\"><a href=\"#常用快捷键汇总\" class=\"headerlink\" title=\"常用快捷键汇总\"></a>常用快捷键汇总</h2><p>格式化代码快捷键：<code>Ctrl + i</code></p>\n"},{"title":"编程规范（注解规范）","date":"2016-12-08T16:00:00.000Z","_content":"\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","source":"_posts/编程规范（注解规范）.md","raw":"---\ntitle: 编程规范（注解规范）\ndate: 2016-12-09\ncategories: [编程规范]\n---\n\n{% codeblock %}\n### 目录\n1、iHappy框架介绍\n2、网络封装与Promise的使用\n3、使用第三方库\n4、redux模式的介绍\n5、瀑布流\n6、一些小技巧\n7、打离线包\n8、热部署\n{% endcodeblock %}\n","slug":"编程规范（注解规范）","published":1,"updated":"2021-05-16T12:11:10.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1de000dxn8n2epxgw99","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 目录</span><br><span class=\"line\">1、iHappy框架介绍</span><br><span class=\"line\">2、网络封装与Promise的使用</span><br><span class=\"line\">3、使用第三方库</span><br><span class=\"line\">4、redux模式的介绍</span><br><span class=\"line\">5、瀑布流</span><br><span class=\"line\">6、一些小技巧</span><br><span class=\"line\">7、打离线包</span><br><span class=\"line\">8、热部署</span><br></pre></td></tr></table></figure>\n"},{"title":"自动化测试（Jenkins+GitHub+fir-cli自动打包发布）","date":"2017-02-18T16:00:00.000Z","_content":"* \n{% codeblock lang:sh %}\n    目录：\n    1、安装Jenkins\n    2、进入Jenkins\n    3、下载安装firm.im插件\n    4、安装GitHub和Git插件\n    5、安装Xcode插件\n    6、创建并配置项目\n    7、常见错误\n{% endcodeblock %}\n\n终端启动Jenkins并启动Jenkins\ncd /Applications/Jenkins/\njava -jar jenkins.war --httpPort=7070\n\n### 1、安装Jenkins  \n方式一：官网下载 {% link Jenkins https://jenkins.io/ %}\n\n* 安装完后通过终端打开\n{% codeblock lang:sh %}\n    $ open /Users/ZZX/Desktop/Jenkins/jenkins.war\n{% endcodeblock %}\n\n方式二：通过命令行下载安装\n* 首先安装homebrew\n{% codeblock lang:sh %}\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n\n* 然后安装Jenkins\n{% codeblock lang:sh %}\n    $ brew install jenkins \n{% endcodeblock %}\n\n### 2、进入Jenkins  \n在浏览器里面输入 http://localhost:8080/\n当端口发送冲突时，在终端输入一下命令修改端口\n* \n{% codeblock lang:sh %}\n    $cd /Applications/Jenkins/\n    $ java -jar jenkins.war --httpPort=7070\n{% endcodeblock %}\n\n\n### 3、下载和安装fir.im的插件  \n* 下载 {% link 插件 http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi %}\n* 安装插件\n进入Jenkins点击左上方的系统管理然后进入插件管理\n![image](http://129.204.47.207/img/blog/20161211-1-1.png)\n\n然后点高级\n![image](http://129.204.47.207/img/blog/20161211-1-2.png)\n\n\n往下拖找到上传插件\n![image](http://129.204.47.207/img/blog/20161211-1-3.png)\n\n\n\n把下载好的文件传入，然后等待安装完成\n![image](http://129.204.47.207/img/blog/20161211-1-4.png)\n\n\n\n\n### 4、安装GitHub和Git插件  \n为了能够在GitHub分支更新后能够自动打包上传，这里需要安装两个git插件\n* GitHub Plugin\n* Git Plugin\n\n### 5、安装Xcode插件  \n* Xcode integration\n\n6、创建并配置项目  \n* 6.1、创建一个新的项目 \n\n* 6.2、项目基本信息  \n![image](http://129.204.47.207/img/blog/20161211-1-5.png)\n\n\n* 6.3、源码管理信息   \n![image](http://129.204.47.207/img/blog/20161211-1-6.png)\n\n\n* 6.4、构建触发器：  \n![image](http://129.204.47.207/img/blog/20161211-1-7.png)\n\n\n\n* 6.5、构建->添加构建步骤  \n![image](http://129.204.47.207/img/blog/20161211-1-8.png)\n\n\n* 6.6、构建->Xcode  \n![image](http://129.204.47.207/img/blog/20161211-1-9.png)\n\n\n* 6.7、构建->Xcode证书信息  \n我这里是git上的项目已经配置好了证书和provision profiles。\n1、勾选Unlock Keychain；\n2、Keychain path中输入 ￥{HOME}/Library/Keychains/login.keychain;\n3、Keychain password为你的钥匙串密码。\n![image](http://129.204.47.207/img/blog/20161211-1-10.png)\n\n\n\n* 6.8、构建后操作->Upload to fir.im  \n安装过fim.im插件以后，这里就可以看到Upload to fim.im选项了，fim.im的上传脚本可参考fir.im的相关文档进行操作，如果使用的是蒲公英或者其他第三方托管平台，这一步的操作是一样的，安装插件-添加构建后操作->添加上传脚本\n![image](http://129.204.47.207/img/blog/20161211-1-11.png)\n![image](http://129.204.47.207/img/blog/20161211-1-12.png)\n\n\n至此，所有的配置都已经完成，下面就可以进行构建操作了。\n\n最后一步：构建生成ipa文件，并上传fir.im\n回到刚刚创建的项目，进入项目页面，点击左边的“立即构建”按钮，即可开始构建。构建完成以后，可以在配置的ipa所在的路径查看是否生产ipa文件。登录fir.im查看是否已经上传到fim.im上。至此，本教程结束。\n![image](http://129.204.47.207/img/blog/20161211-1-13.png)\n\n\n\n\n------------------------------------------------------\n2016.06.27补充\n如果项目中使用了cocoapods管理第三方框架，那么构建->xcode设置时需要注意：\n\n1. 因为项目中使用 workspace， 所以 Target 可以不填。\n![image](http://129.204.47.207/img/blog/20161211-1-14.png)\n\n\n    Xcode Schema File:  这里的 Laomoney_debug 就是我在 Xcode 项目中新建的 scheme。\n    Xcode Workspace File: 使用cocoaPods的项目包含有 workspace，这里设置对应路径，注意不需要带上 .xcworkspace 后缀。\n    XcodeProjectDirectory: Xcode 项目所在目录\n    Xcode Project File: Xcode 项目文件，这里需要带上 .xcodeproj 后缀。\n    Build output directory: 设置构建输出目录。\n\n\n\n![image](http://129.204.47.207/img/blog/20161211-1-15.png)\n\n\n以下是项目的文件夹目录\n\n![image](http://129.204.47.207/img/blog/20161211-1-16.png)\n\n\n\n### 7、常见错误  \n1、错误：rsync error: some files could not be transferred (code 23) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-47/rsync/main.c(992) [sender=2.6.9]\nCommand /bin/sh failed with exit code 23\n报如上错误时，貌似是一堆图片资源冲突。\n解决方法：\n将 ~/Library/Developer/Xcode/DerivedData/ 目录下的工程缓冲删除掉即可。\n\n\n\n\n","source":"_posts/自动化测试（Jenkins+GitHub+fir-cli自动打包发布）.md","raw":"---\ntitle: 自动化测试（Jenkins+GitHub+fir-cli自动打包发布）\ndate: 2017-02-19\ncategories: [自动化测试]\n---\n* \n{% codeblock lang:sh %}\n    目录：\n    1、安装Jenkins\n    2、进入Jenkins\n    3、下载安装firm.im插件\n    4、安装GitHub和Git插件\n    5、安装Xcode插件\n    6、创建并配置项目\n    7、常见错误\n{% endcodeblock %}\n\n终端启动Jenkins并启动Jenkins\ncd /Applications/Jenkins/\njava -jar jenkins.war --httpPort=7070\n\n### 1、安装Jenkins  \n方式一：官网下载 {% link Jenkins https://jenkins.io/ %}\n\n* 安装完后通过终端打开\n{% codeblock lang:sh %}\n    $ open /Users/ZZX/Desktop/Jenkins/jenkins.war\n{% endcodeblock %}\n\n方式二：通过命令行下载安装\n* 首先安装homebrew\n{% codeblock lang:sh %}\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n\n* 然后安装Jenkins\n{% codeblock lang:sh %}\n    $ brew install jenkins \n{% endcodeblock %}\n\n### 2、进入Jenkins  \n在浏览器里面输入 http://localhost:8080/\n当端口发送冲突时，在终端输入一下命令修改端口\n* \n{% codeblock lang:sh %}\n    $cd /Applications/Jenkins/\n    $ java -jar jenkins.war --httpPort=7070\n{% endcodeblock %}\n\n\n### 3、下载和安装fir.im的插件  \n* 下载 {% link 插件 http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi %}\n* 安装插件\n进入Jenkins点击左上方的系统管理然后进入插件管理\n![image](http://129.204.47.207/img/blog/20161211-1-1.png)\n\n然后点高级\n![image](http://129.204.47.207/img/blog/20161211-1-2.png)\n\n\n往下拖找到上传插件\n![image](http://129.204.47.207/img/blog/20161211-1-3.png)\n\n\n\n把下载好的文件传入，然后等待安装完成\n![image](http://129.204.47.207/img/blog/20161211-1-4.png)\n\n\n\n\n### 4、安装GitHub和Git插件  \n为了能够在GitHub分支更新后能够自动打包上传，这里需要安装两个git插件\n* GitHub Plugin\n* Git Plugin\n\n### 5、安装Xcode插件  \n* Xcode integration\n\n6、创建并配置项目  \n* 6.1、创建一个新的项目 \n\n* 6.2、项目基本信息  \n![image](http://129.204.47.207/img/blog/20161211-1-5.png)\n\n\n* 6.3、源码管理信息   \n![image](http://129.204.47.207/img/blog/20161211-1-6.png)\n\n\n* 6.4、构建触发器：  \n![image](http://129.204.47.207/img/blog/20161211-1-7.png)\n\n\n\n* 6.5、构建->添加构建步骤  \n![image](http://129.204.47.207/img/blog/20161211-1-8.png)\n\n\n* 6.6、构建->Xcode  \n![image](http://129.204.47.207/img/blog/20161211-1-9.png)\n\n\n* 6.7、构建->Xcode证书信息  \n我这里是git上的项目已经配置好了证书和provision profiles。\n1、勾选Unlock Keychain；\n2、Keychain path中输入 ￥{HOME}/Library/Keychains/login.keychain;\n3、Keychain password为你的钥匙串密码。\n![image](http://129.204.47.207/img/blog/20161211-1-10.png)\n\n\n\n* 6.8、构建后操作->Upload to fir.im  \n安装过fim.im插件以后，这里就可以看到Upload to fim.im选项了，fim.im的上传脚本可参考fir.im的相关文档进行操作，如果使用的是蒲公英或者其他第三方托管平台，这一步的操作是一样的，安装插件-添加构建后操作->添加上传脚本\n![image](http://129.204.47.207/img/blog/20161211-1-11.png)\n![image](http://129.204.47.207/img/blog/20161211-1-12.png)\n\n\n至此，所有的配置都已经完成，下面就可以进行构建操作了。\n\n最后一步：构建生成ipa文件，并上传fir.im\n回到刚刚创建的项目，进入项目页面，点击左边的“立即构建”按钮，即可开始构建。构建完成以后，可以在配置的ipa所在的路径查看是否生产ipa文件。登录fir.im查看是否已经上传到fim.im上。至此，本教程结束。\n![image](http://129.204.47.207/img/blog/20161211-1-13.png)\n\n\n\n\n------------------------------------------------------\n2016.06.27补充\n如果项目中使用了cocoapods管理第三方框架，那么构建->xcode设置时需要注意：\n\n1. 因为项目中使用 workspace， 所以 Target 可以不填。\n![image](http://129.204.47.207/img/blog/20161211-1-14.png)\n\n\n    Xcode Schema File:  这里的 Laomoney_debug 就是我在 Xcode 项目中新建的 scheme。\n    Xcode Workspace File: 使用cocoaPods的项目包含有 workspace，这里设置对应路径，注意不需要带上 .xcworkspace 后缀。\n    XcodeProjectDirectory: Xcode 项目所在目录\n    Xcode Project File: Xcode 项目文件，这里需要带上 .xcodeproj 后缀。\n    Build output directory: 设置构建输出目录。\n\n\n\n![image](http://129.204.47.207/img/blog/20161211-1-15.png)\n\n\n以下是项目的文件夹目录\n\n![image](http://129.204.47.207/img/blog/20161211-1-16.png)\n\n\n\n### 7、常见错误  \n1、错误：rsync error: some files could not be transferred (code 23) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-47/rsync/main.c(992) [sender=2.6.9]\nCommand /bin/sh failed with exit code 23\n报如上错误时，貌似是一堆图片资源冲突。\n解决方法：\n将 ~/Library/Developer/Xcode/DerivedData/ 目录下的工程缓冲删除掉即可。\n\n\n\n\n","slug":"自动化测试（Jenkins+GitHub+fir-cli自动打包发布）","published":1,"updated":"2021-05-16T12:11:10.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1dg000gxn8nbwrac6oc","content":"<ul>\n<li><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录：</span><br><span class=\"line\">1、安装Jenkins</span><br><span class=\"line\">2、进入Jenkins</span><br><span class=\"line\">3、下载安装firm.im插件</span><br><span class=\"line\">4、安装GitHub和Git插件</span><br><span class=\"line\">5、安装Xcode插件</span><br><span class=\"line\">6、创建并配置项目</span><br><span class=\"line\">7、常见错误</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>终端启动Jenkins并启动Jenkins<br>cd /Applications/Jenkins/<br>java -jar jenkins.war –httpPort=7070</p>\n<h3 id=\"1、安装Jenkins\"><a href=\"#1、安装Jenkins\" class=\"headerlink\" title=\"1、安装Jenkins\"></a>1、安装Jenkins</h3><p>方式一：官网下载 <div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"https://jenkins.io/\" href=\"Jenkins\"><div class=\"left\"><span class=\"title fs14\">https://jenkins.io/</span><span class=\"url fs12\">Jenkins</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div></p>\n<ul>\n<li>安装完后通过终端打开<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open /Users/ZZX/Desktop/Jenkins/jenkins.war</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>方式二：通过命令行下载安装</p>\n<ul>\n<li><p>首先安装homebrew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby -e <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>然后安装Jenkins</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenkins </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2、进入Jenkins\"><a href=\"#2、进入Jenkins\" class=\"headerlink\" title=\"2、进入Jenkins\"></a>2、进入Jenkins</h3><p>在浏览器里面输入 <a href=\"http://localhost:8080/\">http://localhost:8080/</a><br>当端口发送冲突时，在终端输入一下命令修改端口</p>\n<ul>\n<li><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span> /Applications/Jenkins/</span><br><span class=\"line\">$ java -jar jenkins.war --httpPort=7070</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3、下载和安装fir-im的插件\"><a href=\"#3、下载和安装fir-im的插件\" class=\"headerlink\" title=\"3、下载和安装fir.im的插件\"></a>3、下载和安装fir.im的插件</h3><ul>\n<li>下载 <div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi\" href=\"插件\"><div class=\"left\"><span class=\"title fs14\">http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi</span><span class=\"url fs12\">插件</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div></li>\n<li>安装插件<br>进入Jenkins点击左上方的系统管理然后进入插件管理<br><img src=\"http://129.204.47.207/img/blog/20161211-1-1.png\" alt=\"image\"></li>\n</ul>\n<p>然后点高级<br><img src=\"http://129.204.47.207/img/blog/20161211-1-2.png\" alt=\"image\"></p>\n<p>往下拖找到上传插件<br><img src=\"http://129.204.47.207/img/blog/20161211-1-3.png\" alt=\"image\"></p>\n<p>把下载好的文件传入，然后等待安装完成<br><img src=\"http://129.204.47.207/img/blog/20161211-1-4.png\" alt=\"image\"></p>\n<h3 id=\"4、安装GitHub和Git插件\"><a href=\"#4、安装GitHub和Git插件\" class=\"headerlink\" title=\"4、安装GitHub和Git插件\"></a>4、安装GitHub和Git插件</h3><p>为了能够在GitHub分支更新后能够自动打包上传，这里需要安装两个git插件</p>\n<ul>\n<li>GitHub Plugin</li>\n<li>Git Plugin</li>\n</ul>\n<h3 id=\"5、安装Xcode插件\"><a href=\"#5、安装Xcode插件\" class=\"headerlink\" title=\"5、安装Xcode插件\"></a>5、安装Xcode插件</h3><ul>\n<li>Xcode integration</li>\n</ul>\n<p>6、创建并配置项目  </p>\n<ul>\n<li><p>6.1、创建一个新的项目 </p>\n</li>\n<li><p>6.2、项目基本信息<br><img src=\"http://129.204.47.207/img/blog/20161211-1-5.png\" alt=\"image\"></p>\n</li>\n</ul>\n<ul>\n<li>6.3、源码管理信息<br><img src=\"http://129.204.47.207/img/blog/20161211-1-6.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.4、构建触发器：<br><img src=\"http://129.204.47.207/img/blog/20161211-1-7.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.5、构建-&gt;添加构建步骤<br><img src=\"http://129.204.47.207/img/blog/20161211-1-8.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.6、构建-&gt;Xcode<br><img src=\"http://129.204.47.207/img/blog/20161211-1-9.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.7、构建-&gt;Xcode证书信息<br>我这里是git上的项目已经配置好了证书和provision profiles。<br>1、勾选Unlock Keychain；<br>2、Keychain path中输入 ￥{HOME}/Library/Keychains/login.keychain;<br>3、Keychain password为你的钥匙串密码。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-10.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.8、构建后操作-&gt;Upload to fir.im<br>安装过fim.im插件以后，这里就可以看到Upload to fim.im选项了，fim.im的上传脚本可参考fir.im的相关文档进行操作，如果使用的是蒲公英或者其他第三方托管平台，这一步的操作是一样的，安装插件-添加构建后操作-&gt;添加上传脚本<br><img src=\"http://129.204.47.207/img/blog/20161211-1-11.png\" alt=\"image\"><br><img src=\"http://129.204.47.207/img/blog/20161211-1-12.png\" alt=\"image\"></li>\n</ul>\n<p>至此，所有的配置都已经完成，下面就可以进行构建操作了。</p>\n<p>最后一步：构建生成ipa文件，并上传fir.im<br>回到刚刚创建的项目，进入项目页面，点击左边的“立即构建”按钮，即可开始构建。构建完成以后，可以在配置的ipa所在的路径查看是否生产ipa文件。登录fir.im查看是否已经上传到fim.im上。至此，本教程结束。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-13.png\" alt=\"image\"></p>\n<hr>\n<p>2016.06.27补充<br>如果项目中使用了cocoapods管理第三方框架，那么构建-&gt;xcode设置时需要注意：</p>\n<ol>\n<li>因为项目中使用 workspace， 所以 Target 可以不填。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-14.png\" alt=\"image\"></li>\n</ol>\n<pre><code>Xcode Schema File:  这里的 Laomoney_debug 就是我在 Xcode 项目中新建的 scheme。\nXcode Workspace File: 使用cocoaPods的项目包含有 workspace，这里设置对应路径，注意不需要带上 .xcworkspace 后缀。\nXcodeProjectDirectory: Xcode 项目所在目录\nXcode Project File: Xcode 项目文件，这里需要带上 .xcodeproj 后缀。\nBuild output directory: 设置构建输出目录。\n</code></pre>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-1-15.png\" alt=\"image\"></p>\n<p>以下是项目的文件夹目录</p>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-1-16.png\" alt=\"image\"></p>\n<h3 id=\"7、常见错误\"><a href=\"#7、常见错误\" class=\"headerlink\" title=\"7、常见错误\"></a>7、常见错误</h3><p>1、错误：rsync error: some files could not be transferred (code 23) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-47/rsync/main.c(992) [sender=2.6.9]<br>Command /bin/sh failed with exit code 23<br>报如上错误时，貌似是一堆图片资源冲突。<br>解决方法：<br>将 ~/Library/Developer/Xcode/DerivedData/ 目录下的工程缓冲删除掉即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录：</span><br><span class=\"line\">1、安装Jenkins</span><br><span class=\"line\">2、进入Jenkins</span><br><span class=\"line\">3、下载安装firm.im插件</span><br><span class=\"line\">4、安装GitHub和Git插件</span><br><span class=\"line\">5、安装Xcode插件</span><br><span class=\"line\">6、创建并配置项目</span><br><span class=\"line\">7、常见错误</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>终端启动Jenkins并启动Jenkins<br>cd /Applications/Jenkins/<br>java -jar jenkins.war –httpPort=7070</p>\n<h3 id=\"1、安装Jenkins\"><a href=\"#1、安装Jenkins\" class=\"headerlink\" title=\"1、安装Jenkins\"></a>1、安装Jenkins</h3><p>方式一：官网下载 <div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"https://jenkins.io/\" href=\"Jenkins\"><div class=\"left\"><span class=\"title fs14\">https://jenkins.io/</span><span class=\"url fs12\">Jenkins</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div></p>\n<ul>\n<li>安装完后通过终端打开<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open /Users/ZZX/Desktop/Jenkins/jenkins.war</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>方式二：通过命令行下载安装</p>\n<ul>\n<li><p>首先安装homebrew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby -e <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>然后安装Jenkins</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenkins </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2、进入Jenkins\"><a href=\"#2、进入Jenkins\" class=\"headerlink\" title=\"2、进入Jenkins\"></a>2、进入Jenkins</h3><p>在浏览器里面输入 <a href=\"http://localhost:8080/\">http://localhost:8080/</a><br>当端口发送冲突时，在终端输入一下命令修改端口</p>\n<ul>\n<li><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cd</span> /Applications/Jenkins/</span><br><span class=\"line\">$ java -jar jenkins.war --httpPort=7070</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3、下载和安装fir-im的插件\"><a href=\"#3、下载和安装fir-im的插件\" class=\"headerlink\" title=\"3、下载和安装fir.im的插件\"></a>3、下载和安装fir.im的插件</h3><ul>\n<li>下载 <div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi\" href=\"插件\"><div class=\"left\"><span class=\"title fs14\">http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin(5).hpi</span><span class=\"url fs12\">插件</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div></li>\n<li>安装插件<br>进入Jenkins点击左上方的系统管理然后进入插件管理<br><img src=\"http://129.204.47.207/img/blog/20161211-1-1.png\" alt=\"image\"></li>\n</ul>\n<p>然后点高级<br><img src=\"http://129.204.47.207/img/blog/20161211-1-2.png\" alt=\"image\"></p>\n<p>往下拖找到上传插件<br><img src=\"http://129.204.47.207/img/blog/20161211-1-3.png\" alt=\"image\"></p>\n<p>把下载好的文件传入，然后等待安装完成<br><img src=\"http://129.204.47.207/img/blog/20161211-1-4.png\" alt=\"image\"></p>\n<h3 id=\"4、安装GitHub和Git插件\"><a href=\"#4、安装GitHub和Git插件\" class=\"headerlink\" title=\"4、安装GitHub和Git插件\"></a>4、安装GitHub和Git插件</h3><p>为了能够在GitHub分支更新后能够自动打包上传，这里需要安装两个git插件</p>\n<ul>\n<li>GitHub Plugin</li>\n<li>Git Plugin</li>\n</ul>\n<h3 id=\"5、安装Xcode插件\"><a href=\"#5、安装Xcode插件\" class=\"headerlink\" title=\"5、安装Xcode插件\"></a>5、安装Xcode插件</h3><ul>\n<li>Xcode integration</li>\n</ul>\n<p>6、创建并配置项目  </p>\n<ul>\n<li><p>6.1、创建一个新的项目 </p>\n</li>\n<li><p>6.2、项目基本信息<br><img src=\"http://129.204.47.207/img/blog/20161211-1-5.png\" alt=\"image\"></p>\n</li>\n</ul>\n<ul>\n<li>6.3、源码管理信息<br><img src=\"http://129.204.47.207/img/blog/20161211-1-6.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.4、构建触发器：<br><img src=\"http://129.204.47.207/img/blog/20161211-1-7.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.5、构建-&gt;添加构建步骤<br><img src=\"http://129.204.47.207/img/blog/20161211-1-8.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.6、构建-&gt;Xcode<br><img src=\"http://129.204.47.207/img/blog/20161211-1-9.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.7、构建-&gt;Xcode证书信息<br>我这里是git上的项目已经配置好了证书和provision profiles。<br>1、勾选Unlock Keychain；<br>2、Keychain path中输入 ￥{HOME}/Library/Keychains/login.keychain;<br>3、Keychain password为你的钥匙串密码。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-10.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>6.8、构建后操作-&gt;Upload to fir.im<br>安装过fim.im插件以后，这里就可以看到Upload to fim.im选项了，fim.im的上传脚本可参考fir.im的相关文档进行操作，如果使用的是蒲公英或者其他第三方托管平台，这一步的操作是一样的，安装插件-添加构建后操作-&gt;添加上传脚本<br><img src=\"http://129.204.47.207/img/blog/20161211-1-11.png\" alt=\"image\"><br><img src=\"http://129.204.47.207/img/blog/20161211-1-12.png\" alt=\"image\"></li>\n</ul>\n<p>至此，所有的配置都已经完成，下面就可以进行构建操作了。</p>\n<p>最后一步：构建生成ipa文件，并上传fir.im<br>回到刚刚创建的项目，进入项目页面，点击左边的“立即构建”按钮，即可开始构建。构建完成以后，可以在配置的ipa所在的路径查看是否生产ipa文件。登录fir.im查看是否已经上传到fim.im上。至此，本教程结束。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-13.png\" alt=\"image\"></p>\n<hr>\n<p>2016.06.27补充<br>如果项目中使用了cocoapods管理第三方框架，那么构建-&gt;xcode设置时需要注意：</p>\n<ol>\n<li>因为项目中使用 workspace， 所以 Target 可以不填。<br><img src=\"http://129.204.47.207/img/blog/20161211-1-14.png\" alt=\"image\"></li>\n</ol>\n<pre><code>Xcode Schema File:  这里的 Laomoney_debug 就是我在 Xcode 项目中新建的 scheme。\nXcode Workspace File: 使用cocoaPods的项目包含有 workspace，这里设置对应路径，注意不需要带上 .xcworkspace 后缀。\nXcodeProjectDirectory: Xcode 项目所在目录\nXcode Project File: Xcode 项目文件，这里需要带上 .xcodeproj 后缀。\nBuild output directory: 设置构建输出目录。\n</code></pre>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-1-15.png\" alt=\"image\"></p>\n<p>以下是项目的文件夹目录</p>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-1-16.png\" alt=\"image\"></p>\n<h3 id=\"7、常见错误\"><a href=\"#7、常见错误\" class=\"headerlink\" title=\"7、常见错误\"></a>7、常见错误</h3><p>1、错误：rsync error: some files could not be transferred (code 23) at /BuildRoot/Library/Caches/com.apple.xbs/Sources/rsync/rsync-47/rsync/main.c(992) [sender=2.6.9]<br>Command /bin/sh failed with exit code 23<br>报如上错误时，貌似是一堆图片资源冲突。<br>解决方法：<br>将 ~/Library/Developer/Xcode/DerivedData/ 目录下的工程缓冲删除掉即可。</p>\n"},{"title":"自动化测试（Test Flight）","date":"2017-03-01T16:00:00.000Z","_content":"\n应用的beta版测试一直让iOS开发者非常头疼，所以苹果在`WWDC 2014`上高调地宣布将`TestFlight`（官网：http://testflightapp.com/ )加入iOS 8，并在原先的基础上进行了更多完善和提升。\n\n以往为测试者的大致流程是：\n1、测试者把设备的`UDID`发给开发者；\n2、开发者登录苹果的`Developer Portal`；\n3、开发者将测试者的设备添加到`Devices`；\n4、开发者将新设备添加至适当的`Provisioning Profiles`中；\n5、开发者使用`Profile`更新应用；\n6、最后开发者将应用分发给测试者。\n当然了，`Xcode10`以后，以上步骤在`Xcode`中通过`Automatically manager signing`自动完成。\n这里还有个长期让开发者诟病的限制，那就是一个开发者账号只能添加 100 个设备。\n\n为了避开以上的限制，部分开发者也可能选择通过Ad Hoc发布的形式进行测试包的分发。\n\n传统测试分发的缺点：\n    1、测试包的分发步骤繁琐：\n    添加设备->打ipa包->上传ipa包->生成二维码以供下载\n    通过Ad Hoc分发步骤：打ipa包->上传ipa包->生成二维码以供下载\n    最后：设备连接开发机，通过Xcode一个一个打包，这个有点烦了。\n    有人说搭建持续化集成环境，实现一键打包。这个也是个解决办法，有兴趣的朋友可以参考`自动化测试（Jenkins+GitHub+fir-cli自动打包发布）`一文，这里我们不做讨论。\n\n2、ipa包的托管问题突出：\n    将ipa包托管到第三方，不安全；\n    将ipa包放在自己的服务器上，又需要后台另外开发一套这样的服务，开发成本高；\n3、成本问题：\n    通过Ad Hoc分发的需要额外申请$299的企业级账号，不便宜呢。\n4、由于开发者的疏忽，可能将测试包当成生产包提交到AppStore，这个就严重了。\n\nTestFlight介绍\n苹果在`WWDC 2014`上高调地宣布将iOS开发人员可通过`TestFlight`进行测试，并将其整合到了`iTunes Connect`中。`TestFlight`随`iOS8`一起发布，因此开发者没法在旧的iOS版本或者`Android`版本上使用 `TestFlight`。`TestFlight`将可以让用户浏览程序描述以及测试备注。测试备注将会让开发者知道哪里需要提高、哪里需要改进。同时测试者也可以通过 TestFlight 软件向开发者发邮件提供他们的反馈。`TestFlight`同时还提供崩溃日志的查看，当设备上的软件崩溃时，会产生一条错误日志。\n\n`TestFlight`的测试方式分为两种，一种是内部测试，一种是外部测试。\n    外部测试人员的上限是`2000`人，发布测试包之前，需要先通过苹果的审核，一般审核会在一天左右。\n    内部测试最多可以邀请`25`个内部成员，App上传到`iTunes Connect`上之后内部成员就可以开始进行内部测试了，无需审核。\n    当应用程序的新版本被上传或者通过审核后，它将有`30天`的有效期。如果30天之后开发者没有发布新的版本，测试者将无法运行设备上的测试版应用程序，直到开发者发布新版本，测试者才可以再度运行程序。除了要上传二进制数据外，开发者还必须提交程序的元数据，包括应用程序的描述以及测试者需要测试的信息。\n    注：我们公司目前有 10 个测试设备，所有的设备使用同一个Apple ID登录，进行`TestFlight`内部测试。\n\n内部测试\n1.添加测试者的Apple ID，如果该Apple ID未开通iTunes Connect，则向该测试者发送开通iTunes Connect邮件；\n2.测试者登录并激活iTunes Connect；\n3.开发中添加内侧账户，发送邮件邀请测试者；\n4.测试者接受邀请；\n5.测试者通过TestFlight应用程序安装app。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/自动化测试（Test Flight）.md","raw":"---\ntitle: 自动化测试（Test Flight）\ndate: 2017-03-02\ncategories: [自动化测试]\n---\n\n应用的beta版测试一直让iOS开发者非常头疼，所以苹果在`WWDC 2014`上高调地宣布将`TestFlight`（官网：http://testflightapp.com/ )加入iOS 8，并在原先的基础上进行了更多完善和提升。\n\n以往为测试者的大致流程是：\n1、测试者把设备的`UDID`发给开发者；\n2、开发者登录苹果的`Developer Portal`；\n3、开发者将测试者的设备添加到`Devices`；\n4、开发者将新设备添加至适当的`Provisioning Profiles`中；\n5、开发者使用`Profile`更新应用；\n6、最后开发者将应用分发给测试者。\n当然了，`Xcode10`以后，以上步骤在`Xcode`中通过`Automatically manager signing`自动完成。\n这里还有个长期让开发者诟病的限制，那就是一个开发者账号只能添加 100 个设备。\n\n为了避开以上的限制，部分开发者也可能选择通过Ad Hoc发布的形式进行测试包的分发。\n\n传统测试分发的缺点：\n    1、测试包的分发步骤繁琐：\n    添加设备->打ipa包->上传ipa包->生成二维码以供下载\n    通过Ad Hoc分发步骤：打ipa包->上传ipa包->生成二维码以供下载\n    最后：设备连接开发机，通过Xcode一个一个打包，这个有点烦了。\n    有人说搭建持续化集成环境，实现一键打包。这个也是个解决办法，有兴趣的朋友可以参考`自动化测试（Jenkins+GitHub+fir-cli自动打包发布）`一文，这里我们不做讨论。\n\n2、ipa包的托管问题突出：\n    将ipa包托管到第三方，不安全；\n    将ipa包放在自己的服务器上，又需要后台另外开发一套这样的服务，开发成本高；\n3、成本问题：\n    通过Ad Hoc分发的需要额外申请$299的企业级账号，不便宜呢。\n4、由于开发者的疏忽，可能将测试包当成生产包提交到AppStore，这个就严重了。\n\nTestFlight介绍\n苹果在`WWDC 2014`上高调地宣布将iOS开发人员可通过`TestFlight`进行测试，并将其整合到了`iTunes Connect`中。`TestFlight`随`iOS8`一起发布，因此开发者没法在旧的iOS版本或者`Android`版本上使用 `TestFlight`。`TestFlight`将可以让用户浏览程序描述以及测试备注。测试备注将会让开发者知道哪里需要提高、哪里需要改进。同时测试者也可以通过 TestFlight 软件向开发者发邮件提供他们的反馈。`TestFlight`同时还提供崩溃日志的查看，当设备上的软件崩溃时，会产生一条错误日志。\n\n`TestFlight`的测试方式分为两种，一种是内部测试，一种是外部测试。\n    外部测试人员的上限是`2000`人，发布测试包之前，需要先通过苹果的审核，一般审核会在一天左右。\n    内部测试最多可以邀请`25`个内部成员，App上传到`iTunes Connect`上之后内部成员就可以开始进行内部测试了，无需审核。\n    当应用程序的新版本被上传或者通过审核后，它将有`30天`的有效期。如果30天之后开发者没有发布新的版本，测试者将无法运行设备上的测试版应用程序，直到开发者发布新版本，测试者才可以再度运行程序。除了要上传二进制数据外，开发者还必须提交程序的元数据，包括应用程序的描述以及测试者需要测试的信息。\n    注：我们公司目前有 10 个测试设备，所有的设备使用同一个Apple ID登录，进行`TestFlight`内部测试。\n\n内部测试\n1.添加测试者的Apple ID，如果该Apple ID未开通iTunes Connect，则向该测试者发送开通iTunes Connect邮件；\n2.测试者登录并激活iTunes Connect；\n3.开发中添加内侧账户，发送邮件邀请测试者；\n4.测试者接受邀请；\n5.测试者通过TestFlight应用程序安装app。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"自动化测试（Test Flight）","published":1,"updated":"2021-05-16T12:11:10.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1dh000hxn8n0gvx4z8s","content":"<p>应用的beta版测试一直让iOS开发者非常头疼，所以苹果在<code>WWDC 2014</code>上高调地宣布将<code>TestFlight</code>（官网：<a href=\"http://testflightapp.com/\">http://testflightapp.com/</a> )加入iOS 8，并在原先的基础上进行了更多完善和提升。</p>\n<p>以往为测试者的大致流程是：<br>1、测试者把设备的<code>UDID</code>发给开发者；<br>2、开发者登录苹果的<code>Developer Portal</code>；<br>3、开发者将测试者的设备添加到<code>Devices</code>；<br>4、开发者将新设备添加至适当的<code>Provisioning Profiles</code>中；<br>5、开发者使用<code>Profile</code>更新应用；<br>6、最后开发者将应用分发给测试者。<br>当然了，<code>Xcode10</code>以后，以上步骤在<code>Xcode</code>中通过<code>Automatically manager signing</code>自动完成。<br>这里还有个长期让开发者诟病的限制，那就是一个开发者账号只能添加 100 个设备。</p>\n<p>为了避开以上的限制，部分开发者也可能选择通过Ad Hoc发布的形式进行测试包的分发。</p>\n<p>传统测试分发的缺点：<br>    1、测试包的分发步骤繁琐：<br>    添加设备-&gt;打ipa包-&gt;上传ipa包-&gt;生成二维码以供下载<br>    通过Ad Hoc分发步骤：打ipa包-&gt;上传ipa包-&gt;生成二维码以供下载<br>    最后：设备连接开发机，通过Xcode一个一个打包，这个有点烦了。<br>    有人说搭建持续化集成环境，实现一键打包。这个也是个解决办法，有兴趣的朋友可以参考<code>自动化测试（Jenkins+GitHub+fir-cli自动打包发布）</code>一文，这里我们不做讨论。</p>\n<p>2、ipa包的托管问题突出：<br>    将ipa包托管到第三方，不安全；<br>    将ipa包放在自己的服务器上，又需要后台另外开发一套这样的服务，开发成本高；<br>3、成本问题：<br>    通过Ad Hoc分发的需要额外申请$299的企业级账号，不便宜呢。<br>4、由于开发者的疏忽，可能将测试包当成生产包提交到AppStore，这个就严重了。</p>\n<p>TestFlight介绍<br>苹果在<code>WWDC 2014</code>上高调地宣布将iOS开发人员可通过<code>TestFlight</code>进行测试，并将其整合到了<code>iTunes Connect</code>中。<code>TestFlight</code>随<code>iOS8</code>一起发布，因此开发者没法在旧的iOS版本或者<code>Android</code>版本上使用 <code>TestFlight</code>。<code>TestFlight</code>将可以让用户浏览程序描述以及测试备注。测试备注将会让开发者知道哪里需要提高、哪里需要改进。同时测试者也可以通过 TestFlight 软件向开发者发邮件提供他们的反馈。<code>TestFlight</code>同时还提供崩溃日志的查看，当设备上的软件崩溃时，会产生一条错误日志。</p>\n<p><code>TestFlight</code>的测试方式分为两种，一种是内部测试，一种是外部测试。<br>    外部测试人员的上限是<code>2000</code>人，发布测试包之前，需要先通过苹果的审核，一般审核会在一天左右。<br>    内部测试最多可以邀请<code>25</code>个内部成员，App上传到<code>iTunes Connect</code>上之后内部成员就可以开始进行内部测试了，无需审核。<br>    当应用程序的新版本被上传或者通过审核后，它将有<code>30天</code>的有效期。如果30天之后开发者没有发布新的版本，测试者将无法运行设备上的测试版应用程序，直到开发者发布新版本，测试者才可以再度运行程序。除了要上传二进制数据外，开发者还必须提交程序的元数据，包括应用程序的描述以及测试者需要测试的信息。<br>    注：我们公司目前有 10 个测试设备，所有的设备使用同一个Apple ID登录，进行<code>TestFlight</code>内部测试。</p>\n<p>内部测试<br>1.添加测试者的Apple ID，如果该Apple ID未开通iTunes Connect，则向该测试者发送开通iTunes Connect邮件；<br>2.测试者登录并激活iTunes Connect；<br>3.开发中添加内侧账户，发送邮件邀请测试者；<br>4.测试者接受邀请；<br>5.测试者通过TestFlight应用程序安装app。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>应用的beta版测试一直让iOS开发者非常头疼，所以苹果在<code>WWDC 2014</code>上高调地宣布将<code>TestFlight</code>（官网：<a href=\"http://testflightapp.com/\">http://testflightapp.com/</a> )加入iOS 8，并在原先的基础上进行了更多完善和提升。</p>\n<p>以往为测试者的大致流程是：<br>1、测试者把设备的<code>UDID</code>发给开发者；<br>2、开发者登录苹果的<code>Developer Portal</code>；<br>3、开发者将测试者的设备添加到<code>Devices</code>；<br>4、开发者将新设备添加至适当的<code>Provisioning Profiles</code>中；<br>5、开发者使用<code>Profile</code>更新应用；<br>6、最后开发者将应用分发给测试者。<br>当然了，<code>Xcode10</code>以后，以上步骤在<code>Xcode</code>中通过<code>Automatically manager signing</code>自动完成。<br>这里还有个长期让开发者诟病的限制，那就是一个开发者账号只能添加 100 个设备。</p>\n<p>为了避开以上的限制，部分开发者也可能选择通过Ad Hoc发布的形式进行测试包的分发。</p>\n<p>传统测试分发的缺点：<br>    1、测试包的分发步骤繁琐：<br>    添加设备-&gt;打ipa包-&gt;上传ipa包-&gt;生成二维码以供下载<br>    通过Ad Hoc分发步骤：打ipa包-&gt;上传ipa包-&gt;生成二维码以供下载<br>    最后：设备连接开发机，通过Xcode一个一个打包，这个有点烦了。<br>    有人说搭建持续化集成环境，实现一键打包。这个也是个解决办法，有兴趣的朋友可以参考<code>自动化测试（Jenkins+GitHub+fir-cli自动打包发布）</code>一文，这里我们不做讨论。</p>\n<p>2、ipa包的托管问题突出：<br>    将ipa包托管到第三方，不安全；<br>    将ipa包放在自己的服务器上，又需要后台另外开发一套这样的服务，开发成本高；<br>3、成本问题：<br>    通过Ad Hoc分发的需要额外申请$299的企业级账号，不便宜呢。<br>4、由于开发者的疏忽，可能将测试包当成生产包提交到AppStore，这个就严重了。</p>\n<p>TestFlight介绍<br>苹果在<code>WWDC 2014</code>上高调地宣布将iOS开发人员可通过<code>TestFlight</code>进行测试，并将其整合到了<code>iTunes Connect</code>中。<code>TestFlight</code>随<code>iOS8</code>一起发布，因此开发者没法在旧的iOS版本或者<code>Android</code>版本上使用 <code>TestFlight</code>。<code>TestFlight</code>将可以让用户浏览程序描述以及测试备注。测试备注将会让开发者知道哪里需要提高、哪里需要改进。同时测试者也可以通过 TestFlight 软件向开发者发邮件提供他们的反馈。<code>TestFlight</code>同时还提供崩溃日志的查看，当设备上的软件崩溃时，会产生一条错误日志。</p>\n<p><code>TestFlight</code>的测试方式分为两种，一种是内部测试，一种是外部测试。<br>    外部测试人员的上限是<code>2000</code>人，发布测试包之前，需要先通过苹果的审核，一般审核会在一天左右。<br>    内部测试最多可以邀请<code>25</code>个内部成员，App上传到<code>iTunes Connect</code>上之后内部成员就可以开始进行内部测试了，无需审核。<br>    当应用程序的新版本被上传或者通过审核后，它将有<code>30天</code>的有效期。如果30天之后开发者没有发布新的版本，测试者将无法运行设备上的测试版应用程序，直到开发者发布新版本，测试者才可以再度运行程序。除了要上传二进制数据外，开发者还必须提交程序的元数据，包括应用程序的描述以及测试者需要测试的信息。<br>    注：我们公司目前有 10 个测试设备，所有的设备使用同一个Apple ID登录，进行<code>TestFlight</code>内部测试。</p>\n<p>内部测试<br>1.添加测试者的Apple ID，如果该Apple ID未开通iTunes Connect，则向该测试者发送开通iTunes Connect邮件；<br>2.测试者登录并激活iTunes Connect；<br>3.开发中添加内侧账户，发送邮件邀请测试者；<br>4.测试者接受邀请；<br>5.测试者通过TestFlight应用程序安装app。</p>\n"},{"title":"自动化测试（Xcode一键打包发布）","date":"2017-02-25T16:00:00.000Z","_content":"\n在研究自动化打包的过程中，我们发现使用Mac系统提供的Automator可以进一步为一键打包提供便利，提高开发效率，效果如图。\n![image](http://129.204.47.207/img/blog/20161211-2-1.png)\n\n### Automator\nAutomator是苹果公司为他们的Mac OS X系统开发的一款软件。只要通过点击拖拽鼠标等操作就可以将一系列动作组合成一个工作流，从而帮助你自动的（可重复的）完成一些复杂的工作。 Automator还能横跨很多不同种类的程序，包括： 查找器、Safari网络浏览器、iCal、地址簿或者其他的一些程序。 它还能和一些第三方的程序一起工作，如微软的Office、Adobe公司的Photoshop或者Pixelmator等。\n这里我们将使用Automator为xcode定制一个很简单【服务】，来实现一键打包功能。 \n\n* 打开Automator\n* 新建一个service \n![image](http://129.204.47.207/img/blog/20161211-2-2.png)\n\n* 修改服务需要的输入、选取需要服务的应用 \n![image](http://129.204.47.207/img/blog/20161211-2-3.png)\n\n* 加入流程一 \nAutomator应用界面左侧，打开资料库面板，点击【变量】，在搜索框中输入“path”，选择目标路径变量，拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-4.png)\n\n* 拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-5.png)\n\n* 选取项目工程根路径 \n在 Automator 应用界面的下方，双击刚才【Destination Path】，在弹出面板中选择工程路径，选择后点击【完成】 \n![image](http://129.204.47.207/img/blog/20161211-2-6.png)\n\n* 加入流程二 \nautomator应用界面左侧，打开资料库面板，点击【操作】，在搜索框中输入“applescript”，选择运行AppleScript，拖拽到中间区域步骤1的下方 \n![image](http://129.204.47.207/img/blog/20161211-2-7.png)\n\n* 拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-8.png)\n\n* 编辑 Applescript \n在代码框中输入以下内容 \n\n{% codeblock lang:sh %}\n    on run {input, parameters}\n\n        tell application \"Terminal\"\n            activate\n            do script \"cd \" & input & \" && . BuildScript/xcode-archive-release.sh\"\n        end tell\n\n        return input\n    end run\n{% endcodeblock %}\n\n\n脚本文件 xcode-archive-release.sh 我放到了工程目录的 BuildScript 文件夹里面，脚本打包请参见{% link 自动化测试（脚本打包） https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/ %}\n这段 Applescript 脚本做的事就是 打开 Terminal，cd 到工程目录，运行BuildScript文件夹里面的脚本文件。\n\n* 最终看起来是这个样子的 \n![image](http://129.204.47.207/img/blog/20161211-2-9.png)\n\n*\n最后，保存文件，输入文件名字就可以了。打开xcode，看看是否有了新的 service 选项。\n服务所在文件：/Users/zhengda/Library/Services文件下，欲修改或者删除相关服务，可以前往该文件夹，找到对应的服务进行对应的操作即可。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/自动化测试（Xcode一键打包发布）.md","raw":"---\ntitle: 自动化测试（Xcode一键打包发布）\ndate: 2017-02-26\ncategories: [自动化测试]\n---\n\n在研究自动化打包的过程中，我们发现使用Mac系统提供的Automator可以进一步为一键打包提供便利，提高开发效率，效果如图。\n![image](http://129.204.47.207/img/blog/20161211-2-1.png)\n\n### Automator\nAutomator是苹果公司为他们的Mac OS X系统开发的一款软件。只要通过点击拖拽鼠标等操作就可以将一系列动作组合成一个工作流，从而帮助你自动的（可重复的）完成一些复杂的工作。 Automator还能横跨很多不同种类的程序，包括： 查找器、Safari网络浏览器、iCal、地址簿或者其他的一些程序。 它还能和一些第三方的程序一起工作，如微软的Office、Adobe公司的Photoshop或者Pixelmator等。\n这里我们将使用Automator为xcode定制一个很简单【服务】，来实现一键打包功能。 \n\n* 打开Automator\n* 新建一个service \n![image](http://129.204.47.207/img/blog/20161211-2-2.png)\n\n* 修改服务需要的输入、选取需要服务的应用 \n![image](http://129.204.47.207/img/blog/20161211-2-3.png)\n\n* 加入流程一 \nAutomator应用界面左侧，打开资料库面板，点击【变量】，在搜索框中输入“path”，选择目标路径变量，拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-4.png)\n\n* 拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-5.png)\n\n* 选取项目工程根路径 \n在 Automator 应用界面的下方，双击刚才【Destination Path】，在弹出面板中选择工程路径，选择后点击【完成】 \n![image](http://129.204.47.207/img/blog/20161211-2-6.png)\n\n* 加入流程二 \nautomator应用界面左侧，打开资料库面板，点击【操作】，在搜索框中输入“applescript”，选择运行AppleScript，拖拽到中间区域步骤1的下方 \n![image](http://129.204.47.207/img/blog/20161211-2-7.png)\n\n* 拖拽到中间区域 \n![image](http://129.204.47.207/img/blog/20161211-2-8.png)\n\n* 编辑 Applescript \n在代码框中输入以下内容 \n\n{% codeblock lang:sh %}\n    on run {input, parameters}\n\n        tell application \"Terminal\"\n            activate\n            do script \"cd \" & input & \" && . BuildScript/xcode-archive-release.sh\"\n        end tell\n\n        return input\n    end run\n{% endcodeblock %}\n\n\n脚本文件 xcode-archive-release.sh 我放到了工程目录的 BuildScript 文件夹里面，脚本打包请参见{% link 自动化测试（脚本打包） https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/ %}\n这段 Applescript 脚本做的事就是 打开 Terminal，cd 到工程目录，运行BuildScript文件夹里面的脚本文件。\n\n* 最终看起来是这个样子的 \n![image](http://129.204.47.207/img/blog/20161211-2-9.png)\n\n*\n最后，保存文件，输入文件名字就可以了。打开xcode，看看是否有了新的 service 选项。\n服务所在文件：/Users/zhengda/Library/Services文件下，欲修改或者删除相关服务，可以前往该文件夹，找到对应的服务进行对应的操作即可。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"自动化测试（Xcode一键打包发布）","published":1,"updated":"2021-05-16T12:11:10.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1di000kxn8nb92j0rq1","content":"<p>在研究自动化打包的过程中，我们发现使用Mac系统提供的Automator可以进一步为一键打包提供便利，提高开发效率，效果如图。<br><img src=\"http://129.204.47.207/img/blog/20161211-2-1.png\" alt=\"image\"></p>\n<h3 id=\"Automator\"><a href=\"#Automator\" class=\"headerlink\" title=\"Automator\"></a>Automator</h3><p>Automator是苹果公司为他们的Mac OS X系统开发的一款软件。只要通过点击拖拽鼠标等操作就可以将一系列动作组合成一个工作流，从而帮助你自动的（可重复的）完成一些复杂的工作。 Automator还能横跨很多不同种类的程序，包括： 查找器、Safari网络浏览器、iCal、地址簿或者其他的一些程序。 它还能和一些第三方的程序一起工作，如微软的Office、Adobe公司的Photoshop或者Pixelmator等。<br>这里我们将使用Automator为xcode定制一个很简单【服务】，来实现一键打包功能。 </p>\n<ul>\n<li><p>打开Automator</p>\n</li>\n<li><p>新建一个service<br><img src=\"http://129.204.47.207/img/blog/20161211-2-2.png\" alt=\"image\"></p>\n</li>\n<li><p>修改服务需要的输入、选取需要服务的应用<br><img src=\"http://129.204.47.207/img/blog/20161211-2-3.png\" alt=\"image\"></p>\n</li>\n<li><p>加入流程一<br>Automator应用界面左侧，打开资料库面板，点击【变量】，在搜索框中输入“path”，选择目标路径变量，拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-4.png\" alt=\"image\"></p>\n</li>\n<li><p>拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-5.png\" alt=\"image\"></p>\n</li>\n<li><p>选取项目工程根路径<br>在 Automator 应用界面的下方，双击刚才【Destination Path】，在弹出面板中选择工程路径，选择后点击【完成】<br><img src=\"http://129.204.47.207/img/blog/20161211-2-6.png\" alt=\"image\"></p>\n</li>\n<li><p>加入流程二<br>automator应用界面左侧，打开资料库面板，点击【操作】，在搜索框中输入“applescript”，选择运行AppleScript，拖拽到中间区域步骤1的下方<br><img src=\"http://129.204.47.207/img/blog/20161211-2-7.png\" alt=\"image\"></p>\n</li>\n<li><p>拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-8.png\" alt=\"image\"></p>\n</li>\n<li><p>编辑 Applescript<br>在代码框中输入以下内容 </p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on run &#123;input, parameters&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tell application <span class=\"string\">&quot;Terminal&quot;</span></span><br><span class=\"line\">        activate</span><br><span class=\"line\">        <span class=\"keyword\">do</span> script <span class=\"string\">&quot;cd &quot;</span> &amp; input &amp; <span class=\"string\">&quot; &amp;&amp; . BuildScript/xcode-archive-release.sh&quot;</span></span><br><span class=\"line\">    end tell</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> input</span><br><span class=\"line\">end run</span><br></pre></td></tr></table></figure>\n\n\n<p>脚本文件 xcode-archive-release.sh 我放到了工程目录的 BuildScript 文件夹里面，脚本打包请参见<div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/\" href=\"自动化测试（脚本打包）\"><div class=\"left\"><span class=\"title fs14\">https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/</span><span class=\"url fs12\">自动化测试（脚本打包）</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div><br>这段 Applescript 脚本做的事就是 打开 Terminal，cd 到工程目录，运行BuildScript文件夹里面的脚本文件。</p>\n<ul>\n<li>最终看起来是这个样子的<br><img src=\"http://129.204.47.207/img/blog/20161211-2-9.png\" alt=\"image\"></li>\n</ul>\n<p>*<br>最后，保存文件，输入文件名字就可以了。打开xcode，看看是否有了新的 service 选项。<br>服务所在文件：/Users/zhengda/Library/Services文件下，欲修改或者删除相关服务，可以前往该文件夹，找到对应的服务进行对应的操作即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在研究自动化打包的过程中，我们发现使用Mac系统提供的Automator可以进一步为一键打包提供便利，提高开发效率，效果如图。<br><img src=\"http://129.204.47.207/img/blog/20161211-2-1.png\" alt=\"image\"></p>\n<h3 id=\"Automator\"><a href=\"#Automator\" class=\"headerlink\" title=\"Automator\"></a>Automator</h3><p>Automator是苹果公司为他们的Mac OS X系统开发的一款软件。只要通过点击拖拽鼠标等操作就可以将一系列动作组合成一个工作流，从而帮助你自动的（可重复的）完成一些复杂的工作。 Automator还能横跨很多不同种类的程序，包括： 查找器、Safari网络浏览器、iCal、地址簿或者其他的一些程序。 它还能和一些第三方的程序一起工作，如微软的Office、Adobe公司的Photoshop或者Pixelmator等。<br>这里我们将使用Automator为xcode定制一个很简单【服务】，来实现一键打包功能。 </p>\n<ul>\n<li><p>打开Automator</p>\n</li>\n<li><p>新建一个service<br><img src=\"http://129.204.47.207/img/blog/20161211-2-2.png\" alt=\"image\"></p>\n</li>\n<li><p>修改服务需要的输入、选取需要服务的应用<br><img src=\"http://129.204.47.207/img/blog/20161211-2-3.png\" alt=\"image\"></p>\n</li>\n<li><p>加入流程一<br>Automator应用界面左侧，打开资料库面板，点击【变量】，在搜索框中输入“path”，选择目标路径变量，拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-4.png\" alt=\"image\"></p>\n</li>\n<li><p>拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-5.png\" alt=\"image\"></p>\n</li>\n<li><p>选取项目工程根路径<br>在 Automator 应用界面的下方，双击刚才【Destination Path】，在弹出面板中选择工程路径，选择后点击【完成】<br><img src=\"http://129.204.47.207/img/blog/20161211-2-6.png\" alt=\"image\"></p>\n</li>\n<li><p>加入流程二<br>automator应用界面左侧，打开资料库面板，点击【操作】，在搜索框中输入“applescript”，选择运行AppleScript，拖拽到中间区域步骤1的下方<br><img src=\"http://129.204.47.207/img/blog/20161211-2-7.png\" alt=\"image\"></p>\n</li>\n<li><p>拖拽到中间区域<br><img src=\"http://129.204.47.207/img/blog/20161211-2-8.png\" alt=\"image\"></p>\n</li>\n<li><p>编辑 Applescript<br>在代码框中输入以下内容 </p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on run &#123;input, parameters&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tell application <span class=\"string\">&quot;Terminal&quot;</span></span><br><span class=\"line\">        activate</span><br><span class=\"line\">        <span class=\"keyword\">do</span> script <span class=\"string\">&quot;cd &quot;</span> &amp; input &amp; <span class=\"string\">&quot; &amp;&amp; . BuildScript/xcode-archive-release.sh&quot;</span></span><br><span class=\"line\">    end tell</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> input</span><br><span class=\"line\">end run</span><br></pre></td></tr></table></figure>\n\n\n<p>脚本文件 xcode-archive-release.sh 我放到了工程目录的 BuildScript 文件夹里面，脚本打包请参见<div class=\"tag-plugin link dis-select\"><a class=\"link-card\" title=\"https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/\" href=\"自动化测试（脚本打包）\"><div class=\"left\"><span class=\"title fs14\">https://xudusheng.github.io/2016/12/09/自动化测试（脚本打包）/</span><span class=\"url fs12\">自动化测试（脚本打包）</span></div><div class=\"right\"><div class=\"lazy img\" data-bg=\"https://cdn.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg\"></div></div></a></div><br>这段 Applescript 脚本做的事就是 打开 Terminal，cd 到工程目录，运行BuildScript文件夹里面的脚本文件。</p>\n<ul>\n<li>最终看起来是这个样子的<br><img src=\"http://129.204.47.207/img/blog/20161211-2-9.png\" alt=\"image\"></li>\n</ul>\n<p>*<br>最后，保存文件，输入文件名字就可以了。打开xcode，看看是否有了新的 service 选项。<br>服务所在文件：/Users/zhengda/Library/Services文件下，欲修改或者删除相关服务，可以前往该文件夹，找到对应的服务进行对应的操作即可。</p>\n"},{"title":"自动化测试（脚本打包）","date":"2019-03-12T16:00:00.000Z","toc":true,"comments":1,"_content":"\n#自动化测试（脚本打包）\n\n\n{% codeblock %}\n目录\n1、使用xcodebuild打包\n2、使用altoool提交ipa到AppStore\n3、上传到第三方托管平台\n4、完整的打包脚本代码\n5、脚本的使用\n{% endcodeblock %}\n\n### 1、使用xcodebuild打包 \nxcodebuild是苹果发布自动构建的工具。它在一个Xcode项目下能构建一个或者多个targets ，也能在一个workspace或者Xcode项目上构建scheme，也是构成脚本打包的基础。因此有必要先了解一下xcodebuild的简单实用。在终端输入xcodebuild -help进行查看一些基本的命令。\n\n### xcodebuild 简单示例\n{% codeblock %}\n\n// build clean(对应Xcode的clean功能)\nxcodebuild clean -configuration \"$configuration\" -alltargets\n\n// archive\nxcodebuild archive \n-workspace \"$workspaceName\" \n-scheme \"$scheme\" \n-configuration \"$configuration\"\n-archivePath ${archivePath}/${archiveName}.xcarchive \nCODE_SIGN_IDENTITY=\"$codeSignIdentity\" \nPROVISIONING_PROFILE=\"$appStoreProvisioningProfile\"\n\n// 导出到ipa\nxcodebuild -exportArchive \n-archivePath ${archivePath}/${archiveName}.xcarchive \n-exportOptionsPlist \"$exportOptionsPlist\" \n-exportPath ${archivePath}/${archiveName}\n\n{% endcodeblock %}\n\n### 2、使用altoool提交ipa到AppStore \nApplication Loader altool \n\n`altool`的一般路径是\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"，脚本打包可以使用`Application Loader`上传包到iTunesConnect或者第三方托管平台\n\n### altool 简单示例\n{% codeblock %}\n//validate\n\"$altoolPath\" --validate-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n\n//upload\n\"$altoolPath\" --upload-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n{% endcodeblock %}\n\n上传的命令涉及三个参数 ipapath、appleid、password：\n\n* ipapath：ipa包的路径\n* appleid：开发者账号（邮箱） \n* password：开发者账号的密码\n\n\n### 3、上传到第三方托管平台\n目前，比较主流的第三方托管平台有 [蒲公英](https://www.pgyer.com) 和 [fir.im](https://fir.im)，当然，也可以托管到自己的服务器上。对于以上两个平台，这里不做过多的介绍，直接上代码。\n\n#### 3.1 上传到蒲公英\n通过蒲公英提供的上传应用 API，调用系统的 `curl` 命令来上传应用\n\n{% codeblock %}\ncurl -F \"file=@{$filePath}\"\n-F \"uKey={$uKey}\"\n-F \"_api_key={$apiKey}\"\nhttps://www.pgyer.com/apiv1/app/upload\n{% endcodeblock %}\n其中：\n\n* {$filePath}是应用安装包文件的路径\n* {$uKey}是开发者的用户 Key，在应用管理-API中查看\n* {$apiKey}是开发者的 API Key，在应用管理-API中查看\n\n\n#### 3.2 上传到fir.im（需安装fir-cli）\n\n`fir-cli` 使用 `Ruby` 构建, 无需编译, 只要安装相应 `gem` 即可.\n\n{% codeblock %}\ngem install fir-cli\n{% endcodeblock %}\n上传代码\n\n{% codeblock %}\nfir publish \"${ipaPath}\" -T \"$firApiToken\"\n{% endcodeblock %}\n其中：\n\n* {$ipaPath}是应用安装包文件的路径\n* {$firApiToken}是用户的 `API token`，在 `用户` -> `API token`中查看\n\n### 4、完整的打包脚本\n{% codeblock %}\n#!/bin/sh\n\n#Development\nWORKSPACE_NAME=\"BiXuan.xcworkspace\"\nSCHEME_NAME=\"BiXuan\"\nARCHIVE_FILE_NAME=\"BiXuan_debug\"\nCONFIGURATION=\"Debug\"\nBUILD_PATH=\"build_debug\"\n\n#clean\nrm -rf build\nrm -rf \"${BUILD_PATH}\"\nxcodebuild clean -configuration \"${CONFIGURATION}\" -alltargets\n\n\n#签名只需设置CODE_SIGN_IDENTITY即可，系统会根据CODE_SIGN_IDENTITY与工程中的bundle identifier自动匹配PROVISIONING_PROFILE\n#打包archive\nCODE_SIGN_IDENTITY=\"iPhone Developer: Ling Zhang (VT2F69BR6E)\"\n#PROVISIONING_PROFILE=\"b4693833-d4cb-4a6b-a877-3210769128a7\"\nXCARCHIVE_PATH=\"${BUILD_PATH}/${ARCHIVE_FILE_NAME}.xcarchive\"\n\nxcodebuild -workspace \"$WORKSPACE_NAME\" -scheme \"$SCHEME_NAME\" -configuration \"$CONFIGURATION\"  -archivePath \"$XCARCHIVE_PATH\" CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" archive\n\nEXPORT_OPTIONS_PLIST_PATH=\"BuildScript/Dev_ExportOptions.plist\"\nIPA_PATH=\"${BUILD_PATH}\"\nxcodebuild -exportArchive -archivePath \"$XCARCHIVE_PATH\" -exportPath \"$IPA_PATH\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST_PATH\"\nCODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" PROVISIONING_PROFILE=\"$PROVISIONING_PROFILE\"\n\n###################################\n#发布到iTunesConnect\n###################################\n#altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n##validate\n#\"$altoolPath\" --validate-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n##upload\n#\"$altoolPath\" --upload-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n\n###################################\n# 托管到 蒲公英\n###################################\n#apiKey=\"e0767c24c24e7099926fa460f86e9913\"\n#uKey=\"edc743045a1987e4edce2a2de4fee3c4\"\n#curl -F \"file=@${IPA_PATH}/${SCHEME_NAME}.ipa\" -F \"uKey={$uKey}\" -F \"_api_key={$apiKey}\" https://www.pgyer.com/apiv1/app/upload\n\n###################################\n#发布到fim.im\n###################################\n\n#firApiToken=\"a29be0d51c2bfb85b53d1f6cf67fb2e5\"\n#fir publish \"${IPA_PATH}/${SCHEME_NAME}.ipa\" -T \"$firApiToken\"\n#osascript -e 'display notification \"Release To Fir.im\" with title \"Upload Complete!\"'\n\n{% endcodeblock %}\n\n* archiveName：打包 archive 文件的名字（不用后缀） \n\n* workspaceName：工程文件的名字（需要后缀） \n\n* scheme：运行命令xcodebuild -list得到的Schemes，可能是一个列表，选一个你需要的  \n\n* codeSignIdentity：形如：`iPhone Distribution: xxxx Inc. (xxxxxxx)`  \n进入`Build Settings`, 编辑`Code Signing identity`成打release包需要的，再点击一下刚才选中的选项，弹出框中点击`Other`就可以获得形如`iPhone Distribution: xxxx Inc. (xxxxxxx)`的数据  \n\n* appStoreProvisioningProfile：形如：`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx`  \n获取方法与上面类似，最终获得形如`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx`的数据  \n\n* configuration值为：`Release`或`Debug`，或者其他自定义configuration值  \n运行命令`xcodebuild -list`得到的`Build Configurations`，有两个选项，打release包，所以值为Release  \n\n* exportOptionsPlist：存放`release_exportOptions.plist`文件的相对路径  \n如果BuildScript文件夹存放到项目根目录，其值为BuildScript/release_exportOptions.plist\n\n* xcarchivePath：打包生成xcarchive文件的存放路径  \naltool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}.xcarchive\n\n* ipaPath：导出ipa文件的路径  \naltool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}/${scheme}.ipa  \n\n* appleid：开发者账号（邮箱）  \n\n* applepassword：开发者账号的密码\n\n\n### 5、脚本的使用\n* 将脚本文件放到工程目录下，与 xxx.xcworkspace（xxx.xcodeproj） 同一级\n* 修改 xcode-archive-release.sh 里面的配置\n* 修改 release_exportOptions.plist 里面的参数，在终端输入xcodebuild -help进行查看\n* 打开终端，cd到工程所在目录，输入BuildScript/xcode-archive-release.sh，回车即可运行\n注意：脚本文件的存放路径可以根据需要自行修改，以上仅仅是为了方便测试。\n\n问题汇集：\n\n* 如果卡着不继续编译，则可能是未找到目标scheme。\n* 解决办法：打开xcode->manage schemes->将目标scheme的Shane选框勾上。\n\n* 如果打包时出现`ERROR ITMS-90530`的错误，如图\n* 解决办法：工程中包含.sh文件，删除.sh文件即可。\n          或者：编译时拔掉真机，否者编译会针对真机的系统架构进行编译 \n![image](http://129.204.47.207/img/blog/20161211-2-10.png)\n\n\n\n","source":"_posts/自动化测试（脚本打包）.md","raw":"---\ntitle: 自动化测试（脚本打包）\ndate: 2019-03-13\ncategories: [自动化测试]\ntoc: true\ncomments: true\n---\n\n#自动化测试（脚本打包）\n\n\n{% codeblock %}\n目录\n1、使用xcodebuild打包\n2、使用altoool提交ipa到AppStore\n3、上传到第三方托管平台\n4、完整的打包脚本代码\n5、脚本的使用\n{% endcodeblock %}\n\n### 1、使用xcodebuild打包 \nxcodebuild是苹果发布自动构建的工具。它在一个Xcode项目下能构建一个或者多个targets ，也能在一个workspace或者Xcode项目上构建scheme，也是构成脚本打包的基础。因此有必要先了解一下xcodebuild的简单实用。在终端输入xcodebuild -help进行查看一些基本的命令。\n\n### xcodebuild 简单示例\n{% codeblock %}\n\n// build clean(对应Xcode的clean功能)\nxcodebuild clean -configuration \"$configuration\" -alltargets\n\n// archive\nxcodebuild archive \n-workspace \"$workspaceName\" \n-scheme \"$scheme\" \n-configuration \"$configuration\"\n-archivePath ${archivePath}/${archiveName}.xcarchive \nCODE_SIGN_IDENTITY=\"$codeSignIdentity\" \nPROVISIONING_PROFILE=\"$appStoreProvisioningProfile\"\n\n// 导出到ipa\nxcodebuild -exportArchive \n-archivePath ${archivePath}/${archiveName}.xcarchive \n-exportOptionsPlist \"$exportOptionsPlist\" \n-exportPath ${archivePath}/${archiveName}\n\n{% endcodeblock %}\n\n### 2、使用altoool提交ipa到AppStore \nApplication Loader altool \n\n`altool`的一般路径是\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"，脚本打包可以使用`Application Loader`上传包到iTunesConnect或者第三方托管平台\n\n### altool 简单示例\n{% codeblock %}\n//validate\n\"$altoolPath\" --validate-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n\n//upload\n\"$altoolPath\" --upload-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n{% endcodeblock %}\n\n上传的命令涉及三个参数 ipapath、appleid、password：\n\n* ipapath：ipa包的路径\n* appleid：开发者账号（邮箱） \n* password：开发者账号的密码\n\n\n### 3、上传到第三方托管平台\n目前，比较主流的第三方托管平台有 [蒲公英](https://www.pgyer.com) 和 [fir.im](https://fir.im)，当然，也可以托管到自己的服务器上。对于以上两个平台，这里不做过多的介绍，直接上代码。\n\n#### 3.1 上传到蒲公英\n通过蒲公英提供的上传应用 API，调用系统的 `curl` 命令来上传应用\n\n{% codeblock %}\ncurl -F \"file=@{$filePath}\"\n-F \"uKey={$uKey}\"\n-F \"_api_key={$apiKey}\"\nhttps://www.pgyer.com/apiv1/app/upload\n{% endcodeblock %}\n其中：\n\n* {$filePath}是应用安装包文件的路径\n* {$uKey}是开发者的用户 Key，在应用管理-API中查看\n* {$apiKey}是开发者的 API Key，在应用管理-API中查看\n\n\n#### 3.2 上传到fir.im（需安装fir-cli）\n\n`fir-cli` 使用 `Ruby` 构建, 无需编译, 只要安装相应 `gem` 即可.\n\n{% codeblock %}\ngem install fir-cli\n{% endcodeblock %}\n上传代码\n\n{% codeblock %}\nfir publish \"${ipaPath}\" -T \"$firApiToken\"\n{% endcodeblock %}\n其中：\n\n* {$ipaPath}是应用安装包文件的路径\n* {$firApiToken}是用户的 `API token`，在 `用户` -> `API token`中查看\n\n### 4、完整的打包脚本\n{% codeblock %}\n#!/bin/sh\n\n#Development\nWORKSPACE_NAME=\"BiXuan.xcworkspace\"\nSCHEME_NAME=\"BiXuan\"\nARCHIVE_FILE_NAME=\"BiXuan_debug\"\nCONFIGURATION=\"Debug\"\nBUILD_PATH=\"build_debug\"\n\n#clean\nrm -rf build\nrm -rf \"${BUILD_PATH}\"\nxcodebuild clean -configuration \"${CONFIGURATION}\" -alltargets\n\n\n#签名只需设置CODE_SIGN_IDENTITY即可，系统会根据CODE_SIGN_IDENTITY与工程中的bundle identifier自动匹配PROVISIONING_PROFILE\n#打包archive\nCODE_SIGN_IDENTITY=\"iPhone Developer: Ling Zhang (VT2F69BR6E)\"\n#PROVISIONING_PROFILE=\"b4693833-d4cb-4a6b-a877-3210769128a7\"\nXCARCHIVE_PATH=\"${BUILD_PATH}/${ARCHIVE_FILE_NAME}.xcarchive\"\n\nxcodebuild -workspace \"$WORKSPACE_NAME\" -scheme \"$SCHEME_NAME\" -configuration \"$CONFIGURATION\"  -archivePath \"$XCARCHIVE_PATH\" CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" archive\n\nEXPORT_OPTIONS_PLIST_PATH=\"BuildScript/Dev_ExportOptions.plist\"\nIPA_PATH=\"${BUILD_PATH}\"\nxcodebuild -exportArchive -archivePath \"$XCARCHIVE_PATH\" -exportPath \"$IPA_PATH\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST_PATH\"\nCODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" PROVISIONING_PROFILE=\"$PROVISIONING_PROFILE\"\n\n###################################\n#发布到iTunesConnect\n###################################\n#altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n##validate\n#\"$altoolPath\" --validate-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n##upload\n#\"$altoolPath\" --upload-app -f \"$ipaPath\" -u \"$appleid\" -p \"$applepassword\" -t ios --output-format xml\n\n###################################\n# 托管到 蒲公英\n###################################\n#apiKey=\"e0767c24c24e7099926fa460f86e9913\"\n#uKey=\"edc743045a1987e4edce2a2de4fee3c4\"\n#curl -F \"file=@${IPA_PATH}/${SCHEME_NAME}.ipa\" -F \"uKey={$uKey}\" -F \"_api_key={$apiKey}\" https://www.pgyer.com/apiv1/app/upload\n\n###################################\n#发布到fim.im\n###################################\n\n#firApiToken=\"a29be0d51c2bfb85b53d1f6cf67fb2e5\"\n#fir publish \"${IPA_PATH}/${SCHEME_NAME}.ipa\" -T \"$firApiToken\"\n#osascript -e 'display notification \"Release To Fir.im\" with title \"Upload Complete!\"'\n\n{% endcodeblock %}\n\n* archiveName：打包 archive 文件的名字（不用后缀） \n\n* workspaceName：工程文件的名字（需要后缀） \n\n* scheme：运行命令xcodebuild -list得到的Schemes，可能是一个列表，选一个你需要的  \n\n* codeSignIdentity：形如：`iPhone Distribution: xxxx Inc. (xxxxxxx)`  \n进入`Build Settings`, 编辑`Code Signing identity`成打release包需要的，再点击一下刚才选中的选项，弹出框中点击`Other`就可以获得形如`iPhone Distribution: xxxx Inc. (xxxxxxx)`的数据  \n\n* appStoreProvisioningProfile：形如：`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx`  \n获取方法与上面类似，最终获得形如`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx`的数据  \n\n* configuration值为：`Release`或`Debug`，或者其他自定义configuration值  \n运行命令`xcodebuild -list`得到的`Build Configurations`，有两个选项，打release包，所以值为Release  \n\n* exportOptionsPlist：存放`release_exportOptions.plist`文件的相对路径  \n如果BuildScript文件夹存放到项目根目录，其值为BuildScript/release_exportOptions.plist\n\n* xcarchivePath：打包生成xcarchive文件的存放路径  \naltool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}.xcarchive\n\n* ipaPath：导出ipa文件的路径  \naltool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}/${scheme}.ipa  \n\n* appleid：开发者账号（邮箱）  \n\n* applepassword：开发者账号的密码\n\n\n### 5、脚本的使用\n* 将脚本文件放到工程目录下，与 xxx.xcworkspace（xxx.xcodeproj） 同一级\n* 修改 xcode-archive-release.sh 里面的配置\n* 修改 release_exportOptions.plist 里面的参数，在终端输入xcodebuild -help进行查看\n* 打开终端，cd到工程所在目录，输入BuildScript/xcode-archive-release.sh，回车即可运行\n注意：脚本文件的存放路径可以根据需要自行修改，以上仅仅是为了方便测试。\n\n问题汇集：\n\n* 如果卡着不继续编译，则可能是未找到目标scheme。\n* 解决办法：打开xcode->manage schemes->将目标scheme的Shane选框勾上。\n\n* 如果打包时出现`ERROR ITMS-90530`的错误，如图\n* 解决办法：工程中包含.sh文件，删除.sh文件即可。\n          或者：编译时拔掉真机，否者编译会针对真机的系统架构进行编译 \n![image](http://129.204.47.207/img/blog/20161211-2-10.png)\n\n\n\n","slug":"自动化测试（脚本打包）","published":1,"updated":"2021-05-16T12:11:10.324Z","layout":"post","photos":[],"link":"","_id":"ckor8h1dj000lxn8nbozf7sin","content":"<p>#自动化测试（脚本打包）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录</span><br><span class=\"line\">1、使用xcodebuild打包</span><br><span class=\"line\">2、使用altoool提交ipa到AppStore</span><br><span class=\"line\">3、上传到第三方托管平台</span><br><span class=\"line\">4、完整的打包脚本代码</span><br><span class=\"line\">5、脚本的使用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、使用xcodebuild打包\"><a href=\"#1、使用xcodebuild打包\" class=\"headerlink\" title=\"1、使用xcodebuild打包\"></a>1、使用xcodebuild打包</h3><p>xcodebuild是苹果发布自动构建的工具。它在一个Xcode项目下能构建一个或者多个targets ，也能在一个workspace或者Xcode项目上构建scheme，也是构成脚本打包的基础。因此有必要先了解一下xcodebuild的简单实用。在终端输入xcodebuild -help进行查看一些基本的命令。</p>\n<h3 id=\"xcodebuild-简单示例\"><a href=\"#xcodebuild-简单示例\" class=\"headerlink\" title=\"xcodebuild 简单示例\"></a>xcodebuild 简单示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// build clean(对应Xcode的clean功能)</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$configuration&quot; -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">// archive</span><br><span class=\"line\">xcodebuild archive </span><br><span class=\"line\">-workspace &quot;$workspaceName&quot; </span><br><span class=\"line\">-scheme &quot;$scheme&quot; </span><br><span class=\"line\">-configuration &quot;$configuration&quot;</span><br><span class=\"line\">-archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive </span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;$codeSignIdentity&quot; </span><br><span class=\"line\">PROVISIONING_PROFILE=&quot;$appStoreProvisioningProfile&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 导出到ipa</span><br><span class=\"line\">xcodebuild -exportArchive </span><br><span class=\"line\">-archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive </span><br><span class=\"line\">-exportOptionsPlist &quot;$exportOptionsPlist&quot; </span><br><span class=\"line\">-exportPath $&#123;archivePath&#125;/$&#123;archiveName&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用altoool提交ipa到AppStore\"><a href=\"#2、使用altoool提交ipa到AppStore\" class=\"headerlink\" title=\"2、使用altoool提交ipa到AppStore\"></a>2、使用altoool提交ipa到AppStore</h3><p>Application Loader altool </p>\n<p><code>altool</code>的一般路径是”/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool”，脚本打包可以使用<code>Application Loader</code>上传包到iTunesConnect或者第三方托管平台</p>\n<h3 id=\"altool-简单示例\"><a href=\"#altool-简单示例\" class=\"headerlink\" title=\"altool 简单示例\"></a>altool 简单示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//validate</span><br><span class=\"line\">&quot;$altoolPath&quot; --validate-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\"></span><br><span class=\"line\">//upload</span><br><span class=\"line\">&quot;$altoolPath&quot; --upload-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>上传的命令涉及三个参数 ipapath、appleid、password：</p>\n<ul>\n<li>ipapath：ipa包的路径</li>\n<li>appleid：开发者账号（邮箱） </li>\n<li>password：开发者账号的密码</li>\n</ul>\n<h3 id=\"3、上传到第三方托管平台\"><a href=\"#3、上传到第三方托管平台\" class=\"headerlink\" title=\"3、上传到第三方托管平台\"></a>3、上传到第三方托管平台</h3><p>目前，比较主流的第三方托管平台有 <a href=\"https://www.pgyer.com/\">蒲公英</a> 和 <a href=\"https://fir.im/\">fir.im</a>，当然，也可以托管到自己的服务器上。对于以上两个平台，这里不做过多的介绍，直接上代码。</p>\n<h4 id=\"3-1-上传到蒲公英\"><a href=\"#3-1-上传到蒲公英\" class=\"headerlink\" title=\"3.1 上传到蒲公英\"></a>3.1 上传到蒲公英</h4><p>通过蒲公英提供的上传应用 API，调用系统的 <code>curl</code> 命令来上传应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F &quot;file=@&#123;$filePath&#125;&quot;</span><br><span class=\"line\">-F &quot;uKey=&#123;$uKey&#125;&quot;</span><br><span class=\"line\">-F &quot;_api_key=&#123;$apiKey&#125;&quot;</span><br><span class=\"line\">https://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>{$filePath}是应用安装包文件的路径</li>\n<li>{$uKey}是开发者的用户 Key，在应用管理-API中查看</li>\n<li>{$apiKey}是开发者的 API Key，在应用管理-API中查看</li>\n</ul>\n<h4 id=\"3-2-上传到fir-im（需安装fir-cli）\"><a href=\"#3-2-上传到fir-im（需安装fir-cli）\" class=\"headerlink\" title=\"3.2 上传到fir.im（需安装fir-cli）\"></a>3.2 上传到fir.im（需安装fir-cli）</h4><p><code>fir-cli</code> 使用 <code>Ruby</code> 构建, 无需编译, 只要安装相应 <code>gem</code> 即可.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fir-cli</span><br></pre></td></tr></table></figure>\n<p>上传代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish &quot;$&#123;ipaPath&#125;&quot; -T &quot;$firApiToken&quot;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>{$ipaPath}是应用安装包文件的路径</li>\n<li>{$firApiToken}是用户的 <code>API token</code>，在 <code>用户</code> -&gt; <code>API token</code>中查看</li>\n</ul>\n<h3 id=\"4、完整的打包脚本\"><a href=\"#4、完整的打包脚本\" class=\"headerlink\" title=\"4、完整的打包脚本\"></a>4、完整的打包脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#Development</span><br><span class=\"line\">WORKSPACE_NAME=&quot;BiXuan.xcworkspace&quot;</span><br><span class=\"line\">SCHEME_NAME=&quot;BiXuan&quot;</span><br><span class=\"line\">ARCHIVE_FILE_NAME=&quot;BiXuan_debug&quot;</span><br><span class=\"line\">CONFIGURATION=&quot;Debug&quot;</span><br><span class=\"line\">BUILD_PATH=&quot;build_debug&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#clean</span><br><span class=\"line\">rm -rf build</span><br><span class=\"line\">rm -rf &quot;$&#123;BUILD_PATH&#125;&quot;</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#签名只需设置CODE_SIGN_IDENTITY即可，系统会根据CODE_SIGN_IDENTITY与工程中的bundle identifier自动匹配PROVISIONING_PROFILE</span><br><span class=\"line\">#打包archive</span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;iPhone Developer: Ling Zhang (VT2F69BR6E)&quot;</span><br><span class=\"line\">#PROVISIONING_PROFILE=&quot;b4693833-d4cb-4a6b-a877-3210769128a7&quot;</span><br><span class=\"line\">XCARCHIVE_PATH=&quot;$&#123;BUILD_PATH&#125;/$&#123;ARCHIVE_FILE_NAME&#125;.xcarchive&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -workspace &quot;$WORKSPACE_NAME&quot; -scheme &quot;$SCHEME_NAME&quot; -configuration &quot;$CONFIGURATION&quot;  -archivePath &quot;$XCARCHIVE_PATH&quot; CODE_SIGN_IDENTITY=&quot;$CODE_SIGN_IDENTITY&quot; archive</span><br><span class=\"line\"></span><br><span class=\"line\">EXPORT_OPTIONS_PLIST_PATH=&quot;BuildScript/Dev_ExportOptions.plist&quot;</span><br><span class=\"line\">IPA_PATH=&quot;$&#123;BUILD_PATH&#125;&quot;</span><br><span class=\"line\">xcodebuild -exportArchive -archivePath &quot;$XCARCHIVE_PATH&quot; -exportPath &quot;$IPA_PATH&quot; -exportOptionsPlist &quot;$EXPORT_OPTIONS_PLIST_PATH&quot;</span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;$CODE_SIGN_IDENTITY&quot; PROVISIONING_PROFILE=&quot;$PROVISIONING_PROFILE&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\">#发布到iTunesConnect</span><br><span class=\"line\">###################################</span><br><span class=\"line\">#altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\">##validate</span><br><span class=\"line\">#&quot;$altoolPath&quot; --validate-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\">##upload</span><br><span class=\"line\">#&quot;$altoolPath&quot; --upload-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\"># 托管到 蒲公英</span><br><span class=\"line\">###################################</span><br><span class=\"line\">#apiKey=&quot;e0767c24c24e7099926fa460f86e9913&quot;</span><br><span class=\"line\">#uKey=&quot;edc743045a1987e4edce2a2de4fee3c4&quot;</span><br><span class=\"line\">#curl -F &quot;file=@$&#123;IPA_PATH&#125;/$&#123;SCHEME_NAME&#125;.ipa&quot; -F &quot;uKey=&#123;$uKey&#125;&quot; -F &quot;_api_key=&#123;$apiKey&#125;&quot; https://www.pgyer.com/apiv1/app/upload</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\">#发布到fim.im</span><br><span class=\"line\">###################################</span><br><span class=\"line\"></span><br><span class=\"line\">#firApiToken=&quot;a29be0d51c2bfb85b53d1f6cf67fb2e5&quot;</span><br><span class=\"line\">#fir publish &quot;$&#123;IPA_PATH&#125;/$&#123;SCHEME_NAME&#125;.ipa&quot; -T &quot;$firApiToken&quot;</span><br><span class=\"line\">#osascript -e &#x27;display notification &quot;Release To Fir.im&quot; with title &quot;Upload Complete!&quot;&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>archiveName：打包 archive 文件的名字（不用后缀） </p>\n</li>\n<li><p>workspaceName：工程文件的名字（需要后缀） </p>\n</li>\n<li><p>scheme：运行命令xcodebuild -list得到的Schemes，可能是一个列表，选一个你需要的  </p>\n</li>\n<li><p>codeSignIdentity：形如：<code>iPhone Distribution: xxxx Inc. (xxxxxxx)</code><br>进入<code>Build Settings</code>, 编辑<code>Code Signing identity</code>成打release包需要的，再点击一下刚才选中的选项，弹出框中点击<code>Other</code>就可以获得形如<code>iPhone Distribution: xxxx Inc. (xxxxxxx)</code>的数据  </p>\n</li>\n<li><p>appStoreProvisioningProfile：形如：<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx</code><br>获取方法与上面类似，最终获得形如<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx</code>的数据  </p>\n</li>\n<li><p>configuration值为：<code>Release</code>或<code>Debug</code>，或者其他自定义configuration值<br>运行命令<code>xcodebuild -list</code>得到的<code>Build Configurations</code>，有两个选项，打release包，所以值为Release  </p>\n</li>\n<li><p>exportOptionsPlist：存放<code>release_exportOptions.plist</code>文件的相对路径<br>如果BuildScript文件夹存放到项目根目录，其值为BuildScript/release_exportOptions.plist</p>\n</li>\n<li><p>xcarchivePath：打包生成xcarchive文件的存放路径<br>altool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}.xcarchive</p>\n</li>\n<li><p>ipaPath：导出ipa文件的路径<br>altool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}/${scheme}.ipa  </p>\n</li>\n<li><p>appleid：开发者账号（邮箱）  </p>\n</li>\n<li><p>applepassword：开发者账号的密码</p>\n</li>\n</ul>\n<h3 id=\"5、脚本的使用\"><a href=\"#5、脚本的使用\" class=\"headerlink\" title=\"5、脚本的使用\"></a>5、脚本的使用</h3><ul>\n<li>将脚本文件放到工程目录下，与 xxx.xcworkspace（xxx.xcodeproj） 同一级</li>\n<li>修改 xcode-archive-release.sh 里面的配置</li>\n<li>修改 release_exportOptions.plist 里面的参数，在终端输入xcodebuild -help进行查看</li>\n<li>打开终端，cd到工程所在目录，输入BuildScript/xcode-archive-release.sh，回车即可运行<br>注意：脚本文件的存放路径可以根据需要自行修改，以上仅仅是为了方便测试。</li>\n</ul>\n<p>问题汇集：</p>\n<ul>\n<li><p>如果卡着不继续编译，则可能是未找到目标scheme。</p>\n</li>\n<li><p>解决办法：打开xcode-&gt;manage schemes-&gt;将目标scheme的Shane选框勾上。</p>\n</li>\n<li><p>如果打包时出现<code>ERROR ITMS-90530</code>的错误，如图</p>\n</li>\n<li><p>解决办法：工程中包含.sh文件，删除.sh文件即可。</p>\n<pre><code>    或者：编译时拔掉真机，否者编译会针对真机的系统架构进行编译 \n</code></pre>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-2-10.png\" alt=\"image\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>#自动化测试（脚本打包）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录</span><br><span class=\"line\">1、使用xcodebuild打包</span><br><span class=\"line\">2、使用altoool提交ipa到AppStore</span><br><span class=\"line\">3、上传到第三方托管平台</span><br><span class=\"line\">4、完整的打包脚本代码</span><br><span class=\"line\">5、脚本的使用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、使用xcodebuild打包\"><a href=\"#1、使用xcodebuild打包\" class=\"headerlink\" title=\"1、使用xcodebuild打包\"></a>1、使用xcodebuild打包</h3><p>xcodebuild是苹果发布自动构建的工具。它在一个Xcode项目下能构建一个或者多个targets ，也能在一个workspace或者Xcode项目上构建scheme，也是构成脚本打包的基础。因此有必要先了解一下xcodebuild的简单实用。在终端输入xcodebuild -help进行查看一些基本的命令。</p>\n<h3 id=\"xcodebuild-简单示例\"><a href=\"#xcodebuild-简单示例\" class=\"headerlink\" title=\"xcodebuild 简单示例\"></a>xcodebuild 简单示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// build clean(对应Xcode的clean功能)</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$configuration&quot; -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\">// archive</span><br><span class=\"line\">xcodebuild archive </span><br><span class=\"line\">-workspace &quot;$workspaceName&quot; </span><br><span class=\"line\">-scheme &quot;$scheme&quot; </span><br><span class=\"line\">-configuration &quot;$configuration&quot;</span><br><span class=\"line\">-archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive </span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;$codeSignIdentity&quot; </span><br><span class=\"line\">PROVISIONING_PROFILE=&quot;$appStoreProvisioningProfile&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">// 导出到ipa</span><br><span class=\"line\">xcodebuild -exportArchive </span><br><span class=\"line\">-archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive </span><br><span class=\"line\">-exportOptionsPlist &quot;$exportOptionsPlist&quot; </span><br><span class=\"line\">-exportPath $&#123;archivePath&#125;/$&#123;archiveName&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用altoool提交ipa到AppStore\"><a href=\"#2、使用altoool提交ipa到AppStore\" class=\"headerlink\" title=\"2、使用altoool提交ipa到AppStore\"></a>2、使用altoool提交ipa到AppStore</h3><p>Application Loader altool </p>\n<p><code>altool</code>的一般路径是”/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool”，脚本打包可以使用<code>Application Loader</code>上传包到iTunesConnect或者第三方托管平台</p>\n<h3 id=\"altool-简单示例\"><a href=\"#altool-简单示例\" class=\"headerlink\" title=\"altool 简单示例\"></a>altool 简单示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//validate</span><br><span class=\"line\">&quot;$altoolPath&quot; --validate-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\"></span><br><span class=\"line\">//upload</span><br><span class=\"line\">&quot;$altoolPath&quot; --upload-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br></pre></td></tr></table></figure>\n\n<p>上传的命令涉及三个参数 ipapath、appleid、password：</p>\n<ul>\n<li>ipapath：ipa包的路径</li>\n<li>appleid：开发者账号（邮箱） </li>\n<li>password：开发者账号的密码</li>\n</ul>\n<h3 id=\"3、上传到第三方托管平台\"><a href=\"#3、上传到第三方托管平台\" class=\"headerlink\" title=\"3、上传到第三方托管平台\"></a>3、上传到第三方托管平台</h3><p>目前，比较主流的第三方托管平台有 <a href=\"https://www.pgyer.com/\">蒲公英</a> 和 <a href=\"https://fir.im/\">fir.im</a>，当然，也可以托管到自己的服务器上。对于以上两个平台，这里不做过多的介绍，直接上代码。</p>\n<h4 id=\"3-1-上传到蒲公英\"><a href=\"#3-1-上传到蒲公英\" class=\"headerlink\" title=\"3.1 上传到蒲公英\"></a>3.1 上传到蒲公英</h4><p>通过蒲公英提供的上传应用 API，调用系统的 <code>curl</code> 命令来上传应用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F &quot;file=@&#123;$filePath&#125;&quot;</span><br><span class=\"line\">-F &quot;uKey=&#123;$uKey&#125;&quot;</span><br><span class=\"line\">-F &quot;_api_key=&#123;$apiKey&#125;&quot;</span><br><span class=\"line\">https://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>{$filePath}是应用安装包文件的路径</li>\n<li>{$uKey}是开发者的用户 Key，在应用管理-API中查看</li>\n<li>{$apiKey}是开发者的 API Key，在应用管理-API中查看</li>\n</ul>\n<h4 id=\"3-2-上传到fir-im（需安装fir-cli）\"><a href=\"#3-2-上传到fir-im（需安装fir-cli）\" class=\"headerlink\" title=\"3.2 上传到fir.im（需安装fir-cli）\"></a>3.2 上传到fir.im（需安装fir-cli）</h4><p><code>fir-cli</code> 使用 <code>Ruby</code> 构建, 无需编译, 只要安装相应 <code>gem</code> 即可.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install fir-cli</span><br></pre></td></tr></table></figure>\n<p>上传代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish &quot;$&#123;ipaPath&#125;&quot; -T &quot;$firApiToken&quot;</span><br></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>{$ipaPath}是应用安装包文件的路径</li>\n<li>{$firApiToken}是用户的 <code>API token</code>，在 <code>用户</code> -&gt; <code>API token</code>中查看</li>\n</ul>\n<h3 id=\"4、完整的打包脚本\"><a href=\"#4、完整的打包脚本\" class=\"headerlink\" title=\"4、完整的打包脚本\"></a>4、完整的打包脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#Development</span><br><span class=\"line\">WORKSPACE_NAME=&quot;BiXuan.xcworkspace&quot;</span><br><span class=\"line\">SCHEME_NAME=&quot;BiXuan&quot;</span><br><span class=\"line\">ARCHIVE_FILE_NAME=&quot;BiXuan_debug&quot;</span><br><span class=\"line\">CONFIGURATION=&quot;Debug&quot;</span><br><span class=\"line\">BUILD_PATH=&quot;build_debug&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#clean</span><br><span class=\"line\">rm -rf build</span><br><span class=\"line\">rm -rf &quot;$&#123;BUILD_PATH&#125;&quot;</span><br><span class=\"line\">xcodebuild clean -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -alltargets</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#签名只需设置CODE_SIGN_IDENTITY即可，系统会根据CODE_SIGN_IDENTITY与工程中的bundle identifier自动匹配PROVISIONING_PROFILE</span><br><span class=\"line\">#打包archive</span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;iPhone Developer: Ling Zhang (VT2F69BR6E)&quot;</span><br><span class=\"line\">#PROVISIONING_PROFILE=&quot;b4693833-d4cb-4a6b-a877-3210769128a7&quot;</span><br><span class=\"line\">XCARCHIVE_PATH=&quot;$&#123;BUILD_PATH&#125;/$&#123;ARCHIVE_FILE_NAME&#125;.xcarchive&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -workspace &quot;$WORKSPACE_NAME&quot; -scheme &quot;$SCHEME_NAME&quot; -configuration &quot;$CONFIGURATION&quot;  -archivePath &quot;$XCARCHIVE_PATH&quot; CODE_SIGN_IDENTITY=&quot;$CODE_SIGN_IDENTITY&quot; archive</span><br><span class=\"line\"></span><br><span class=\"line\">EXPORT_OPTIONS_PLIST_PATH=&quot;BuildScript/Dev_ExportOptions.plist&quot;</span><br><span class=\"line\">IPA_PATH=&quot;$&#123;BUILD_PATH&#125;&quot;</span><br><span class=\"line\">xcodebuild -exportArchive -archivePath &quot;$XCARCHIVE_PATH&quot; -exportPath &quot;$IPA_PATH&quot; -exportOptionsPlist &quot;$EXPORT_OPTIONS_PLIST_PATH&quot;</span><br><span class=\"line\">CODE_SIGN_IDENTITY=&quot;$CODE_SIGN_IDENTITY&quot; PROVISIONING_PROFILE=&quot;$PROVISIONING_PROFILE&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\">#发布到iTunesConnect</span><br><span class=\"line\">###################################</span><br><span class=\"line\">#altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\">##validate</span><br><span class=\"line\">#&quot;$altoolPath&quot; --validate-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\">##upload</span><br><span class=\"line\">#&quot;$altoolPath&quot; --upload-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\"># 托管到 蒲公英</span><br><span class=\"line\">###################################</span><br><span class=\"line\">#apiKey=&quot;e0767c24c24e7099926fa460f86e9913&quot;</span><br><span class=\"line\">#uKey=&quot;edc743045a1987e4edce2a2de4fee3c4&quot;</span><br><span class=\"line\">#curl -F &quot;file=@$&#123;IPA_PATH&#125;/$&#123;SCHEME_NAME&#125;.ipa&quot; -F &quot;uKey=&#123;$uKey&#125;&quot; -F &quot;_api_key=&#123;$apiKey&#125;&quot; https://www.pgyer.com/apiv1/app/upload</span><br><span class=\"line\"></span><br><span class=\"line\">###################################</span><br><span class=\"line\">#发布到fim.im</span><br><span class=\"line\">###################################</span><br><span class=\"line\"></span><br><span class=\"line\">#firApiToken=&quot;a29be0d51c2bfb85b53d1f6cf67fb2e5&quot;</span><br><span class=\"line\">#fir publish &quot;$&#123;IPA_PATH&#125;/$&#123;SCHEME_NAME&#125;.ipa&quot; -T &quot;$firApiToken&quot;</span><br><span class=\"line\">#osascript -e &#x27;display notification &quot;Release To Fir.im&quot; with title &quot;Upload Complete!&quot;&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>archiveName：打包 archive 文件的名字（不用后缀） </p>\n</li>\n<li><p>workspaceName：工程文件的名字（需要后缀） </p>\n</li>\n<li><p>scheme：运行命令xcodebuild -list得到的Schemes，可能是一个列表，选一个你需要的  </p>\n</li>\n<li><p>codeSignIdentity：形如：<code>iPhone Distribution: xxxx Inc. (xxxxxxx)</code><br>进入<code>Build Settings</code>, 编辑<code>Code Signing identity</code>成打release包需要的，再点击一下刚才选中的选项，弹出框中点击<code>Other</code>就可以获得形如<code>iPhone Distribution: xxxx Inc. (xxxxxxx)</code>的数据  </p>\n</li>\n<li><p>appStoreProvisioningProfile：形如：<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx</code><br>获取方法与上面类似，最终获得形如<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx</code>的数据  </p>\n</li>\n<li><p>configuration值为：<code>Release</code>或<code>Debug</code>，或者其他自定义configuration值<br>运行命令<code>xcodebuild -list</code>得到的<code>Build Configurations</code>，有两个选项，打release包，所以值为Release  </p>\n</li>\n<li><p>exportOptionsPlist：存放<code>release_exportOptions.plist</code>文件的相对路径<br>如果BuildScript文件夹存放到项目根目录，其值为BuildScript/release_exportOptions.plist</p>\n</li>\n<li><p>xcarchivePath：打包生成xcarchive文件的存放路径<br>altool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}.xcarchive</p>\n</li>\n<li><p>ipaPath：导出ipa文件的路径<br>altool工具回到该路径获取需要上传的ipa文件，其值应为${PWD}/build/${archiveName}/${scheme}.ipa  </p>\n</li>\n<li><p>appleid：开发者账号（邮箱）  </p>\n</li>\n<li><p>applepassword：开发者账号的密码</p>\n</li>\n</ul>\n<h3 id=\"5、脚本的使用\"><a href=\"#5、脚本的使用\" class=\"headerlink\" title=\"5、脚本的使用\"></a>5、脚本的使用</h3><ul>\n<li>将脚本文件放到工程目录下，与 xxx.xcworkspace（xxx.xcodeproj） 同一级</li>\n<li>修改 xcode-archive-release.sh 里面的配置</li>\n<li>修改 release_exportOptions.plist 里面的参数，在终端输入xcodebuild -help进行查看</li>\n<li>打开终端，cd到工程所在目录，输入BuildScript/xcode-archive-release.sh，回车即可运行<br>注意：脚本文件的存放路径可以根据需要自行修改，以上仅仅是为了方便测试。</li>\n</ul>\n<p>问题汇集：</p>\n<ul>\n<li><p>如果卡着不继续编译，则可能是未找到目标scheme。</p>\n</li>\n<li><p>解决办法：打开xcode-&gt;manage schemes-&gt;将目标scheme的Shane选框勾上。</p>\n</li>\n<li><p>如果打包时出现<code>ERROR ITMS-90530</code>的错误，如图</p>\n</li>\n<li><p>解决办法：工程中包含.sh文件，删除.sh文件即可。</p>\n<pre><code>    或者：编译时拔掉真机，否者编译会针对真机的系统架构进行编译 \n</code></pre>\n<p><img src=\"http://129.204.47.207/img/blog/20161211-2-10.png\" alt=\"image\"></p>\n</li>\n</ul>\n"},{"title":"搭建一个简易的直播APP（iOS版）","date":"2017-03-08T16:00:00.000Z","_content":"\n{% codeblock %}\n###  目录\n1、写在前面\n2、播放：ijkplayer、VLC\n    2.1、使用VLC进行播放\n    2.2、iOS集成ijkplayer进行播放\n        2.2.1  编译IJKMediaPlayer工程\n        2.2.2  ijkplayer集成\n        2.2.1  导出IJKMediaFramework.frameword\n    2.3、编写iOS代码\n3、服务器：nginx+rtmp+ffmpeg\n    3.1、安装Homebrew\n    3.2、安装nginx\n    3.3、配置rtmp\n    3.4、配置HLS（Http Live Streaming）\n4、推流测试（直播模拟）\n    4.1、使用ffmepg推流测试\n        4.1.1 安装ffmepg\n        4.1.2 模拟rtmp直播\n        4.1.3 模拟HLS点播\n    4.2、iOS代码推流测试\n        4.2.1 添加iOS推流代码\n        4.2.1 模拟rtmp直播\n        4.2.2 模拟HLS直播\n{% endcodeblock %}\n\n\n## 1、写在前面\n&emsp;&emsp;最近又重新翻看了一下iOS相关的点播与直播资料，也踩了不少坑。网上也有不少相关资料，但是完整直播流程一直走不通，要么是电脑推流手机播放，要么是电脑推流电脑播放，至于手机推流的完整demo相对较少，无法很直观的体会完整的手机直播，即手机推流与手机播放。    \n&emsp;&emsp;本例将借助nginx+rtmp+ffmpeg搭建一个简单的直播系统，通过手机采集音视频，经过简单的图像处理和编码，再将流推到自己搭建的服务器上（顺带介绍一下电脑推流），最后通过手机和电脑进行播放了。  \n&emsp;&emsp;一个完整的直播系统需要涉及到的技术及流程主要包括以下方面：\n\n    采集 => 图像处理 => 编码 => 推流 => CDN分发 => 拉流 => 解码 => 播放 => 聊天互动。    \n\n&emsp;&emsp;在本例中，采集=>滤镜处理=>编码=>推流由LFLiveKit来完成，其中图像处理交给GPUImage库完成，而LFLiveKit已经集成了GPUImage库；CDN分发就是搭建的本地服务器；拉流=>解码=>播放由ijkplayer库来完成；聊天互动属于IM范畴，这里就讨论了，有兴趣的朋友可以自行搜索。这里重点是操作，没有太多涉及理论的东西，目的是希望通过一个简单的例子，加深对直播的理解。后续也会慢慢补上直播中各个技术的理论知识与demo。\n\n## 2、播放环境搭建：ijkplayer、VLC\n&emsp;&emsp; VLC：电脑版的播放器，用于模拟在电脑端播放。   \n&emsp;&emsp; ijkplayer：是基于FFmpeg的跨平台播放器框架，github地址：https://github.com/Bilibili/ijkplayer， iOS版的播放器将使用ijkplayer框架进行集成。  \n&emsp;&emsp; 先提供一个播放源数据：http://116.211.167.106/api/live/aggregation?uid=133825214&interest=1, 复制链接到浏览器中打开，会返回一个json格式的数据，其中一个stream_addr的值就是一个播放源。（感谢@袁峥Seemygo提供）。\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_1.png)\n\n### &emsp;&emsp;2.1、Mac端使用VLC进行播放 \n&emsp;&emsp;百度下载mac版的VLC进行安装，打开VLC，File -> Open Network…\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_7.png)\n\n\n### &emsp;&emsp;2.2、iOS集成ijkplayer\n#### &emsp;&emsp;2.2.1、ijkplayer集成\n\n##### &emsp;&emsp; a> 下载ijkplayer源码：(下载地址:https://github.com/Bilibili/ijkplayer)  \n##### &emsp;&emsp; b> 导入ffmpeg\n&emsp;&emsp;ijkplayer是基于ffmpeg这个库的，因此需要导入ffmpeg库  \n&emsp;&emsp;打开终端，cd到ijkplayer所在目录，可以看到init-ios.sh的脚本文件，运行脚本文件:\n\n{% codeblock lang:shell%}\n    $ ./init-ios.sh\n{% endcodeblock %}\n\n&emsp;&emsp;等待一段时间....运行完成以后，ios文件夹下面会多出来四个文件夹，分别是ffmpeg-arm64、ffmpeg-armv7、ffmpeg-i386、ffmpeg-x86_64。  \n##### &emsp;&emsp; c> 编译ffmpeg库  \n\n{% codeblock %}\n//依次执行\n//进入ios文件夹\n$ cd ios\n\n//删除一些文件和文件夹，为编译ffmpeg.sh做准备，在编译ffmpeg.sh的时候，会自动创建刚刚删除的那些文件，为避免文件名冲突，因此在编译ffmpeg.sh之前先删除等会会自动创建的文件夹或者文件\n$ ./compile-ffmpeg.sh clean\n\n//真正的编译各个平台的ffmpeg库，并生成所有平台的通用库。\n$ ./compile-ffmpeg.sh all\n\n{% endcodeblock %}\n\n&emsp;&emsp; 双击进入ios文件夹，打开IJKMediaPlayer工程，查看Class-IJKFFMoviePlayerController-ffmpeg-lib下的.a文件，如果文件一片红，说明ffmpeg的编译失败，请重复b、c操作。  \n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_8.png)\n\n##### &emsp;&emsp; d> 编译IJKMediaFramework  \n&emsp;&emsp;集成ijkplayer的方法有两种，一种是将以上运行成功的IJKMediaPlayer工程中的IJKMediaPlayer.xcodeproj直接导入目标工程，在这里不做介绍;  \n&emsp;&emsp;另外一种就是将ijkplayer打包成framework导入工程。  \n\n###### &emsp;&emsp; e.1 打开IJKMediaPlayer工程  \n\n###### &emsp;&emsp; e.2 设置工程的scheme\n选择product-Scheme-Edit Scheme\n选择run下面的Build Configuration为release，如图\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_2.png)\n\n###### &emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_6.png)\n\nRelease-iphoneos是真机版本的framework，只能跑真机，不能跑模拟器；  \nRelease-iphonesimulator是模拟器版本的framework，只能跑模拟器，不能跑真机；\n如果希望真机与模拟器都能运行，那么就需要对这两个framework进行合并。  \n\n###### &emsp;&emsp; e.4 合并真机与模拟器版本的framework  \n\n//注意：合并的目标是\nRelease-iphoneos/IJKMediaFramework.framework/IJKMediaFramework  \nRelease-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework\n\n{% codeblock %}\n//合并代码\n//$ lipo -create \"真机版路径\" \"模拟器版路径\" -output \"合并后的版本路径\"\n//比如我的：\n$ lipo -create /Users/Hmily/Desktop/framework/Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework /Users/Hmily/Desktop/framework/Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output /Users/Hmily/Desktop/framework/IJKMediaFramework\n{% endcodeblock %}\n\n复制Release-iphoneos文件夹，粘贴并命名为Release-iphonesimulator-OS\n将Release-iphonesimulator-OS/IJKMediaFramework.framework/IJKMediaFramework\n替换为刚刚合并生成的IJKMediaFramework\n至此，真机与模拟器版的framework制作完成。\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_3.png)\n\n###### &emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中\n将IJKMediaFramework.framework添加到自己的工程中，并添加以下库支持\n\n    AudioToolbox.framework         \n    AVFoundation.framework\n    CoreMedia.framework\n    CoreVideo.framework\n    libbz2.tbd\n    libz.tbd\n    MediaPlayer.framework\n    MobileCoreServices.framework\n    OpenGLES.framework\n    VideoToolbox.framework\n\n### &emsp;&emsp;2.3、编写iOS代码\n{% codeblock lang:objc %}\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor whiteColor];\n    NSString * videoUrl = self.videoInfo[@\"stream_addr\"];\n    //videoUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";\n    self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    [_player prepareToPlay];\n    [self.view addSubview:_player.view];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n    [_player pause];\n    [_player stop];\n}\n\n- (void)dealloc{\n    _player = nil;\n}\n{% endcodeblock %}\n\n## 3、服务器搭建：nginx+rtmp+ffmpeg\n上面我们完成了播放器的搭建，接下来我们搭建一个属于自己的服务器。\n### &emsp;&emsp;3.1、安装Homebrew\n打开终端，输入： \n{% codeblock %}\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n### &emsp;&emsp;3.2、安装nginx\n\n依次输入以下的命令：\n{% codeblock %}\n    //从github下载Nginx到本地,增加home-brew对nginx的扩展：   \n    $ brew tap homebrew/nginx\n\n    //安装Nginx服务器和rtmp模块:\n    $ brew install nginx-full --with-rtmp-module\n\n    //启动nginx服务器\n    $ nginx\n{% endcodeblock %}\n在浏览器地址栏输入：http://localhost:8080 （直接点击）\n如果出现下图, 则表示安装成功。 \n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_10.png)\n\n### &emsp;&emsp;3.3、配置rtmp\n\n{% codeblock %}\n    //查看nginx信息\n    $ brew info nginx-full\n{% endcodeblock %}\n\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_9.png)\n\n\n打开/usr/local/etc/nginx/nginx.conf文件，在最后面插入以下代码：\n\n{% codeblock %}\nrtmp {\n    server {\n        listen 9090;            #监听接口号\n\n        #RTMP协议\n        application rmspApp {   #app名称\n            live on;\n            record off;          #不记录数据\n        }\n\n        #HLS协议，如果不需要HLS协议，这部分可以删除\n        #application hls{\n        #   live on;             #开启实时\n        #   hls on;              #开始HLS\n        #   hls_fragment 1s;     #切片时长\n        #   hls_path /usr/local/var/www/hls;     #ts文件保存路劲\n        # }\n    }\n}\n\n{% endcodeblock %}\n\n重新加载nginx的配置文件：\n{% codeblock %}\n    $ nginx -s reload\n\n    //RTMP推流地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）\n    //RTMP播放地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）\n{% endcodeblock %}\n\n### &emsp;&emsp;3.3、配置HLS(Http Live Streaming)\n打开/usr/local/etc/nginx/nginx.conf文件，找到配置http的部分，在'{}'内插入以下配置信息\n\n{% codeblock %}\n#这个配置为了`客户端`能够以http协议获取HLS的拉流\nserver {\n    listen:9088;\n    location /hls {\n        types {\n            application/vnd.apple.mpegurl m3u8;\n            video/mp2t ts;\n        }\n        root html;\n        add_header Cache-Control no-cache;\n    }\n}\n{% endcodeblock %}\n\n找到rtmp下的server，在'{ }'中增加\n{% codeblock %}\n#HLS协议\napplication hls{\n    live on;             #开启实时\n    hls on;              #开始HLS\n    hls_fragment 1s;     #切片时长\n    hls_path /usr/local/var/www/hls;     #ts文件保存路劲\n}\n{% endcodeblock %}\n\n\n\n重新加载nginx的配置文件：\n{% codeblock %}\n    $ nginx -s reload\n\n    //HLS推流地址：http://192.168.2.107:9090/hls/abc\n    //HLS播放地址：http://192.168.2.107:9088/hls/abc.m3u8(主要端口号的变化)\n{% endcodeblock %}\n\n\n\n\n`注意`：HLS中，我们想把推流生成的ts文件存放在`指定的目录`下，比如\"/tmp/hls\"  \n\n    application hls {\n        live on;\n        hls on;\n        hls_path /tmp/hls;\n    }\n\n那么，我们也需要在http-->server中对root 路径更改为：/tmp 。要不然，会拉不到流。\n\n    location /hls {\n        types {\n        application/vnd.apple.mpegurl m3u8;\n        video/mp2t ts;\n    }\n    root html;===>更改为root /tmp\n    //root html 是指使用当前nginx服务器根目录所在位置,指向的是 /usr/local/var/www 这个目录\n至此服务器的配置就算完成了，接下来我们进行推流，并进行直播测试\n\n## 4、推流测试\n\n### &emsp;&emsp;4.1、使用ffmepg推流测试  \n#### &emsp;&emsp;4.1.1 安装ffmepg\n终端输入：\n{% codeblock %}\n$ brew install ffmpeg\n{% endcodeblock %}\n\n#### &emsp;&emsp;4.2.1 模拟rtmp推流(直播)  \n使用ffmepg对视频编码  \n准备一个视频文件，终端cd到该文件所在的目录：\n{% codeblock %}\n    Hmily$ cd /Users/Hmily/Desktop/rtmp\n    Hmily$ ls\n    mtv.mp4\n\n    //推流\n    Hmily$ ffmpeg -re -i mtv.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://10.3.9.10:9090/rmspApp/133009\n    //直播会有多个直播室，这里随便弄一个编号133009模拟\n\n    //播放：\n    //使用FLV播放\n    //File -> Open Network…\n    //RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009\n\n    //iOS使用ijkplayer播放\n    //NSString * videoUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";\n    //self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    //[_player prepareToPlay];\n    //[self.view addSubview:_player.view];\n\n{% endcodeblock %}\n\n\n#### &emsp;&emsp;4.1.3 模拟HLS(点播)  \n使用ffmepg对视频编码  \n准备一个视频文件，终端cd到该文件所在的目录：\n{% codeblock %}\n    Hmily$ cd /Users/Hmily/Desktop/hls\n    Hmily$ ls\n    mtv.mp4\n\n    //编码切片\n    Hmily$ ffmpeg -i mtv.mp4 -c:v libx264 -c:a copy -f hls mtv.m3u8\n\n    //接下来是漫长的等待...  \n    //ffmpeg正在将mtv.mp4切成一个个很小的ts文件，并生成一个mtv.m3u8的索引文件。\n    //编码完成以后\n    Hmily$ ls \n    mtv.mp4 \tmtv.m3u8    mtv12.ts\tmtv19.ts\tmtv25.ts\t\n    mtv4.ts \tmtv13.ts\tmtv2.ts\t\tmtv26.ts\tmtv5.ts\n    mtv14.ts\tmtv20.ts\tmtv27.ts\tmtv6.ts     mtv30.ts\n    mtv0.ts\t\tmtv15.ts\tmtv21.ts\tmtv28.ts\tmtv7.ts\n    mtv1.ts\t\tmtv16.ts\tmtv22.ts\tmtv29.ts\tmtv8.ts\n    mtv10.ts\tmtv17.ts\tmtv23.ts\tmtv3.ts\t\tmtv9.ts\n    mtv11.ts\tmtv18.ts\tmtv24.ts\t\n{% endcodeblock %}\n\n播放：\n切片完成以后，将hls文件夹拷贝到/usr/local/var/www目录下。  \n使用Safari播放：打开Safari，输入\"http://localhost:9090/hls/mtv.m3u8\"，回车。（这里localhost是本机IP地址：10.3.9.103）\niOS自带m3u8解码播放功能，打开Safari，输入\"http://10.3.9.103:9090/hls/mtv.m3u8\"也可以进行播放，或者在代码中使用UIWebView加载也是可以播放的。\n\n\n\n\n\n### &emsp;&emsp;4.2、iOS代码推流测试  \n#### &emsp;&emsp;4.2.1 添加iOS推流代码\n添加LFLiveKit库\n{% codeblock %}\n    #source 'https://github.com/CocoaPods/Specs.git'\n    #source <your private repo containing ijkplayer, FFmpeg4ijkplayer-ios-bin>\n\n    target ‘HLS’ do\n        platform :ios, '8.0'\n        pod 'SDWebImage', '~> 3.7.3'\n        pod 'LFLiveKit', '~> 2.5'\n    end\n{% endcodeblock %}\n\n添加OC代码  \nLivePreviewController.h\n{% codeblock lang:objc %}\n//  Created by Hmily on 2016/12/5.\n//  Copyright © 2016年 Hmily. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n\n@interface LivePreviewController : UIViewController\n\n@end \n{% endcodeblock %}\n\n\nLivePreviewController.m\n{% codeblock lang:objc %}\n//  Created by Hmily on 2016/12/5.\n//  Copyright © 2016年 Hmily. All rights reserved.\n//\n\n#import \"LivePreviewController.h\"\n#import \"LFLiveKit.h\"\n\n@interface LivePreviewController ()<LFLiveSessionDelegate>\n\n@property (nonatomic, strong) UIButton *startLiveButton;\n@property (nonatomic, strong) LFLiveSession *session;\n@property (nonatomic, strong) UILabel *stateLabel;\n@property (nonatomic, copy) NSString * streamUrl;//推流的地址\n\n@end\n\n@implementation LivePreviewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor yellowColor];\n    [self requestAccessForVideo];\n    [self requestAccessForAudio];\n    [self.view addSubview:self.stateLabel];\n    [self.view addSubview:self.startLiveButton];\n\n    self.session = [[LFLiveSession alloc] initWithAudioConfiguration:[LFLiveAudioConfiguration defaultConfiguration]\n                                                  videoConfiguration:[LFLiveVideoConfiguration defaultConfiguration]\n                                                         captureType:LFLiveCaptureDefaultMask];\n\n    _session.delegate = self;\n    _session.showDebugInfo = NO;\n    _session.preView = self.view;\n\n    //self.streamUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";//网上现的RTMP服务器，无需配置本地服务器\n    //self.streamUrl = @\"rtmp://10.3.9.103:9090/rmspApp/133009\";//自己搭建的本地RTMP服务器\n    self.streamUrl = @\"http://10.3.9.103:9090/hls/133009\";//HLS本地服务器\n}\n\n\n#pragma mark - UI\n//TODO：直播按钮\n- (UIButton *)startLiveButton {\n    if (!_startLiveButton) {\n        self.startLiveButton = [UIButton buttonWithType:UIButtonTypeCustom];\n        CGRect frame = CGRectZero;\n        frame.size = CGSizeMake(CGRectGetWidth(self.view.bounds) - 60, 44);\n        frame.origin = CGPointMake(30, CGRectGetHeight(self.view.bounds) - 90);\n        _startLiveButton.frame = frame;\n        _startLiveButton.layer.cornerRadius = CGRectGetHeight(frame)/2;\n        [_startLiveButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [_startLiveButton.titleLabel setFont:[UIFont systemFontOfSize:16]];\n        [_startLiveButton setTitle:@\"开始直播\" forState:UIControlStateNormal];\n        [_startLiveButton setBackgroundColor:[UIColor colorWithRed:50 green:32 blue:245 alpha:1]];\n        _startLiveButton.exclusiveTouch = YES;\n        [_startLiveButton addTarget:self\n                             action:@selector(startLiveButtonClick:)\n                   forControlEvents:UIControlEventTouchUpInside];\n        }\n    return _startLiveButton;\n}\n\n#pragma mark - 事件响应\n- (void)startLiveButtonClick:(UIButton *)startLiveButton{\n    _startLiveButton.selected = !_startLiveButton.selected;\n    if (_startLiveButton.selected) {\n        [_startLiveButton setTitle:@\"结束直播\" forState:UIControlStateNormal];\n        LFLiveStreamInfo *stream = [LFLiveStreamInfo new];\n        //stream.url = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";\n\n        //stream.url = @\"rtmp://10.3.9.103:1990/liveApp/abc\";//RTMP\n        //stream.url = @\"rtmp://192.168.2.107:1990/liveApp/abc\";//RTMP\n        stream.url = @\"http://10.3.9.103:1990/hls/abc\";//HLS\n        //stream.url = @\"http://192.168.2.107:1990/hls/abc\";//HLS\n        [_session startLive:stream];\n    } else {\n        [_startLiveButton setTitle:@\"开始直播\" forState:UIControlStateNormal];\n        [_session stopLive];\n    }\n}\n\n#pragma mark - 设备是否可用\n//TODO:判断视频设备是否可用\n- (void)requestAccessForVideo {\n    __weak typeof(self) weakSelf = self;\n    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];\n    switch (status) {\n        case AVAuthorizationStatusNotDetermined: {\n            // 许可对话没有出现，发起授权许可\n            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {\n                if (granted) {\n                    dispatch_async(dispatch_get_main_queue(), ^{\n                        [weakSelf.session setRunning:YES];\n                    });\n                }\n            }];\n            break;\n        }\n        case AVAuthorizationStatusAuthorized: {\n        // 已经开启授权，可继续\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [weakSelf.session setRunning:YES];\n            });\n            break;\n        }\n        case AVAuthorizationStatusDenied:\n        case AVAuthorizationStatusRestricted:{\n        // 用户明确地拒绝授权，或者相机设备无法访问\n            break;\n        }\n        default:{\n            break;\n        }\n    }\n}\n\n//TODO:判断音频设备是否可用\n- (void)requestAccessForAudio {\n    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];\n    switch (status) {\n        case AVAuthorizationStatusNotDetermined: {\n        // 许可对话没有出现，发起授权许可\n            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeAudio completionHandler:^(BOOL granted) {\n            }];\n            break;\n        }\n        case AVAuthorizationStatusAuthorized: {\n        // 已经开启授权\n            break;\n        }\n        case AVAuthorizationStatusDenied:\n        case AVAuthorizationStatusRestricted:{\n        // 用户明确地拒绝授权，或者音频设备无法访问\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n#pragma mark - 代理方法\n#pragma mark - LFStreamingSessionDelegate\n/** 直播状态回调 */\n- (void)liveSession:(nullable LFLiveSession *)session liveStateDidChange:(LFLiveState)state {\n    NSLog(@\"%s\", __FUNCTION__);\n    switch (state) {\n        case LFLiveReady:\n            _stateLabel.text = @\"未连接\";\n            break;\n        case LFLivePending:\n            _stateLabel.text = @\"连接中\";\n            break;\n        case LFLiveStart:\n            _stateLabel.text = @\"已连接\";\n            break;\n        case LFLiveError:\n            _stateLabel.text = @\"连接错误\";\n            break;\n        case LFLiveStop:\n            _stateLabel.text = @\"未连接\";\n            break;\n        default:\n            break;\n    }\n}\n\n- (void)liveSession:(nullable LFLiveSession *)session debugInfo:(nullable LFLiveDebug *)debugInfo {\n    NSLog(@\"%s\", __FUNCTION__);\n}\n\n- (void)liveSession:(nullable LFLiveSession *)session errorCode:(LFLiveSocketErrorCode)errorCode {\n    NSLog(@\"%s\", __FUNCTION__);\n}\n\n\n@end\n\n{% endcodeblock %}\n\n#### &emsp;&emsp;4.2.2 模拟rtmp直播  \n    将代码中的self.streamUrl设置为\n    rtmp://10.3.9.10:9090/rmspApp/133009\n{% codeblock lang:objc %}\n    //推流\n    //将代码中的self.streamUrl设置为rtmp://10.3.9.10:9090/rmspApp/133009\n    //直播会有多个直播室，这里随便弄一个编号133009模拟\n    self.streamUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";//自己搭建的本地服务器\n\n    //如果本地服务器还没有配置好，可以使用网上开源的一个地址进行测试\n    //self.streamUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/133009\";//开源的RTMP服务器(更改房间号就可以了)\n\n\n    //播放\n    //使用FLV播放\n    //File -> Open Network…\n    //RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009\n\n    //iOS使用ijkplayer播放\n    //NSString * videoUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";\n    //self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    //[_player prepareToPlay];\n    //[self.view addSubview:_player.view];\n{% endcodeblock %}\n\n\n\n\n#### &emsp;&emsp;4.2.2 模拟HLS直播\n{% codeblock lang:objc %}\n//推流\n//将代码中的self.streamUrl设置为http://10.3.9.103:9088/hls/133009\n//直播会有多个直播室，这里随便弄一个编号133009模拟\n//注意拉流的端口号要与配置文件中的端口号一致（参见3.3）\nself.streamUrl = @\"http://10.3.9.103:9088/hls/133009\";//HLS本地服务器\n\n\n//播放\n//使用FLV播放\n//File -> Open Network…\n//RUL中输入  http://10.3.9.103:9088/hls/133009.m3u8\n\n//使用Safari播放\n//在地址栏中输入  http://10.3.9.103:9088/hls/133009.m3u8\n\n//iOS使用ijkplayer播放\n//NSString * videoUrl = @\"http://10.3.9.103:9088/hls/133009.m3u8\";\n//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n//[_player prepareToPlay];\n//[self.view addSubview:_player.view];\n{% endcodeblock %}\n\n代码事例请前往github下载：https://github.com/xudusheng/Http-Live-Streaming 。  \n后面会陆陆续续把相关的理论知识补上，请继续关注。\n\n\n","source":"_posts/搭建一个简易的直播APP（iOS版）.md","raw":"---\ntitle: 搭建一个简易的直播APP（iOS版）\ndate: 2017-03-09\ncategories: [直播]\n---\n\n{% codeblock %}\n###  目录\n1、写在前面\n2、播放：ijkplayer、VLC\n    2.1、使用VLC进行播放\n    2.2、iOS集成ijkplayer进行播放\n        2.2.1  编译IJKMediaPlayer工程\n        2.2.2  ijkplayer集成\n        2.2.1  导出IJKMediaFramework.frameword\n    2.3、编写iOS代码\n3、服务器：nginx+rtmp+ffmpeg\n    3.1、安装Homebrew\n    3.2、安装nginx\n    3.3、配置rtmp\n    3.4、配置HLS（Http Live Streaming）\n4、推流测试（直播模拟）\n    4.1、使用ffmepg推流测试\n        4.1.1 安装ffmepg\n        4.1.2 模拟rtmp直播\n        4.1.3 模拟HLS点播\n    4.2、iOS代码推流测试\n        4.2.1 添加iOS推流代码\n        4.2.1 模拟rtmp直播\n        4.2.2 模拟HLS直播\n{% endcodeblock %}\n\n\n## 1、写在前面\n&emsp;&emsp;最近又重新翻看了一下iOS相关的点播与直播资料，也踩了不少坑。网上也有不少相关资料，但是完整直播流程一直走不通，要么是电脑推流手机播放，要么是电脑推流电脑播放，至于手机推流的完整demo相对较少，无法很直观的体会完整的手机直播，即手机推流与手机播放。    \n&emsp;&emsp;本例将借助nginx+rtmp+ffmpeg搭建一个简单的直播系统，通过手机采集音视频，经过简单的图像处理和编码，再将流推到自己搭建的服务器上（顺带介绍一下电脑推流），最后通过手机和电脑进行播放了。  \n&emsp;&emsp;一个完整的直播系统需要涉及到的技术及流程主要包括以下方面：\n\n    采集 => 图像处理 => 编码 => 推流 => CDN分发 => 拉流 => 解码 => 播放 => 聊天互动。    \n\n&emsp;&emsp;在本例中，采集=>滤镜处理=>编码=>推流由LFLiveKit来完成，其中图像处理交给GPUImage库完成，而LFLiveKit已经集成了GPUImage库；CDN分发就是搭建的本地服务器；拉流=>解码=>播放由ijkplayer库来完成；聊天互动属于IM范畴，这里就讨论了，有兴趣的朋友可以自行搜索。这里重点是操作，没有太多涉及理论的东西，目的是希望通过一个简单的例子，加深对直播的理解。后续也会慢慢补上直播中各个技术的理论知识与demo。\n\n## 2、播放环境搭建：ijkplayer、VLC\n&emsp;&emsp; VLC：电脑版的播放器，用于模拟在电脑端播放。   \n&emsp;&emsp; ijkplayer：是基于FFmpeg的跨平台播放器框架，github地址：https://github.com/Bilibili/ijkplayer， iOS版的播放器将使用ijkplayer框架进行集成。  \n&emsp;&emsp; 先提供一个播放源数据：http://116.211.167.106/api/live/aggregation?uid=133825214&interest=1, 复制链接到浏览器中打开，会返回一个json格式的数据，其中一个stream_addr的值就是一个播放源。（感谢@袁峥Seemygo提供）。\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_1.png)\n\n### &emsp;&emsp;2.1、Mac端使用VLC进行播放 \n&emsp;&emsp;百度下载mac版的VLC进行安装，打开VLC，File -> Open Network…\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_7.png)\n\n\n### &emsp;&emsp;2.2、iOS集成ijkplayer\n#### &emsp;&emsp;2.2.1、ijkplayer集成\n\n##### &emsp;&emsp; a> 下载ijkplayer源码：(下载地址:https://github.com/Bilibili/ijkplayer)  \n##### &emsp;&emsp; b> 导入ffmpeg\n&emsp;&emsp;ijkplayer是基于ffmpeg这个库的，因此需要导入ffmpeg库  \n&emsp;&emsp;打开终端，cd到ijkplayer所在目录，可以看到init-ios.sh的脚本文件，运行脚本文件:\n\n{% codeblock lang:shell%}\n    $ ./init-ios.sh\n{% endcodeblock %}\n\n&emsp;&emsp;等待一段时间....运行完成以后，ios文件夹下面会多出来四个文件夹，分别是ffmpeg-arm64、ffmpeg-armv7、ffmpeg-i386、ffmpeg-x86_64。  \n##### &emsp;&emsp; c> 编译ffmpeg库  \n\n{% codeblock %}\n//依次执行\n//进入ios文件夹\n$ cd ios\n\n//删除一些文件和文件夹，为编译ffmpeg.sh做准备，在编译ffmpeg.sh的时候，会自动创建刚刚删除的那些文件，为避免文件名冲突，因此在编译ffmpeg.sh之前先删除等会会自动创建的文件夹或者文件\n$ ./compile-ffmpeg.sh clean\n\n//真正的编译各个平台的ffmpeg库，并生成所有平台的通用库。\n$ ./compile-ffmpeg.sh all\n\n{% endcodeblock %}\n\n&emsp;&emsp; 双击进入ios文件夹，打开IJKMediaPlayer工程，查看Class-IJKFFMoviePlayerController-ffmpeg-lib下的.a文件，如果文件一片红，说明ffmpeg的编译失败，请重复b、c操作。  \n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_8.png)\n\n##### &emsp;&emsp; d> 编译IJKMediaFramework  \n&emsp;&emsp;集成ijkplayer的方法有两种，一种是将以上运行成功的IJKMediaPlayer工程中的IJKMediaPlayer.xcodeproj直接导入目标工程，在这里不做介绍;  \n&emsp;&emsp;另外一种就是将ijkplayer打包成framework导入工程。  \n\n###### &emsp;&emsp; e.1 打开IJKMediaPlayer工程  \n\n###### &emsp;&emsp; e.2 设置工程的scheme\n选择product-Scheme-Edit Scheme\n选择run下面的Build Configuration为release，如图\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_2.png)\n\n###### &emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_6.png)\n\nRelease-iphoneos是真机版本的framework，只能跑真机，不能跑模拟器；  \nRelease-iphonesimulator是模拟器版本的framework，只能跑模拟器，不能跑真机；\n如果希望真机与模拟器都能运行，那么就需要对这两个framework进行合并。  \n\n###### &emsp;&emsp; e.4 合并真机与模拟器版本的framework  \n\n//注意：合并的目标是\nRelease-iphoneos/IJKMediaFramework.framework/IJKMediaFramework  \nRelease-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework\n\n{% codeblock %}\n//合并代码\n//$ lipo -create \"真机版路径\" \"模拟器版路径\" -output \"合并后的版本路径\"\n//比如我的：\n$ lipo -create /Users/Hmily/Desktop/framework/Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework /Users/Hmily/Desktop/framework/Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output /Users/Hmily/Desktop/framework/IJKMediaFramework\n{% endcodeblock %}\n\n复制Release-iphoneos文件夹，粘贴并命名为Release-iphonesimulator-OS\n将Release-iphonesimulator-OS/IJKMediaFramework.framework/IJKMediaFramework\n替换为刚刚合并生成的IJKMediaFramework\n至此，真机与模拟器版的framework制作完成。\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_3.png)\n\n###### &emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中\n将IJKMediaFramework.framework添加到自己的工程中，并添加以下库支持\n\n    AudioToolbox.framework         \n    AVFoundation.framework\n    CoreMedia.framework\n    CoreVideo.framework\n    libbz2.tbd\n    libz.tbd\n    MediaPlayer.framework\n    MobileCoreServices.framework\n    OpenGLES.framework\n    VideoToolbox.framework\n\n### &emsp;&emsp;2.3、编写iOS代码\n{% codeblock lang:objc %}\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor whiteColor];\n    NSString * videoUrl = self.videoInfo[@\"stream_addr\"];\n    //videoUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";\n    self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    [_player prepareToPlay];\n    [self.view addSubview:_player.view];\n}\n\n- (void)viewWillDisappear:(BOOL)animated{\n    [super viewWillDisappear:animated];\n    [_player pause];\n    [_player stop];\n}\n\n- (void)dealloc{\n    _player = nil;\n}\n{% endcodeblock %}\n\n## 3、服务器搭建：nginx+rtmp+ffmpeg\n上面我们完成了播放器的搭建，接下来我们搭建一个属于自己的服务器。\n### &emsp;&emsp;3.1、安装Homebrew\n打开终端，输入： \n{% codeblock %}\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n{% endcodeblock %}\n### &emsp;&emsp;3.2、安装nginx\n\n依次输入以下的命令：\n{% codeblock %}\n    //从github下载Nginx到本地,增加home-brew对nginx的扩展：   \n    $ brew tap homebrew/nginx\n\n    //安装Nginx服务器和rtmp模块:\n    $ brew install nginx-full --with-rtmp-module\n\n    //启动nginx服务器\n    $ nginx\n{% endcodeblock %}\n在浏览器地址栏输入：http://localhost:8080 （直接点击）\n如果出现下图, 则表示安装成功。 \n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_10.png)\n\n### &emsp;&emsp;3.3、配置rtmp\n\n{% codeblock %}\n    //查看nginx信息\n    $ brew info nginx-full\n{% endcodeblock %}\n\n\n![image](http://ohlldt20k.bkt.clouddn.com/hls_1_9.png)\n\n\n打开/usr/local/etc/nginx/nginx.conf文件，在最后面插入以下代码：\n\n{% codeblock %}\nrtmp {\n    server {\n        listen 9090;            #监听接口号\n\n        #RTMP协议\n        application rmspApp {   #app名称\n            live on;\n            record off;          #不记录数据\n        }\n\n        #HLS协议，如果不需要HLS协议，这部分可以删除\n        #application hls{\n        #   live on;             #开启实时\n        #   hls on;              #开始HLS\n        #   hls_fragment 1s;     #切片时长\n        #   hls_path /usr/local/var/www/hls;     #ts文件保存路劲\n        # }\n    }\n}\n\n{% endcodeblock %}\n\n重新加载nginx的配置文件：\n{% codeblock %}\n    $ nginx -s reload\n\n    //RTMP推流地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）\n    //RTMP播放地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）\n{% endcodeblock %}\n\n### &emsp;&emsp;3.3、配置HLS(Http Live Streaming)\n打开/usr/local/etc/nginx/nginx.conf文件，找到配置http的部分，在'{}'内插入以下配置信息\n\n{% codeblock %}\n#这个配置为了`客户端`能够以http协议获取HLS的拉流\nserver {\n    listen:9088;\n    location /hls {\n        types {\n            application/vnd.apple.mpegurl m3u8;\n            video/mp2t ts;\n        }\n        root html;\n        add_header Cache-Control no-cache;\n    }\n}\n{% endcodeblock %}\n\n找到rtmp下的server，在'{ }'中增加\n{% codeblock %}\n#HLS协议\napplication hls{\n    live on;             #开启实时\n    hls on;              #开始HLS\n    hls_fragment 1s;     #切片时长\n    hls_path /usr/local/var/www/hls;     #ts文件保存路劲\n}\n{% endcodeblock %}\n\n\n\n重新加载nginx的配置文件：\n{% codeblock %}\n    $ nginx -s reload\n\n    //HLS推流地址：http://192.168.2.107:9090/hls/abc\n    //HLS播放地址：http://192.168.2.107:9088/hls/abc.m3u8(主要端口号的变化)\n{% endcodeblock %}\n\n\n\n\n`注意`：HLS中，我们想把推流生成的ts文件存放在`指定的目录`下，比如\"/tmp/hls\"  \n\n    application hls {\n        live on;\n        hls on;\n        hls_path /tmp/hls;\n    }\n\n那么，我们也需要在http-->server中对root 路径更改为：/tmp 。要不然，会拉不到流。\n\n    location /hls {\n        types {\n        application/vnd.apple.mpegurl m3u8;\n        video/mp2t ts;\n    }\n    root html;===>更改为root /tmp\n    //root html 是指使用当前nginx服务器根目录所在位置,指向的是 /usr/local/var/www 这个目录\n至此服务器的配置就算完成了，接下来我们进行推流，并进行直播测试\n\n## 4、推流测试\n\n### &emsp;&emsp;4.1、使用ffmepg推流测试  \n#### &emsp;&emsp;4.1.1 安装ffmepg\n终端输入：\n{% codeblock %}\n$ brew install ffmpeg\n{% endcodeblock %}\n\n#### &emsp;&emsp;4.2.1 模拟rtmp推流(直播)  \n使用ffmepg对视频编码  \n准备一个视频文件，终端cd到该文件所在的目录：\n{% codeblock %}\n    Hmily$ cd /Users/Hmily/Desktop/rtmp\n    Hmily$ ls\n    mtv.mp4\n\n    //推流\n    Hmily$ ffmpeg -re -i mtv.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://10.3.9.10:9090/rmspApp/133009\n    //直播会有多个直播室，这里随便弄一个编号133009模拟\n\n    //播放：\n    //使用FLV播放\n    //File -> Open Network…\n    //RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009\n\n    //iOS使用ijkplayer播放\n    //NSString * videoUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";\n    //self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    //[_player prepareToPlay];\n    //[self.view addSubview:_player.view];\n\n{% endcodeblock %}\n\n\n#### &emsp;&emsp;4.1.3 模拟HLS(点播)  \n使用ffmepg对视频编码  \n准备一个视频文件，终端cd到该文件所在的目录：\n{% codeblock %}\n    Hmily$ cd /Users/Hmily/Desktop/hls\n    Hmily$ ls\n    mtv.mp4\n\n    //编码切片\n    Hmily$ ffmpeg -i mtv.mp4 -c:v libx264 -c:a copy -f hls mtv.m3u8\n\n    //接下来是漫长的等待...  \n    //ffmpeg正在将mtv.mp4切成一个个很小的ts文件，并生成一个mtv.m3u8的索引文件。\n    //编码完成以后\n    Hmily$ ls \n    mtv.mp4 \tmtv.m3u8    mtv12.ts\tmtv19.ts\tmtv25.ts\t\n    mtv4.ts \tmtv13.ts\tmtv2.ts\t\tmtv26.ts\tmtv5.ts\n    mtv14.ts\tmtv20.ts\tmtv27.ts\tmtv6.ts     mtv30.ts\n    mtv0.ts\t\tmtv15.ts\tmtv21.ts\tmtv28.ts\tmtv7.ts\n    mtv1.ts\t\tmtv16.ts\tmtv22.ts\tmtv29.ts\tmtv8.ts\n    mtv10.ts\tmtv17.ts\tmtv23.ts\tmtv3.ts\t\tmtv9.ts\n    mtv11.ts\tmtv18.ts\tmtv24.ts\t\n{% endcodeblock %}\n\n播放：\n切片完成以后，将hls文件夹拷贝到/usr/local/var/www目录下。  \n使用Safari播放：打开Safari，输入\"http://localhost:9090/hls/mtv.m3u8\"，回车。（这里localhost是本机IP地址：10.3.9.103）\niOS自带m3u8解码播放功能，打开Safari，输入\"http://10.3.9.103:9090/hls/mtv.m3u8\"也可以进行播放，或者在代码中使用UIWebView加载也是可以播放的。\n\n\n\n\n\n### &emsp;&emsp;4.2、iOS代码推流测试  \n#### &emsp;&emsp;4.2.1 添加iOS推流代码\n添加LFLiveKit库\n{% codeblock %}\n    #source 'https://github.com/CocoaPods/Specs.git'\n    #source <your private repo containing ijkplayer, FFmpeg4ijkplayer-ios-bin>\n\n    target ‘HLS’ do\n        platform :ios, '8.0'\n        pod 'SDWebImage', '~> 3.7.3'\n        pod 'LFLiveKit', '~> 2.5'\n    end\n{% endcodeblock %}\n\n添加OC代码  \nLivePreviewController.h\n{% codeblock lang:objc %}\n//  Created by Hmily on 2016/12/5.\n//  Copyright © 2016年 Hmily. All rights reserved.\n//\n\n#import <UIKit/UIKit.h>\n\n@interface LivePreviewController : UIViewController\n\n@end \n{% endcodeblock %}\n\n\nLivePreviewController.m\n{% codeblock lang:objc %}\n//  Created by Hmily on 2016/12/5.\n//  Copyright © 2016年 Hmily. All rights reserved.\n//\n\n#import \"LivePreviewController.h\"\n#import \"LFLiveKit.h\"\n\n@interface LivePreviewController ()<LFLiveSessionDelegate>\n\n@property (nonatomic, strong) UIButton *startLiveButton;\n@property (nonatomic, strong) LFLiveSession *session;\n@property (nonatomic, strong) UILabel *stateLabel;\n@property (nonatomic, copy) NSString * streamUrl;//推流的地址\n\n@end\n\n@implementation LivePreviewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor yellowColor];\n    [self requestAccessForVideo];\n    [self requestAccessForAudio];\n    [self.view addSubview:self.stateLabel];\n    [self.view addSubview:self.startLiveButton];\n\n    self.session = [[LFLiveSession alloc] initWithAudioConfiguration:[LFLiveAudioConfiguration defaultConfiguration]\n                                                  videoConfiguration:[LFLiveVideoConfiguration defaultConfiguration]\n                                                         captureType:LFLiveCaptureDefaultMask];\n\n    _session.delegate = self;\n    _session.showDebugInfo = NO;\n    _session.preView = self.view;\n\n    //self.streamUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";//网上现的RTMP服务器，无需配置本地服务器\n    //self.streamUrl = @\"rtmp://10.3.9.103:9090/rmspApp/133009\";//自己搭建的本地RTMP服务器\n    self.streamUrl = @\"http://10.3.9.103:9090/hls/133009\";//HLS本地服务器\n}\n\n\n#pragma mark - UI\n//TODO：直播按钮\n- (UIButton *)startLiveButton {\n    if (!_startLiveButton) {\n        self.startLiveButton = [UIButton buttonWithType:UIButtonTypeCustom];\n        CGRect frame = CGRectZero;\n        frame.size = CGSizeMake(CGRectGetWidth(self.view.bounds) - 60, 44);\n        frame.origin = CGPointMake(30, CGRectGetHeight(self.view.bounds) - 90);\n        _startLiveButton.frame = frame;\n        _startLiveButton.layer.cornerRadius = CGRectGetHeight(frame)/2;\n        [_startLiveButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n        [_startLiveButton.titleLabel setFont:[UIFont systemFontOfSize:16]];\n        [_startLiveButton setTitle:@\"开始直播\" forState:UIControlStateNormal];\n        [_startLiveButton setBackgroundColor:[UIColor colorWithRed:50 green:32 blue:245 alpha:1]];\n        _startLiveButton.exclusiveTouch = YES;\n        [_startLiveButton addTarget:self\n                             action:@selector(startLiveButtonClick:)\n                   forControlEvents:UIControlEventTouchUpInside];\n        }\n    return _startLiveButton;\n}\n\n#pragma mark - 事件响应\n- (void)startLiveButtonClick:(UIButton *)startLiveButton{\n    _startLiveButton.selected = !_startLiveButton.selected;\n    if (_startLiveButton.selected) {\n        [_startLiveButton setTitle:@\"结束直播\" forState:UIControlStateNormal];\n        LFLiveStreamInfo *stream = [LFLiveStreamInfo new];\n        //stream.url = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555\";\n\n        //stream.url = @\"rtmp://10.3.9.103:1990/liveApp/abc\";//RTMP\n        //stream.url = @\"rtmp://192.168.2.107:1990/liveApp/abc\";//RTMP\n        stream.url = @\"http://10.3.9.103:1990/hls/abc\";//HLS\n        //stream.url = @\"http://192.168.2.107:1990/hls/abc\";//HLS\n        [_session startLive:stream];\n    } else {\n        [_startLiveButton setTitle:@\"开始直播\" forState:UIControlStateNormal];\n        [_session stopLive];\n    }\n}\n\n#pragma mark - 设备是否可用\n//TODO:判断视频设备是否可用\n- (void)requestAccessForVideo {\n    __weak typeof(self) weakSelf = self;\n    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];\n    switch (status) {\n        case AVAuthorizationStatusNotDetermined: {\n            // 许可对话没有出现，发起授权许可\n            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {\n                if (granted) {\n                    dispatch_async(dispatch_get_main_queue(), ^{\n                        [weakSelf.session setRunning:YES];\n                    });\n                }\n            }];\n            break;\n        }\n        case AVAuthorizationStatusAuthorized: {\n        // 已经开启授权，可继续\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [weakSelf.session setRunning:YES];\n            });\n            break;\n        }\n        case AVAuthorizationStatusDenied:\n        case AVAuthorizationStatusRestricted:{\n        // 用户明确地拒绝授权，或者相机设备无法访问\n            break;\n        }\n        default:{\n            break;\n        }\n    }\n}\n\n//TODO:判断音频设备是否可用\n- (void)requestAccessForAudio {\n    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];\n    switch (status) {\n        case AVAuthorizationStatusNotDetermined: {\n        // 许可对话没有出现，发起授权许可\n            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeAudio completionHandler:^(BOOL granted) {\n            }];\n            break;\n        }\n        case AVAuthorizationStatusAuthorized: {\n        // 已经开启授权\n            break;\n        }\n        case AVAuthorizationStatusDenied:\n        case AVAuthorizationStatusRestricted:{\n        // 用户明确地拒绝授权，或者音频设备无法访问\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n#pragma mark - 代理方法\n#pragma mark - LFStreamingSessionDelegate\n/** 直播状态回调 */\n- (void)liveSession:(nullable LFLiveSession *)session liveStateDidChange:(LFLiveState)state {\n    NSLog(@\"%s\", __FUNCTION__);\n    switch (state) {\n        case LFLiveReady:\n            _stateLabel.text = @\"未连接\";\n            break;\n        case LFLivePending:\n            _stateLabel.text = @\"连接中\";\n            break;\n        case LFLiveStart:\n            _stateLabel.text = @\"已连接\";\n            break;\n        case LFLiveError:\n            _stateLabel.text = @\"连接错误\";\n            break;\n        case LFLiveStop:\n            _stateLabel.text = @\"未连接\";\n            break;\n        default:\n            break;\n    }\n}\n\n- (void)liveSession:(nullable LFLiveSession *)session debugInfo:(nullable LFLiveDebug *)debugInfo {\n    NSLog(@\"%s\", __FUNCTION__);\n}\n\n- (void)liveSession:(nullable LFLiveSession *)session errorCode:(LFLiveSocketErrorCode)errorCode {\n    NSLog(@\"%s\", __FUNCTION__);\n}\n\n\n@end\n\n{% endcodeblock %}\n\n#### &emsp;&emsp;4.2.2 模拟rtmp直播  \n    将代码中的self.streamUrl设置为\n    rtmp://10.3.9.10:9090/rmspApp/133009\n{% codeblock lang:objc %}\n    //推流\n    //将代码中的self.streamUrl设置为rtmp://10.3.9.10:9090/rmspApp/133009\n    //直播会有多个直播室，这里随便弄一个编号133009模拟\n    self.streamUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";//自己搭建的本地服务器\n\n    //如果本地服务器还没有配置好，可以使用网上开源的一个地址进行测试\n    //self.streamUrl = @\"rtmp://live.hkstv.hk.lxdns.com:1935/live/133009\";//开源的RTMP服务器(更改房间号就可以了)\n\n\n    //播放\n    //使用FLV播放\n    //File -> Open Network…\n    //RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009\n\n    //iOS使用ijkplayer播放\n    //NSString * videoUrl = @\"rtmp://10.3.9.10:9090/rmspApp/133009\";\n    //self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n    //[_player prepareToPlay];\n    //[self.view addSubview:_player.view];\n{% endcodeblock %}\n\n\n\n\n#### &emsp;&emsp;4.2.2 模拟HLS直播\n{% codeblock lang:objc %}\n//推流\n//将代码中的self.streamUrl设置为http://10.3.9.103:9088/hls/133009\n//直播会有多个直播室，这里随便弄一个编号133009模拟\n//注意拉流的端口号要与配置文件中的端口号一致（参见3.3）\nself.streamUrl = @\"http://10.3.9.103:9088/hls/133009\";//HLS本地服务器\n\n\n//播放\n//使用FLV播放\n//File -> Open Network…\n//RUL中输入  http://10.3.9.103:9088/hls/133009.m3u8\n\n//使用Safari播放\n//在地址栏中输入  http://10.3.9.103:9088/hls/133009.m3u8\n\n//iOS使用ijkplayer播放\n//NSString * videoUrl = @\"http://10.3.9.103:9088/hls/133009.m3u8\";\n//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];\n//[_player prepareToPlay];\n//[self.view addSubview:_player.view];\n{% endcodeblock %}\n\n代码事例请前往github下载：https://github.com/xudusheng/Http-Live-Streaming 。  \n后面会陆陆续续把相关的理论知识补上，请继续关注。\n\n\n","slug":"搭建一个简易的直播APP（iOS版）","published":1,"updated":"2021-05-16T12:11:10.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckor8h1dq0014xn8n1e4t2viu","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###  目录</span><br><span class=\"line\">1、写在前面</span><br><span class=\"line\">2、播放：ijkplayer、VLC</span><br><span class=\"line\">    2.1、使用VLC进行播放</span><br><span class=\"line\">    2.2、iOS集成ijkplayer进行播放</span><br><span class=\"line\">        2.2.1  编译IJKMediaPlayer工程</span><br><span class=\"line\">        2.2.2  ijkplayer集成</span><br><span class=\"line\">        2.2.1  导出IJKMediaFramework.frameword</span><br><span class=\"line\">    2.3、编写iOS代码</span><br><span class=\"line\">3、服务器：nginx+rtmp+ffmpeg</span><br><span class=\"line\">    3.1、安装Homebrew</span><br><span class=\"line\">    3.2、安装nginx</span><br><span class=\"line\">    3.3、配置rtmp</span><br><span class=\"line\">    3.4、配置HLS（Http Live Streaming）</span><br><span class=\"line\">4、推流测试（直播模拟）</span><br><span class=\"line\">    4.1、使用ffmepg推流测试</span><br><span class=\"line\">        4.1.1 安装ffmepg</span><br><span class=\"line\">        4.1.2 模拟rtmp直播</span><br><span class=\"line\">        4.1.3 模拟HLS点播</span><br><span class=\"line\">    4.2、iOS代码推流测试</span><br><span class=\"line\">        4.2.1 添加iOS推流代码</span><br><span class=\"line\">        4.2.1 模拟rtmp直播</span><br><span class=\"line\">        4.2.2 模拟HLS直播</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>&emsp;&emsp;最近又重新翻看了一下iOS相关的点播与直播资料，也踩了不少坑。网上也有不少相关资料，但是完整直播流程一直走不通，要么是电脑推流手机播放，要么是电脑推流电脑播放，至于手机推流的完整demo相对较少，无法很直观的体会完整的手机直播，即手机推流与手机播放。<br>&emsp;&emsp;本例将借助nginx+rtmp+ffmpeg搭建一个简单的直播系统，通过手机采集音视频，经过简单的图像处理和编码，再将流推到自己搭建的服务器上（顺带介绍一下电脑推流），最后通过手机和电脑进行播放了。<br>&emsp;&emsp;一个完整的直播系统需要涉及到的技术及流程主要包括以下方面：</p>\n<pre><code>采集 =&gt; 图像处理 =&gt; 编码 =&gt; 推流 =&gt; CDN分发 =&gt; 拉流 =&gt; 解码 =&gt; 播放 =&gt; 聊天互动。    \n</code></pre>\n<p>&emsp;&emsp;在本例中，采集=&gt;滤镜处理=&gt;编码=&gt;推流由LFLiveKit来完成，其中图像处理交给GPUImage库完成，而LFLiveKit已经集成了GPUImage库；CDN分发就是搭建的本地服务器；拉流=&gt;解码=&gt;播放由ijkplayer库来完成；聊天互动属于IM范畴，这里就讨论了，有兴趣的朋友可以自行搜索。这里重点是操作，没有太多涉及理论的东西，目的是希望通过一个简单的例子，加深对直播的理解。后续也会慢慢补上直播中各个技术的理论知识与demo。</p>\n<h2 id=\"2、播放环境搭建：ijkplayer、VLC\"><a href=\"#2、播放环境搭建：ijkplayer、VLC\" class=\"headerlink\" title=\"2、播放环境搭建：ijkplayer、VLC\"></a>2、播放环境搭建：ijkplayer、VLC</h2><p>&emsp;&emsp; VLC：电脑版的播放器，用于模拟在电脑端播放。<br>&emsp;&emsp; ijkplayer：是基于FFmpeg的跨平台播放器框架，github地址：<a href=\"https://github.com/Bilibili/ijkplayer%EF%BC%8C\">https://github.com/Bilibili/ijkplayer，</a> iOS版的播放器将使用ijkplayer框架进行集成。<br>&emsp;&emsp; 先提供一个播放源数据：<a href=\"http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1\">http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1</a>, 复制链接到浏览器中打开，会返回一个json格式的数据，其中一个stream_addr的值就是一个播放源。（感谢@袁峥Seemygo提供）。</p>\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_1.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-2-1、Mac端使用VLC进行播放\"><a href=\"#emsp-emsp-2-1、Mac端使用VLC进行播放\" class=\"headerlink\" title=\"&emsp;&emsp;2.1、Mac端使用VLC进行播放\"></a>&emsp;&emsp;2.1、Mac端使用VLC进行播放</h3><p>&emsp;&emsp;百度下载mac版的VLC进行安装，打开VLC，File -&gt; Open Network…<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_7.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-2-2、iOS集成ijkplayer\"><a href=\"#emsp-emsp-2-2、iOS集成ijkplayer\" class=\"headerlink\" title=\"&emsp;&emsp;2.2、iOS集成ijkplayer\"></a>&emsp;&emsp;2.2、iOS集成ijkplayer</h3><h4 id=\"emsp-emsp-2-2-1、ijkplayer集成\"><a href=\"#emsp-emsp-2-2-1、ijkplayer集成\" class=\"headerlink\" title=\"&emsp;&emsp;2.2.1、ijkplayer集成\"></a>&emsp;&emsp;2.2.1、ijkplayer集成</h4><h5 id=\"emsp-emsp-a-gt-下载ijkplayer源码：-下载地址-https-github-com-Bilibili-ijkplayer\"><a href=\"#emsp-emsp-a-gt-下载ijkplayer源码：-下载地址-https-github-com-Bilibili-ijkplayer\" class=\"headerlink\" title=\"&emsp;&emsp; a&gt; 下载ijkplayer源码：(下载地址:https://github.com/Bilibili/ijkplayer)\"></a>&emsp;&emsp; a&gt; 下载ijkplayer源码：(下载地址:<a href=\"https://github.com/Bilibili/ijkplayer\">https://github.com/Bilibili/ijkplayer</a>)</h5><h5 id=\"emsp-emsp-b-gt-导入ffmpeg\"><a href=\"#emsp-emsp-b-gt-导入ffmpeg\" class=\"headerlink\" title=\"&emsp;&emsp; b&gt; 导入ffmpeg\"></a>&emsp;&emsp; b&gt; 导入ffmpeg</h5><p>&emsp;&emsp;ijkplayer是基于ffmpeg这个库的，因此需要导入ffmpeg库<br>&emsp;&emsp;打开终端，cd到ijkplayer所在目录，可以看到init-ios.sh的脚本文件，运行脚本文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./init-ios.sh</span></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;等待一段时间….运行完成以后，ios文件夹下面会多出来四个文件夹，分别是ffmpeg-arm64、ffmpeg-armv7、ffmpeg-i386、ffmpeg-x86_64。  </p>\n<h5 id=\"emsp-emsp-c-gt-编译ffmpeg库\"><a href=\"#emsp-emsp-c-gt-编译ffmpeg库\" class=\"headerlink\" title=\"&emsp;&emsp; c&gt; 编译ffmpeg库\"></a>&emsp;&emsp; c&gt; 编译ffmpeg库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依次执行</span><br><span class=\"line\">//进入ios文件夹</span><br><span class=\"line\">$ cd ios</span><br><span class=\"line\"></span><br><span class=\"line\">//删除一些文件和文件夹，为编译ffmpeg.sh做准备，在编译ffmpeg.sh的时候，会自动创建刚刚删除的那些文件，为避免文件名冲突，因此在编译ffmpeg.sh之前先删除等会会自动创建的文件夹或者文件</span><br><span class=\"line\">$ ./compile-ffmpeg.sh clean</span><br><span class=\"line\"></span><br><span class=\"line\">//真正的编译各个平台的ffmpeg库，并生成所有平台的通用库。</span><br><span class=\"line\">$ ./compile-ffmpeg.sh all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp; 双击进入ios文件夹，打开IJKMediaPlayer工程，查看Class-IJKFFMoviePlayerController-ffmpeg-lib下的.a文件，如果文件一片红，说明ffmpeg的编译失败，请重复b、c操作。<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_8.png\" alt=\"image\"></p>\n<h5 id=\"emsp-emsp-d-gt-编译IJKMediaFramework\"><a href=\"#emsp-emsp-d-gt-编译IJKMediaFramework\" class=\"headerlink\" title=\"&emsp;&emsp; d&gt; 编译IJKMediaFramework\"></a>&emsp;&emsp; d&gt; 编译IJKMediaFramework</h5><p>&emsp;&emsp;集成ijkplayer的方法有两种，一种是将以上运行成功的IJKMediaPlayer工程中的IJKMediaPlayer.xcodeproj直接导入目标工程，在这里不做介绍;<br>&emsp;&emsp;另外一种就是将ijkplayer打包成framework导入工程。  </p>\n<h6 id=\"emsp-emsp-e-1-打开IJKMediaPlayer工程\"><a href=\"#emsp-emsp-e-1-打开IJKMediaPlayer工程\" class=\"headerlink\" title=\"&emsp;&emsp; e.1 打开IJKMediaPlayer工程\"></a>&emsp;&emsp; e.1 打开IJKMediaPlayer工程</h6><h6 id=\"emsp-emsp-e-2-设置工程的scheme\"><a href=\"#emsp-emsp-e-2-设置工程的scheme\" class=\"headerlink\" title=\"&emsp;&emsp; e.2 设置工程的scheme\"></a>&emsp;&emsp; e.2 设置工程的scheme</h6><p>选择product-Scheme-Edit Scheme<br>选择run下面的Build Configuration为release，如图<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_2.png\" alt=\"image\"></p>\n<h6 id=\"emsp-emsp-e-3-设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework-framework，进入finder，如图\"><a href=\"#emsp-emsp-e-3-设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework-framework，进入finder，如图\" class=\"headerlink\" title=\"&emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图\"></a>&emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图</h6><p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_6.png\" alt=\"image\"></p>\n<p>Release-iphoneos是真机版本的framework，只能跑真机，不能跑模拟器；<br>Release-iphonesimulator是模拟器版本的framework，只能跑模拟器，不能跑真机；<br>如果希望真机与模拟器都能运行，那么就需要对这两个framework进行合并。  </p>\n<h6 id=\"emsp-emsp-e-4-合并真机与模拟器版本的framework\"><a href=\"#emsp-emsp-e-4-合并真机与模拟器版本的framework\" class=\"headerlink\" title=\"&emsp;&emsp; e.4 合并真机与模拟器版本的framework\"></a>&emsp;&emsp; e.4 合并真机与模拟器版本的framework</h6><p>//注意：合并的目标是<br>Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework<br>Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//合并代码</span><br><span class=\"line\">//$ lipo -create &quot;真机版路径&quot; &quot;模拟器版路径&quot; -output &quot;合并后的版本路径&quot;</span><br><span class=\"line\">//比如我的：</span><br><span class=\"line\">$ lipo -create /Users/Hmily/Desktop/framework/Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework /Users/Hmily/Desktop/framework/Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output /Users/Hmily/Desktop/framework/IJKMediaFramework</span><br></pre></td></tr></table></figure>\n\n<p>复制Release-iphoneos文件夹，粘贴并命名为Release-iphonesimulator-OS<br>将Release-iphonesimulator-OS/IJKMediaFramework.framework/IJKMediaFramework<br>替换为刚刚合并生成的IJKMediaFramework<br>至此，真机与模拟器版的framework制作完成。</p>\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_3.png\" alt=\"image\"></p>\n<h6 id=\"emsp-emsp-e-5-将IJKMediaFramework-framework集成到xcode工程中\"><a href=\"#emsp-emsp-e-5-将IJKMediaFramework-framework集成到xcode工程中\" class=\"headerlink\" title=\"&emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中\"></a>&emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中</h6><p>将IJKMediaFramework.framework添加到自己的工程中，并添加以下库支持</p>\n<pre><code>AudioToolbox.framework         \nAVFoundation.framework\nCoreMedia.framework\nCoreVideo.framework\nlibbz2.tbd\nlibz.tbd\nMediaPlayer.framework\nMobileCoreServices.framework\nOpenGLES.framework\nVideoToolbox.framework\n</code></pre>\n<h3 id=\"emsp-emsp-2-3、编写iOS代码\"><a href=\"#emsp-emsp-2-3、编写iOS代码\" class=\"headerlink\" title=\"&emsp;&emsp;2.3、编写iOS代码\"></a>&emsp;&emsp;2.3、编写iOS代码</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> * videoUrl = <span class=\"keyword\">self</span>.videoInfo[<span class=\"string\">@&quot;stream_addr&quot;</span>];</span><br><span class=\"line\">    <span class=\"comment\">//videoUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    [_player prepareToPlay];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:_player.view];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</span><br><span class=\"line\">    [_player pause];</span><br><span class=\"line\">    [_player stop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dealloc&#123;</span><br><span class=\"line\">    _player = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、服务器搭建：nginx-rtmp-ffmpeg\"><a href=\"#3、服务器搭建：nginx-rtmp-ffmpeg\" class=\"headerlink\" title=\"3、服务器搭建：nginx+rtmp+ffmpeg\"></a>3、服务器搭建：nginx+rtmp+ffmpeg</h2><p>上面我们完成了播放器的搭建，接下来我们搭建一个属于自己的服务器。</p>\n<h3 id=\"emsp-emsp-3-1、安装Homebrew\"><a href=\"#emsp-emsp-3-1、安装Homebrew\" class=\"headerlink\" title=\"&emsp;&emsp;3.1、安装Homebrew\"></a>&emsp;&emsp;3.1、安装Homebrew</h3><p>打开终端，输入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"emsp-emsp-3-2、安装nginx\"><a href=\"#emsp-emsp-3-2、安装nginx\" class=\"headerlink\" title=\"&emsp;&emsp;3.2、安装nginx\"></a>&emsp;&emsp;3.2、安装nginx</h3><p>依次输入以下的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从github下载Nginx到本地,增加home-brew对nginx的扩展：   </span><br><span class=\"line\">$ brew tap homebrew/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装Nginx服务器和rtmp模块:</span><br><span class=\"line\">$ brew install nginx-full --with-rtmp-module</span><br><span class=\"line\"></span><br><span class=\"line\">//启动nginx服务器</span><br><span class=\"line\">$ nginx</span><br></pre></td></tr></table></figure>\n<p>在浏览器地址栏输入：<a href=\"http://localhost:8080/\">http://localhost:8080</a> （直接点击）<br>如果出现下图, 则表示安装成功。<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_10.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-3-3、配置rtmp\"><a href=\"#emsp-emsp-3-3、配置rtmp\" class=\"headerlink\" title=\"&emsp;&emsp;3.3、配置rtmp\"></a>&emsp;&emsp;3.3、配置rtmp</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看nginx信息</span><br><span class=\"line\">$ brew info nginx-full</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_9.png\" alt=\"image\"></p>\n<p>打开/usr/local/etc/nginx/nginx.conf文件，在最后面插入以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 9090;            #监听接口号</span><br><span class=\"line\"></span><br><span class=\"line\">        #RTMP协议</span><br><span class=\"line\">        application rmspApp &#123;   #app名称</span><br><span class=\"line\">            live on;</span><br><span class=\"line\">            record off;          #不记录数据</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #HLS协议，如果不需要HLS协议，这部分可以删除</span><br><span class=\"line\">        #application hls&#123;</span><br><span class=\"line\">        #   live on;             #开启实时</span><br><span class=\"line\">        #   hls on;              #开始HLS</span><br><span class=\"line\">        #   hls_fragment 1s;     #切片时长</span><br><span class=\"line\">        #   hls_path /usr/local/var/www/hls;     #ts文件保存路劲</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">//RTMP推流地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）</span><br><span class=\"line\">//RTMP播放地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"emsp-emsp-3-3、配置HLS-Http-Live-Streaming\"><a href=\"#emsp-emsp-3-3、配置HLS-Http-Live-Streaming\" class=\"headerlink\" title=\"&emsp;&emsp;3.3、配置HLS(Http Live Streaming)\"></a>&emsp;&emsp;3.3、配置HLS(Http Live Streaming)</h3><p>打开/usr/local/etc/nginx/nginx.conf文件，找到配置http的部分，在’{}’内插入以下配置信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个配置为了`客户端`能够以http协议获取HLS的拉流</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen:9088;</span><br><span class=\"line\">    location /hls &#123;</span><br><span class=\"line\">        types &#123;</span><br><span class=\"line\">            application/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">            video/mp2t ts;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        add_header Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到rtmp下的server，在’{ }’中增加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#HLS协议</span><br><span class=\"line\">application hls&#123;</span><br><span class=\"line\">    live on;             #开启实时</span><br><span class=\"line\">    hls on;              #开始HLS</span><br><span class=\"line\">    hls_fragment 1s;     #切片时长</span><br><span class=\"line\">    hls_path /usr/local/var/www/hls;     #ts文件保存路劲</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">//HLS推流地址：http://192.168.2.107:9090/hls/abc</span><br><span class=\"line\">//HLS播放地址：http://192.168.2.107:9088/hls/abc.m3u8(主要端口号的变化)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><code>注意</code>：HLS中，我们想把推流生成的ts文件存放在<code>指定的目录</code>下，比如”/tmp/hls”  </p>\n<pre><code>application hls &#123;\n    live on;\n    hls on;\n    hls_path /tmp/hls;\n&#125;\n</code></pre>\n<p>那么，我们也需要在http–&gt;server中对root 路径更改为：/tmp 。要不然，会拉不到流。</p>\n<pre><code>location /hls &#123;\n    types &#123;\n    application/vnd.apple.mpegurl m3u8;\n    video/mp2t ts;\n&#125;\nroot html;===&gt;更改为root /tmp\n//root html 是指使用当前nginx服务器根目录所在位置,指向的是 /usr/local/var/www 这个目录\n</code></pre>\n<p>至此服务器的配置就算完成了，接下来我们进行推流，并进行直播测试</p>\n<h2 id=\"4、推流测试\"><a href=\"#4、推流测试\" class=\"headerlink\" title=\"4、推流测试\"></a>4、推流测试</h2><h3 id=\"emsp-emsp-4-1、使用ffmepg推流测试\"><a href=\"#emsp-emsp-4-1、使用ffmepg推流测试\" class=\"headerlink\" title=\"&emsp;&emsp;4.1、使用ffmepg推流测试\"></a>&emsp;&emsp;4.1、使用ffmepg推流测试</h3><h4 id=\"emsp-emsp-4-1-1-安装ffmepg\"><a href=\"#emsp-emsp-4-1-1-安装ffmepg\" class=\"headerlink\" title=\"&emsp;&emsp;4.1.1 安装ffmepg\"></a>&emsp;&emsp;4.1.1 安装ffmepg</h4><p>终端输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"emsp-emsp-4-2-1-模拟rtmp推流-直播\"><a href=\"#emsp-emsp-4-2-1-模拟rtmp推流-直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.1 模拟rtmp推流(直播)\"></a>&emsp;&emsp;4.2.1 模拟rtmp推流(直播)</h4><p>使用ffmepg对视频编码<br>准备一个视频文件，终端cd到该文件所在的目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hmily$ cd /Users/Hmily/Desktop/rtmp</span><br><span class=\"line\">Hmily$ ls</span><br><span class=\"line\">mtv.mp4</span><br><span class=\"line\"></span><br><span class=\"line\">//推流</span><br><span class=\"line\">Hmily$ ffmpeg -re -i mtv.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://10.3.9.10:9090/rmspApp/133009</span><br><span class=\"line\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span><br><span class=\"line\"></span><br><span class=\"line\">//播放：</span><br><span class=\"line\">//使用FLV播放</span><br><span class=\"line\">//File -&gt; Open Network…</span><br><span class=\"line\">//RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009</span><br><span class=\"line\"></span><br><span class=\"line\">//iOS使用ijkplayer播放</span><br><span class=\"line\">//NSString * videoUrl = @&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;;</span><br><span class=\"line\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span><br><span class=\"line\">//[_player prepareToPlay];</span><br><span class=\"line\">//[self.view addSubview:_player.view];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"emsp-emsp-4-1-3-模拟HLS-点播\"><a href=\"#emsp-emsp-4-1-3-模拟HLS-点播\" class=\"headerlink\" title=\"&emsp;&emsp;4.1.3 模拟HLS(点播)\"></a>&emsp;&emsp;4.1.3 模拟HLS(点播)</h4><p>使用ffmepg对视频编码<br>准备一个视频文件，终端cd到该文件所在的目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hmily$ cd /Users/Hmily/Desktop/hls</span><br><span class=\"line\">Hmily$ ls</span><br><span class=\"line\">mtv.mp4</span><br><span class=\"line\"></span><br><span class=\"line\">//编码切片</span><br><span class=\"line\">Hmily$ ffmpeg -i mtv.mp4 -c:v libx264 -c:a copy -f hls mtv.m3u8</span><br><span class=\"line\"></span><br><span class=\"line\">//接下来是漫长的等待...  </span><br><span class=\"line\">//ffmpeg正在将mtv.mp4切成一个个很小的ts文件，并生成一个mtv.m3u8的索引文件。</span><br><span class=\"line\">//编码完成以后</span><br><span class=\"line\">Hmily$ ls </span><br><span class=\"line\">mtv.mp4 \tmtv.m3u8    mtv12.ts\tmtv19.ts\tmtv25.ts\t</span><br><span class=\"line\">mtv4.ts \tmtv13.ts\tmtv2.ts\t\tmtv26.ts\tmtv5.ts</span><br><span class=\"line\">mtv14.ts\tmtv20.ts\tmtv27.ts\tmtv6.ts     mtv30.ts</span><br><span class=\"line\">mtv0.ts\t\tmtv15.ts\tmtv21.ts\tmtv28.ts\tmtv7.ts</span><br><span class=\"line\">mtv1.ts\t\tmtv16.ts\tmtv22.ts\tmtv29.ts\tmtv8.ts</span><br><span class=\"line\">mtv10.ts\tmtv17.ts\tmtv23.ts\tmtv3.ts\t\tmtv9.ts</span><br><span class=\"line\">mtv11.ts\tmtv18.ts\tmtv24.ts\t</span><br></pre></td></tr></table></figure>\n\n<p>播放：<br>切片完成以后，将hls文件夹拷贝到/usr/local/var/www目录下。<br>使用Safari播放：打开Safari，输入”<a href=\"http://localhost:9090/hls/mtv.m3u8&quot;%EF%BC%8C%E5%9B%9E%E8%BD%A6%E3%80%82%EF%BC%88%E8%BF%99%E9%87%8Clocalhost%E6%98%AF%E6%9C%AC%E6%9C%BAIP%E5%9C%B0%E5%9D%80%EF%BC%9A10.3.9.103%EF%BC%89\">http://localhost:9090/hls/mtv.m3u8&quot;，回车。（这里localhost是本机IP地址：10.3.9.103）</a><br>iOS自带m3u8解码播放功能，打开Safari，输入”<a href=\"http://10.3.9.103:9090/hls/mtv.m3u8&quot;%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%92%AD%E6%94%BE%EF%BC%8C%E6%88%96%E8%80%85%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8UIWebView%E5%8A%A0%E8%BD%BD%E4%B9%9F%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E7%9A%84%E3%80%82\">http://10.3.9.103:9090/hls/mtv.m3u8&quot;也可以进行播放，或者在代码中使用UIWebView加载也是可以播放的。</a></p>\n<h3 id=\"emsp-emsp-4-2、iOS代码推流测试\"><a href=\"#emsp-emsp-4-2、iOS代码推流测试\" class=\"headerlink\" title=\"&emsp;&emsp;4.2、iOS代码推流测试\"></a>&emsp;&emsp;4.2、iOS代码推流测试</h3><h4 id=\"emsp-emsp-4-2-1-添加iOS推流代码\"><a href=\"#emsp-emsp-4-2-1-添加iOS推流代码\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.1 添加iOS推流代码\"></a>&emsp;&emsp;4.2.1 添加iOS推流代码</h4><p>添加LFLiveKit库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class=\"line\">#source &lt;your private repo containing ijkplayer, FFmpeg4ijkplayer-ios-bin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">target ‘HLS’ do</span><br><span class=\"line\">    platform :ios, &#x27;8.0&#x27;</span><br><span class=\"line\">    pod &#x27;SDWebImage&#x27;, &#x27;~&gt; 3.7.3&#x27;</span><br><span class=\"line\">    pod &#x27;LFLiveKit&#x27;, &#x27;~&gt; 2.5&#x27;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>添加OC代码<br>LivePreviewController.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Created by Hmily on 2016/12/5.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 Hmily. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">LivePreviewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span> </span><br></pre></td></tr></table></figure>\n\n\n<p>LivePreviewController.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Created by Hmily on 2016/12/5.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 Hmily. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;LivePreviewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;LFLiveKit.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">LivePreviewController</span> ()&lt;<span class=\"title\">LFLiveSessionDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIButton</span> *startLiveButton;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) LFLiveSession *session;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UILabel</span> *stateLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> * streamUrl;<span class=\"comment\">//推流的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">LivePreviewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> requestAccessForVideo];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> requestAccessForAudio];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.stateLabel];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.startLiveButton];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.session = [[LFLiveSession alloc] initWithAudioConfiguration:[LFLiveAudioConfiguration defaultConfiguration]</span><br><span class=\"line\">                                                  videoConfiguration:[LFLiveVideoConfiguration defaultConfiguration]</span><br><span class=\"line\">                                                         captureType:LFLiveCaptureDefaultMask];</span><br><span class=\"line\"></span><br><span class=\"line\">    _session.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    _session.showDebugInfo = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    _session.preView = <span class=\"keyword\">self</span>.view;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//self.streamUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;//网上现的RTMP服务器，无需配置本地服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//self.streamUrl = @&quot;rtmp://10.3.9.103:9090/rmspApp/133009&quot;;//自己搭建的本地RTMP服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;http://10.3.9.103:9090/hls/133009&quot;</span>;<span class=\"comment\">//HLS本地服务器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - UI</span></span><br><span class=\"line\"><span class=\"comment\">//TODO：直播按钮</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIButton</span> *)startLiveButton &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_startLiveButton) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.startLiveButton = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</span><br><span class=\"line\">        <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">        frame.size = <span class=\"built_in\">CGSizeMake</span>(<span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.view.bounds) - <span class=\"number\">60</span>, <span class=\"number\">44</span>);</span><br><span class=\"line\">        frame.origin = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">30</span>, <span class=\"built_in\">CGRectGetHeight</span>(<span class=\"keyword\">self</span>.view.bounds) - <span class=\"number\">90</span>);</span><br><span class=\"line\">        _startLiveButton.frame = frame;</span><br><span class=\"line\">        _startLiveButton.layer.cornerRadius = <span class=\"built_in\">CGRectGetHeight</span>(frame)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        [_startLiveButton setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_startLiveButton.titleLabel setFont:[<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">16</span>]];</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;开始直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_startLiveButton setBackgroundColor:[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">50</span> green:<span class=\"number\">32</span> blue:<span class=\"number\">245</span> alpha:<span class=\"number\">1</span>]];</span><br><span class=\"line\">        _startLiveButton.exclusiveTouch = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [_startLiveButton addTarget:<span class=\"keyword\">self</span></span><br><span class=\"line\">                             action:<span class=\"keyword\">@selector</span>(startLiveButtonClick:)</span><br><span class=\"line\">                   forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _startLiveButton;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 事件响应</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startLiveButtonClick:(<span class=\"built_in\">UIButton</span> *)startLiveButton&#123;</span><br><span class=\"line\">    _startLiveButton.selected = !_startLiveButton.selected;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_startLiveButton.selected) &#123;</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;结束直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        LFLiveStreamInfo *stream = [LFLiveStreamInfo new];</span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://10.3.9.103:1990/liveApp/abc&quot;;//RTMP</span></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://192.168.2.107:1990/liveApp/abc&quot;;//RTMP</span></span><br><span class=\"line\">        stream.url = <span class=\"string\">@&quot;http://10.3.9.103:1990/hls/abc&quot;</span>;<span class=\"comment\">//HLS</span></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;http://192.168.2.107:1990/hls/abc&quot;;//HLS</span></span><br><span class=\"line\">        [_session startLive:stream];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;开始直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_session stopLive];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 设备是否可用</span></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>判断视频设备是否可用</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)requestAccessForVideo &#123;</span><br><span class=\"line\">    __<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    <span class=\"built_in\">AVAuthorizationStatus</span> status = [<span class=\"built_in\">AVCaptureDevice</span> authorizationStatusForMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusNotDetermined</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 许可对话没有出现，发起授权许可</span></span><br><span class=\"line\">            [<span class=\"built_in\">AVCaptureDevice</span> requestAccessForMediaType:<span class=\"built_in\">AVMediaTypeVideo</span> completionHandler:^(<span class=\"built_in\">BOOL</span> granted) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (granted) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                        [weakSelf.session setRunning:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusAuthorized</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经开启授权，可继续</span></span><br><span class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                [weakSelf.session setRunning:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusDenied</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusRestricted</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户明确地拒绝授权，或者相机设备无法访问</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>判断音频设备是否可用</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)requestAccessForAudio &#123;</span><br><span class=\"line\">    <span class=\"built_in\">AVAuthorizationStatus</span> status = [<span class=\"built_in\">AVCaptureDevice</span> authorizationStatusForMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusNotDetermined</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 许可对话没有出现，发起授权许可</span></span><br><span class=\"line\">            [<span class=\"built_in\">AVCaptureDevice</span> requestAccessForMediaType:<span class=\"built_in\">AVMediaTypeAudio</span> completionHandler:^(<span class=\"built_in\">BOOL</span> granted) &#123;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusAuthorized</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经开启授权</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusDenied</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusRestricted</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户明确地拒绝授权，或者音频设备无法访问</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 代理方法</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - LFStreamingSessionDelegate</span></span><br><span class=\"line\"><span class=\"comment\">/** 直播状态回调 */</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session liveStateDidChange:(LFLiveState)state &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveReady:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;未连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLivePending:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;连接中&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveStart:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;已连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveError:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;连接错误&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveStop:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;未连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session debugInfo:(<span class=\"keyword\">nullable</span> LFLiveDebug *)debugInfo &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session errorCode:(LFLiveSocketErrorCode)errorCode &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"emsp-emsp-4-2-2-模拟rtmp直播\"><a href=\"#emsp-emsp-4-2-2-模拟rtmp直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.2 模拟rtmp直播\"></a>&emsp;&emsp;4.2.2 模拟rtmp直播</h4><pre><code>将代码中的self.streamUrl设置为\nrtmp://10.3.9.10:9090/rmspApp/133009\n</code></pre>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推流</span></span><br><span class=\"line\"><span class=\"comment\">//将代码中的self.streamUrl设置为rtmp://10.3.9.10:9090/rmspApp/133009</span></span><br><span class=\"line\"><span class=\"comment\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;</span>;<span class=\"comment\">//自己搭建的本地服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果本地服务器还没有配置好，可以使用网上开源的一个地址进行测试</span></span><br><span class=\"line\"><span class=\"comment\">//self.streamUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/133009&quot;;//开源的RTMP服务器(更改房间号就可以了)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//播放</span></span><br><span class=\"line\"><span class=\"comment\">//使用FLV播放</span></span><br><span class=\"line\"><span class=\"comment\">//File -&gt; Open Network…</span></span><br><span class=\"line\"><span class=\"comment\">//RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//iOS使用ijkplayer播放</span></span><br><span class=\"line\"><span class=\"comment\">//NSString * videoUrl = @&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span></span><br><span class=\"line\"><span class=\"comment\">//[_player prepareToPlay];</span></span><br><span class=\"line\"><span class=\"comment\">//[self.view addSubview:_player.view];</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"emsp-emsp-4-2-2-模拟HLS直播\"><a href=\"#emsp-emsp-4-2-2-模拟HLS直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.2 模拟HLS直播\"></a>&emsp;&emsp;4.2.2 模拟HLS直播</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推流</span></span><br><span class=\"line\"><span class=\"comment\">//将代码中的self.streamUrl设置为http://10.3.9.103:9088/hls/133009</span></span><br><span class=\"line\"><span class=\"comment\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span></span><br><span class=\"line\"><span class=\"comment\">//注意拉流的端口号要与配置文件中的端口号一致（参见3.3）</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;http://10.3.9.103:9088/hls/133009&quot;</span>;<span class=\"comment\">//HLS本地服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//播放</span></span><br><span class=\"line\"><span class=\"comment\">//使用FLV播放</span></span><br><span class=\"line\"><span class=\"comment\">//File -&gt; Open Network…</span></span><br><span class=\"line\"><span class=\"comment\">//RUL中输入  http://10.3.9.103:9088/hls/133009.m3u8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用Safari播放</span></span><br><span class=\"line\"><span class=\"comment\">//在地址栏中输入  http://10.3.9.103:9088/hls/133009.m3u8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//iOS使用ijkplayer播放</span></span><br><span class=\"line\"><span class=\"comment\">//NSString * videoUrl = @&quot;http://10.3.9.103:9088/hls/133009.m3u8&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span></span><br><span class=\"line\"><span class=\"comment\">//[_player prepareToPlay];</span></span><br><span class=\"line\"><span class=\"comment\">//[self.view addSubview:_player.view];</span></span><br></pre></td></tr></table></figure>\n\n<p>代码事例请前往github下载：<a href=\"https://github.com/xudusheng/Http-Live-Streaming\">https://github.com/xudusheng/Http-Live-Streaming</a> 。<br>后面会陆陆续续把相关的理论知识补上，请继续关注。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">###  目录</span><br><span class=\"line\">1、写在前面</span><br><span class=\"line\">2、播放：ijkplayer、VLC</span><br><span class=\"line\">    2.1、使用VLC进行播放</span><br><span class=\"line\">    2.2、iOS集成ijkplayer进行播放</span><br><span class=\"line\">        2.2.1  编译IJKMediaPlayer工程</span><br><span class=\"line\">        2.2.2  ijkplayer集成</span><br><span class=\"line\">        2.2.1  导出IJKMediaFramework.frameword</span><br><span class=\"line\">    2.3、编写iOS代码</span><br><span class=\"line\">3、服务器：nginx+rtmp+ffmpeg</span><br><span class=\"line\">    3.1、安装Homebrew</span><br><span class=\"line\">    3.2、安装nginx</span><br><span class=\"line\">    3.3、配置rtmp</span><br><span class=\"line\">    3.4、配置HLS（Http Live Streaming）</span><br><span class=\"line\">4、推流测试（直播模拟）</span><br><span class=\"line\">    4.1、使用ffmepg推流测试</span><br><span class=\"line\">        4.1.1 安装ffmepg</span><br><span class=\"line\">        4.1.2 模拟rtmp直播</span><br><span class=\"line\">        4.1.3 模拟HLS点播</span><br><span class=\"line\">    4.2、iOS代码推流测试</span><br><span class=\"line\">        4.2.1 添加iOS推流代码</span><br><span class=\"line\">        4.2.1 模拟rtmp直播</span><br><span class=\"line\">        4.2.2 模拟HLS直播</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"1、写在前面\"><a href=\"#1、写在前面\" class=\"headerlink\" title=\"1、写在前面\"></a>1、写在前面</h2><p>&emsp;&emsp;最近又重新翻看了一下iOS相关的点播与直播资料，也踩了不少坑。网上也有不少相关资料，但是完整直播流程一直走不通，要么是电脑推流手机播放，要么是电脑推流电脑播放，至于手机推流的完整demo相对较少，无法很直观的体会完整的手机直播，即手机推流与手机播放。<br>&emsp;&emsp;本例将借助nginx+rtmp+ffmpeg搭建一个简单的直播系统，通过手机采集音视频，经过简单的图像处理和编码，再将流推到自己搭建的服务器上（顺带介绍一下电脑推流），最后通过手机和电脑进行播放了。<br>&emsp;&emsp;一个完整的直播系统需要涉及到的技术及流程主要包括以下方面：</p>\n<pre><code>采集 =&gt; 图像处理 =&gt; 编码 =&gt; 推流 =&gt; CDN分发 =&gt; 拉流 =&gt; 解码 =&gt; 播放 =&gt; 聊天互动。    \n</code></pre>\n<p>&emsp;&emsp;在本例中，采集=&gt;滤镜处理=&gt;编码=&gt;推流由LFLiveKit来完成，其中图像处理交给GPUImage库完成，而LFLiveKit已经集成了GPUImage库；CDN分发就是搭建的本地服务器；拉流=&gt;解码=&gt;播放由ijkplayer库来完成；聊天互动属于IM范畴，这里就讨论了，有兴趣的朋友可以自行搜索。这里重点是操作，没有太多涉及理论的东西，目的是希望通过一个简单的例子，加深对直播的理解。后续也会慢慢补上直播中各个技术的理论知识与demo。</p>\n<h2 id=\"2、播放环境搭建：ijkplayer、VLC\"><a href=\"#2、播放环境搭建：ijkplayer、VLC\" class=\"headerlink\" title=\"2、播放环境搭建：ijkplayer、VLC\"></a>2、播放环境搭建：ijkplayer、VLC</h2><p>&emsp;&emsp; VLC：电脑版的播放器，用于模拟在电脑端播放。<br>&emsp;&emsp; ijkplayer：是基于FFmpeg的跨平台播放器框架，github地址：<a href=\"https://github.com/Bilibili/ijkplayer%EF%BC%8C\">https://github.com/Bilibili/ijkplayer，</a> iOS版的播放器将使用ijkplayer框架进行集成。<br>&emsp;&emsp; 先提供一个播放源数据：<a href=\"http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1\">http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1</a>, 复制链接到浏览器中打开，会返回一个json格式的数据，其中一个stream_addr的值就是一个播放源。（感谢@袁峥Seemygo提供）。</p>\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_1.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-2-1、Mac端使用VLC进行播放\"><a href=\"#emsp-emsp-2-1、Mac端使用VLC进行播放\" class=\"headerlink\" title=\"&emsp;&emsp;2.1、Mac端使用VLC进行播放\"></a>&emsp;&emsp;2.1、Mac端使用VLC进行播放</h3><p>&emsp;&emsp;百度下载mac版的VLC进行安装，打开VLC，File -&gt; Open Network…<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_7.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-2-2、iOS集成ijkplayer\"><a href=\"#emsp-emsp-2-2、iOS集成ijkplayer\" class=\"headerlink\" title=\"&emsp;&emsp;2.2、iOS集成ijkplayer\"></a>&emsp;&emsp;2.2、iOS集成ijkplayer</h3><h4 id=\"emsp-emsp-2-2-1、ijkplayer集成\"><a href=\"#emsp-emsp-2-2-1、ijkplayer集成\" class=\"headerlink\" title=\"&emsp;&emsp;2.2.1、ijkplayer集成\"></a>&emsp;&emsp;2.2.1、ijkplayer集成</h4><h5 id=\"emsp-emsp-a-gt-下载ijkplayer源码：-下载地址-https-github-com-Bilibili-ijkplayer\"><a href=\"#emsp-emsp-a-gt-下载ijkplayer源码：-下载地址-https-github-com-Bilibili-ijkplayer\" class=\"headerlink\" title=\"&emsp;&emsp; a&gt; 下载ijkplayer源码：(下载地址:https://github.com/Bilibili/ijkplayer)\"></a>&emsp;&emsp; a&gt; 下载ijkplayer源码：(下载地址:<a href=\"https://github.com/Bilibili/ijkplayer\">https://github.com/Bilibili/ijkplayer</a>)</h5><h5 id=\"emsp-emsp-b-gt-导入ffmpeg\"><a href=\"#emsp-emsp-b-gt-导入ffmpeg\" class=\"headerlink\" title=\"&emsp;&emsp; b&gt; 导入ffmpeg\"></a>&emsp;&emsp; b&gt; 导入ffmpeg</h5><p>&emsp;&emsp;ijkplayer是基于ffmpeg这个库的，因此需要导入ffmpeg库<br>&emsp;&emsp;打开终端，cd到ijkplayer所在目录，可以看到init-ios.sh的脚本文件，运行脚本文件:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./init-ios.sh</span></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;等待一段时间….运行完成以后，ios文件夹下面会多出来四个文件夹，分别是ffmpeg-arm64、ffmpeg-armv7、ffmpeg-i386、ffmpeg-x86_64。  </p>\n<h5 id=\"emsp-emsp-c-gt-编译ffmpeg库\"><a href=\"#emsp-emsp-c-gt-编译ffmpeg库\" class=\"headerlink\" title=\"&emsp;&emsp; c&gt; 编译ffmpeg库\"></a>&emsp;&emsp; c&gt; 编译ffmpeg库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依次执行</span><br><span class=\"line\">//进入ios文件夹</span><br><span class=\"line\">$ cd ios</span><br><span class=\"line\"></span><br><span class=\"line\">//删除一些文件和文件夹，为编译ffmpeg.sh做准备，在编译ffmpeg.sh的时候，会自动创建刚刚删除的那些文件，为避免文件名冲突，因此在编译ffmpeg.sh之前先删除等会会自动创建的文件夹或者文件</span><br><span class=\"line\">$ ./compile-ffmpeg.sh clean</span><br><span class=\"line\"></span><br><span class=\"line\">//真正的编译各个平台的ffmpeg库，并生成所有平台的通用库。</span><br><span class=\"line\">$ ./compile-ffmpeg.sh all</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp; 双击进入ios文件夹，打开IJKMediaPlayer工程，查看Class-IJKFFMoviePlayerController-ffmpeg-lib下的.a文件，如果文件一片红，说明ffmpeg的编译失败，请重复b、c操作。<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_8.png\" alt=\"image\"></p>\n<h5 id=\"emsp-emsp-d-gt-编译IJKMediaFramework\"><a href=\"#emsp-emsp-d-gt-编译IJKMediaFramework\" class=\"headerlink\" title=\"&emsp;&emsp; d&gt; 编译IJKMediaFramework\"></a>&emsp;&emsp; d&gt; 编译IJKMediaFramework</h5><p>&emsp;&emsp;集成ijkplayer的方法有两种，一种是将以上运行成功的IJKMediaPlayer工程中的IJKMediaPlayer.xcodeproj直接导入目标工程，在这里不做介绍;<br>&emsp;&emsp;另外一种就是将ijkplayer打包成framework导入工程。  </p>\n<h6 id=\"emsp-emsp-e-1-打开IJKMediaPlayer工程\"><a href=\"#emsp-emsp-e-1-打开IJKMediaPlayer工程\" class=\"headerlink\" title=\"&emsp;&emsp; e.1 打开IJKMediaPlayer工程\"></a>&emsp;&emsp; e.1 打开IJKMediaPlayer工程</h6><h6 id=\"emsp-emsp-e-2-设置工程的scheme\"><a href=\"#emsp-emsp-e-2-设置工程的scheme\" class=\"headerlink\" title=\"&emsp;&emsp; e.2 设置工程的scheme\"></a>&emsp;&emsp; e.2 设置工程的scheme</h6><p>选择product-Scheme-Edit Scheme<br>选择run下面的Build Configuration为release，如图<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_2.png\" alt=\"image\"></p>\n<h6 id=\"emsp-emsp-e-3-设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework-framework，进入finder，如图\"><a href=\"#emsp-emsp-e-3-设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework-framework，进入finder，如图\" class=\"headerlink\" title=\"&emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图\"></a>&emsp;&emsp; e.3 设置好scheme以后，分别选择真机和模拟器进行编译（重要：编译前记得clean一下），编译完成以后，选择Product下面的IJKMediaFramework.framework，进入finder，如图</h6><p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_6.png\" alt=\"image\"></p>\n<p>Release-iphoneos是真机版本的framework，只能跑真机，不能跑模拟器；<br>Release-iphonesimulator是模拟器版本的framework，只能跑模拟器，不能跑真机；<br>如果希望真机与模拟器都能运行，那么就需要对这两个framework进行合并。  </p>\n<h6 id=\"emsp-emsp-e-4-合并真机与模拟器版本的framework\"><a href=\"#emsp-emsp-e-4-合并真机与模拟器版本的framework\" class=\"headerlink\" title=\"&emsp;&emsp; e.4 合并真机与模拟器版本的framework\"></a>&emsp;&emsp; e.4 合并真机与模拟器版本的framework</h6><p>//注意：合并的目标是<br>Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework<br>Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//合并代码</span><br><span class=\"line\">//$ lipo -create &quot;真机版路径&quot; &quot;模拟器版路径&quot; -output &quot;合并后的版本路径&quot;</span><br><span class=\"line\">//比如我的：</span><br><span class=\"line\">$ lipo -create /Users/Hmily/Desktop/framework/Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework /Users/Hmily/Desktop/framework/Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output /Users/Hmily/Desktop/framework/IJKMediaFramework</span><br></pre></td></tr></table></figure>\n\n<p>复制Release-iphoneos文件夹，粘贴并命名为Release-iphonesimulator-OS<br>将Release-iphonesimulator-OS/IJKMediaFramework.framework/IJKMediaFramework<br>替换为刚刚合并生成的IJKMediaFramework<br>至此，真机与模拟器版的framework制作完成。</p>\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_3.png\" alt=\"image\"></p>\n<h6 id=\"emsp-emsp-e-5-将IJKMediaFramework-framework集成到xcode工程中\"><a href=\"#emsp-emsp-e-5-将IJKMediaFramework-framework集成到xcode工程中\" class=\"headerlink\" title=\"&emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中\"></a>&emsp;&emsp; e.5 将IJKMediaFramework.framework集成到xcode工程中</h6><p>将IJKMediaFramework.framework添加到自己的工程中，并添加以下库支持</p>\n<pre><code>AudioToolbox.framework         \nAVFoundation.framework\nCoreMedia.framework\nCoreVideo.framework\nlibbz2.tbd\nlibz.tbd\nMediaPlayer.framework\nMobileCoreServices.framework\nOpenGLES.framework\nVideoToolbox.framework\n</code></pre>\n<h3 id=\"emsp-emsp-2-3、编写iOS代码\"><a href=\"#emsp-emsp-2-3、编写iOS代码\" class=\"headerlink\" title=\"&emsp;&emsp;2.3、编写iOS代码\"></a>&emsp;&emsp;2.3、编写iOS代码</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> * videoUrl = <span class=\"keyword\">self</span>.videoInfo[<span class=\"string\">@&quot;stream_addr&quot;</span>];</span><br><span class=\"line\">    <span class=\"comment\">//videoUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    [_player prepareToPlay];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:_player.view];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewWillDisappear:(<span class=\"built_in\">BOOL</span>)animated&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewWillDisappear:animated];</span><br><span class=\"line\">    [_player pause];</span><br><span class=\"line\">    [_player stop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)dealloc&#123;</span><br><span class=\"line\">    _player = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、服务器搭建：nginx-rtmp-ffmpeg\"><a href=\"#3、服务器搭建：nginx-rtmp-ffmpeg\" class=\"headerlink\" title=\"3、服务器搭建：nginx+rtmp+ffmpeg\"></a>3、服务器搭建：nginx+rtmp+ffmpeg</h2><p>上面我们完成了播放器的搭建，接下来我们搭建一个属于自己的服务器。</p>\n<h3 id=\"emsp-emsp-3-1、安装Homebrew\"><a href=\"#emsp-emsp-3-1、安装Homebrew\" class=\"headerlink\" title=\"&emsp;&emsp;3.1、安装Homebrew\"></a>&emsp;&emsp;3.1、安装Homebrew</h3><p>打开终端，输入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"emsp-emsp-3-2、安装nginx\"><a href=\"#emsp-emsp-3-2、安装nginx\" class=\"headerlink\" title=\"&emsp;&emsp;3.2、安装nginx\"></a>&emsp;&emsp;3.2、安装nginx</h3><p>依次输入以下的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从github下载Nginx到本地,增加home-brew对nginx的扩展：   </span><br><span class=\"line\">$ brew tap homebrew/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">//安装Nginx服务器和rtmp模块:</span><br><span class=\"line\">$ brew install nginx-full --with-rtmp-module</span><br><span class=\"line\"></span><br><span class=\"line\">//启动nginx服务器</span><br><span class=\"line\">$ nginx</span><br></pre></td></tr></table></figure>\n<p>在浏览器地址栏输入：<a href=\"http://localhost:8080/\">http://localhost:8080</a> （直接点击）<br>如果出现下图, 则表示安装成功。<br><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_10.png\" alt=\"image\"></p>\n<h3 id=\"emsp-emsp-3-3、配置rtmp\"><a href=\"#emsp-emsp-3-3、配置rtmp\" class=\"headerlink\" title=\"&emsp;&emsp;3.3、配置rtmp\"></a>&emsp;&emsp;3.3、配置rtmp</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看nginx信息</span><br><span class=\"line\">$ brew info nginx-full</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"http://ohlldt20k.bkt.clouddn.com/hls_1_9.png\" alt=\"image\"></p>\n<p>打开/usr/local/etc/nginx/nginx.conf文件，在最后面插入以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmp &#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 9090;            #监听接口号</span><br><span class=\"line\"></span><br><span class=\"line\">        #RTMP协议</span><br><span class=\"line\">        application rmspApp &#123;   #app名称</span><br><span class=\"line\">            live on;</span><br><span class=\"line\">            record off;          #不记录数据</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #HLS协议，如果不需要HLS协议，这部分可以删除</span><br><span class=\"line\">        #application hls&#123;</span><br><span class=\"line\">        #   live on;             #开启实时</span><br><span class=\"line\">        #   hls on;              #开始HLS</span><br><span class=\"line\">        #   hls_fragment 1s;     #切片时长</span><br><span class=\"line\">        #   hls_path /usr/local/var/www/hls;     #ts文件保存路劲</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">//RTMP推流地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）</span><br><span class=\"line\">//RTMP播放地址：rtmp://192.168.2.107:9090/rmspApp/133009（133009为模拟的房间号）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"emsp-emsp-3-3、配置HLS-Http-Live-Streaming\"><a href=\"#emsp-emsp-3-3、配置HLS-Http-Live-Streaming\" class=\"headerlink\" title=\"&emsp;&emsp;3.3、配置HLS(Http Live Streaming)\"></a>&emsp;&emsp;3.3、配置HLS(Http Live Streaming)</h3><p>打开/usr/local/etc/nginx/nginx.conf文件，找到配置http的部分，在’{}’内插入以下配置信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个配置为了`客户端`能够以http协议获取HLS的拉流</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen:9088;</span><br><span class=\"line\">    location /hls &#123;</span><br><span class=\"line\">        types &#123;</span><br><span class=\"line\">            application/vnd.apple.mpegurl m3u8;</span><br><span class=\"line\">            video/mp2t ts;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        add_header Cache-Control no-cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到rtmp下的server，在’{ }’中增加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#HLS协议</span><br><span class=\"line\">application hls&#123;</span><br><span class=\"line\">    live on;             #开启实时</span><br><span class=\"line\">    hls on;              #开始HLS</span><br><span class=\"line\">    hls_fragment 1s;     #切片时长</span><br><span class=\"line\">    hls_path /usr/local/var/www/hls;     #ts文件保存路劲</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">//HLS推流地址：http://192.168.2.107:9090/hls/abc</span><br><span class=\"line\">//HLS播放地址：http://192.168.2.107:9088/hls/abc.m3u8(主要端口号的变化)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><code>注意</code>：HLS中，我们想把推流生成的ts文件存放在<code>指定的目录</code>下，比如”/tmp/hls”  </p>\n<pre><code>application hls &#123;\n    live on;\n    hls on;\n    hls_path /tmp/hls;\n&#125;\n</code></pre>\n<p>那么，我们也需要在http–&gt;server中对root 路径更改为：/tmp 。要不然，会拉不到流。</p>\n<pre><code>location /hls &#123;\n    types &#123;\n    application/vnd.apple.mpegurl m3u8;\n    video/mp2t ts;\n&#125;\nroot html;===&gt;更改为root /tmp\n//root html 是指使用当前nginx服务器根目录所在位置,指向的是 /usr/local/var/www 这个目录\n</code></pre>\n<p>至此服务器的配置就算完成了，接下来我们进行推流，并进行直播测试</p>\n<h2 id=\"4、推流测试\"><a href=\"#4、推流测试\" class=\"headerlink\" title=\"4、推流测试\"></a>4、推流测试</h2><h3 id=\"emsp-emsp-4-1、使用ffmepg推流测试\"><a href=\"#emsp-emsp-4-1、使用ffmepg推流测试\" class=\"headerlink\" title=\"&emsp;&emsp;4.1、使用ffmepg推流测试\"></a>&emsp;&emsp;4.1、使用ffmepg推流测试</h3><h4 id=\"emsp-emsp-4-1-1-安装ffmepg\"><a href=\"#emsp-emsp-4-1-1-安装ffmepg\" class=\"headerlink\" title=\"&emsp;&emsp;4.1.1 安装ffmepg\"></a>&emsp;&emsp;4.1.1 安装ffmepg</h4><p>终端输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"emsp-emsp-4-2-1-模拟rtmp推流-直播\"><a href=\"#emsp-emsp-4-2-1-模拟rtmp推流-直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.1 模拟rtmp推流(直播)\"></a>&emsp;&emsp;4.2.1 模拟rtmp推流(直播)</h4><p>使用ffmepg对视频编码<br>准备一个视频文件，终端cd到该文件所在的目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hmily$ cd /Users/Hmily/Desktop/rtmp</span><br><span class=\"line\">Hmily$ ls</span><br><span class=\"line\">mtv.mp4</span><br><span class=\"line\"></span><br><span class=\"line\">//推流</span><br><span class=\"line\">Hmily$ ffmpeg -re -i mtv.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://10.3.9.10:9090/rmspApp/133009</span><br><span class=\"line\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span><br><span class=\"line\"></span><br><span class=\"line\">//播放：</span><br><span class=\"line\">//使用FLV播放</span><br><span class=\"line\">//File -&gt; Open Network…</span><br><span class=\"line\">//RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009</span><br><span class=\"line\"></span><br><span class=\"line\">//iOS使用ijkplayer播放</span><br><span class=\"line\">//NSString * videoUrl = @&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;;</span><br><span class=\"line\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span><br><span class=\"line\">//[_player prepareToPlay];</span><br><span class=\"line\">//[self.view addSubview:_player.view];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"emsp-emsp-4-1-3-模拟HLS-点播\"><a href=\"#emsp-emsp-4-1-3-模拟HLS-点播\" class=\"headerlink\" title=\"&emsp;&emsp;4.1.3 模拟HLS(点播)\"></a>&emsp;&emsp;4.1.3 模拟HLS(点播)</h4><p>使用ffmepg对视频编码<br>准备一个视频文件，终端cd到该文件所在的目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hmily$ cd /Users/Hmily/Desktop/hls</span><br><span class=\"line\">Hmily$ ls</span><br><span class=\"line\">mtv.mp4</span><br><span class=\"line\"></span><br><span class=\"line\">//编码切片</span><br><span class=\"line\">Hmily$ ffmpeg -i mtv.mp4 -c:v libx264 -c:a copy -f hls mtv.m3u8</span><br><span class=\"line\"></span><br><span class=\"line\">//接下来是漫长的等待...  </span><br><span class=\"line\">//ffmpeg正在将mtv.mp4切成一个个很小的ts文件，并生成一个mtv.m3u8的索引文件。</span><br><span class=\"line\">//编码完成以后</span><br><span class=\"line\">Hmily$ ls </span><br><span class=\"line\">mtv.mp4 \tmtv.m3u8    mtv12.ts\tmtv19.ts\tmtv25.ts\t</span><br><span class=\"line\">mtv4.ts \tmtv13.ts\tmtv2.ts\t\tmtv26.ts\tmtv5.ts</span><br><span class=\"line\">mtv14.ts\tmtv20.ts\tmtv27.ts\tmtv6.ts     mtv30.ts</span><br><span class=\"line\">mtv0.ts\t\tmtv15.ts\tmtv21.ts\tmtv28.ts\tmtv7.ts</span><br><span class=\"line\">mtv1.ts\t\tmtv16.ts\tmtv22.ts\tmtv29.ts\tmtv8.ts</span><br><span class=\"line\">mtv10.ts\tmtv17.ts\tmtv23.ts\tmtv3.ts\t\tmtv9.ts</span><br><span class=\"line\">mtv11.ts\tmtv18.ts\tmtv24.ts\t</span><br></pre></td></tr></table></figure>\n\n<p>播放：<br>切片完成以后，将hls文件夹拷贝到/usr/local/var/www目录下。<br>使用Safari播放：打开Safari，输入”<a href=\"http://localhost:9090/hls/mtv.m3u8&quot;%EF%BC%8C%E5%9B%9E%E8%BD%A6%E3%80%82%EF%BC%88%E8%BF%99%E9%87%8Clocalhost%E6%98%AF%E6%9C%AC%E6%9C%BAIP%E5%9C%B0%E5%9D%80%EF%BC%9A10.3.9.103%EF%BC%89\">http://localhost:9090/hls/mtv.m3u8&quot;，回车。（这里localhost是本机IP地址：10.3.9.103）</a><br>iOS自带m3u8解码播放功能，打开Safari，输入”<a href=\"http://10.3.9.103:9090/hls/mtv.m3u8&quot;%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%92%AD%E6%94%BE%EF%BC%8C%E6%88%96%E8%80%85%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8UIWebView%E5%8A%A0%E8%BD%BD%E4%B9%9F%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE%E7%9A%84%E3%80%82\">http://10.3.9.103:9090/hls/mtv.m3u8&quot;也可以进行播放，或者在代码中使用UIWebView加载也是可以播放的。</a></p>\n<h3 id=\"emsp-emsp-4-2、iOS代码推流测试\"><a href=\"#emsp-emsp-4-2、iOS代码推流测试\" class=\"headerlink\" title=\"&emsp;&emsp;4.2、iOS代码推流测试\"></a>&emsp;&emsp;4.2、iOS代码推流测试</h3><h4 id=\"emsp-emsp-4-2-1-添加iOS推流代码\"><a href=\"#emsp-emsp-4-2-1-添加iOS推流代码\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.1 添加iOS推流代码\"></a>&emsp;&emsp;4.2.1 添加iOS推流代码</h4><p>添加LFLiveKit库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class=\"line\">#source &lt;your private repo containing ijkplayer, FFmpeg4ijkplayer-ios-bin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">target ‘HLS’ do</span><br><span class=\"line\">    platform :ios, &#x27;8.0&#x27;</span><br><span class=\"line\">    pod &#x27;SDWebImage&#x27;, &#x27;~&gt; 3.7.3&#x27;</span><br><span class=\"line\">    pod &#x27;LFLiveKit&#x27;, &#x27;~&gt; 2.5&#x27;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>添加OC代码<br>LivePreviewController.h</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Created by Hmily on 2016/12/5.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 Hmily. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">LivePreviewController</span> : <span class=\"title\">UIViewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span> </span><br></pre></td></tr></table></figure>\n\n\n<p>LivePreviewController.m</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Created by Hmily on 2016/12/5.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright © 2016年 Hmily. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;LivePreviewController.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;LFLiveKit.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">LivePreviewController</span> ()&lt;<span class=\"title\">LFLiveSessionDelegate</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UIButton</span> *startLiveButton;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) LFLiveSession *session;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UILabel</span> *stateLabel;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> * streamUrl;<span class=\"comment\">//推流的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">LivePreviewController</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view.backgroundColor = [<span class=\"built_in\">UIColor</span> yellowColor];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> requestAccessForVideo];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> requestAccessForAudio];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.stateLabel];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.startLiveButton];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.session = [[LFLiveSession alloc] initWithAudioConfiguration:[LFLiveAudioConfiguration defaultConfiguration]</span><br><span class=\"line\">                                                  videoConfiguration:[LFLiveVideoConfiguration defaultConfiguration]</span><br><span class=\"line\">                                                         captureType:LFLiveCaptureDefaultMask];</span><br><span class=\"line\"></span><br><span class=\"line\">    _session.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    _session.showDebugInfo = <span class=\"literal\">NO</span>;</span><br><span class=\"line\">    _session.preView = <span class=\"keyword\">self</span>.view;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//self.streamUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;//网上现的RTMP服务器，无需配置本地服务器</span></span><br><span class=\"line\">    <span class=\"comment\">//self.streamUrl = @&quot;rtmp://10.3.9.103:9090/rmspApp/133009&quot;;//自己搭建的本地RTMP服务器</span></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;http://10.3.9.103:9090/hls/133009&quot;</span>;<span class=\"comment\">//HLS本地服务器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - UI</span></span><br><span class=\"line\"><span class=\"comment\">//TODO：直播按钮</span></span><br><span class=\"line\">- (<span class=\"built_in\">UIButton</span> *)startLiveButton &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_startLiveButton) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.startLiveButton = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeCustom</span>];</span><br><span class=\"line\">        <span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectZero</span>;</span><br><span class=\"line\">        frame.size = <span class=\"built_in\">CGSizeMake</span>(<span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.view.bounds) - <span class=\"number\">60</span>, <span class=\"number\">44</span>);</span><br><span class=\"line\">        frame.origin = <span class=\"built_in\">CGPointMake</span>(<span class=\"number\">30</span>, <span class=\"built_in\">CGRectGetHeight</span>(<span class=\"keyword\">self</span>.view.bounds) - <span class=\"number\">90</span>);</span><br><span class=\"line\">        _startLiveButton.frame = frame;</span><br><span class=\"line\">        _startLiveButton.layer.cornerRadius = <span class=\"built_in\">CGRectGetHeight</span>(frame)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        [_startLiveButton setTitleColor:[<span class=\"built_in\">UIColor</span> blackColor] forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_startLiveButton.titleLabel setFont:[<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">16</span>]];</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;开始直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_startLiveButton setBackgroundColor:[<span class=\"built_in\">UIColor</span> colorWithRed:<span class=\"number\">50</span> green:<span class=\"number\">32</span> blue:<span class=\"number\">245</span> alpha:<span class=\"number\">1</span>]];</span><br><span class=\"line\">        _startLiveButton.exclusiveTouch = <span class=\"literal\">YES</span>;</span><br><span class=\"line\">        [_startLiveButton addTarget:<span class=\"keyword\">self</span></span><br><span class=\"line\">                             action:<span class=\"keyword\">@selector</span>(startLiveButtonClick:)</span><br><span class=\"line\">                   forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _startLiveButton;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 事件响应</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)startLiveButtonClick:(<span class=\"built_in\">UIButton</span> *)startLiveButton&#123;</span><br><span class=\"line\">    _startLiveButton.selected = !_startLiveButton.selected;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_startLiveButton.selected) &#123;</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;结束直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        LFLiveStreamInfo *stream = [LFLiveStreamInfo new];</span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/stream1555&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://10.3.9.103:1990/liveApp/abc&quot;;//RTMP</span></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;rtmp://192.168.2.107:1990/liveApp/abc&quot;;//RTMP</span></span><br><span class=\"line\">        stream.url = <span class=\"string\">@&quot;http://10.3.9.103:1990/hls/abc&quot;</span>;<span class=\"comment\">//HLS</span></span><br><span class=\"line\">        <span class=\"comment\">//stream.url = @&quot;http://192.168.2.107:1990/hls/abc&quot;;//HLS</span></span><br><span class=\"line\">        [_session startLive:stream];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [_startLiveButton setTitle:<span class=\"string\">@&quot;开始直播&quot;</span> forState:<span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">        [_session stopLive];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 设备是否可用</span></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>判断视频设备是否可用</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)requestAccessForVideo &#123;</span><br><span class=\"line\">    __<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>) weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">    <span class=\"built_in\">AVAuthorizationStatus</span> status = [<span class=\"built_in\">AVCaptureDevice</span> authorizationStatusForMediaType:<span class=\"built_in\">AVMediaTypeVideo</span>];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusNotDetermined</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 许可对话没有出现，发起授权许可</span></span><br><span class=\"line\">            [<span class=\"built_in\">AVCaptureDevice</span> requestAccessForMediaType:<span class=\"built_in\">AVMediaTypeVideo</span> completionHandler:^(<span class=\"built_in\">BOOL</span> granted) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (granted) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                        [weakSelf.session setRunning:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusAuthorized</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经开启授权，可继续</span></span><br><span class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">                [weakSelf.session setRunning:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusDenied</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusRestricted</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户明确地拒绝授权，或者相机设备无法访问</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//<span class=\"doctag\">TODO:</span>判断音频设备是否可用</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)requestAccessForAudio &#123;</span><br><span class=\"line\">    <span class=\"built_in\">AVAuthorizationStatus</span> status = [<span class=\"built_in\">AVCaptureDevice</span> authorizationStatusForMediaType:<span class=\"built_in\">AVMediaTypeAudio</span>];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusNotDetermined</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 许可对话没有出现，发起授权许可</span></span><br><span class=\"line\">            [<span class=\"built_in\">AVCaptureDevice</span> requestAccessForMediaType:<span class=\"built_in\">AVMediaTypeAudio</span> completionHandler:^(<span class=\"built_in\">BOOL</span> granted) &#123;</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusAuthorized</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经开启授权</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusDenied</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"built_in\">AVAuthorizationStatusRestricted</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户明确地拒绝授权，或者音频设备无法访问</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - 代理方法</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> mark - LFStreamingSessionDelegate</span></span><br><span class=\"line\"><span class=\"comment\">/** 直播状态回调 */</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session liveStateDidChange:(LFLiveState)state &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveReady:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;未连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLivePending:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;连接中&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveStart:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;已连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveError:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;连接错误&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LFLiveStop:</span><br><span class=\"line\">            _stateLabel.text = <span class=\"string\">@&quot;未连接&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session debugInfo:(<span class=\"keyword\">nullable</span> LFLiveDebug *)debugInfo &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)liveSession:(<span class=\"keyword\">nullable</span> LFLiveSession *)session errorCode:(LFLiveSocketErrorCode)errorCode &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%s&quot;</span>, __FUNCTION__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"emsp-emsp-4-2-2-模拟rtmp直播\"><a href=\"#emsp-emsp-4-2-2-模拟rtmp直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.2 模拟rtmp直播\"></a>&emsp;&emsp;4.2.2 模拟rtmp直播</h4><pre><code>将代码中的self.streamUrl设置为\nrtmp://10.3.9.10:9090/rmspApp/133009\n</code></pre>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推流</span></span><br><span class=\"line\"><span class=\"comment\">//将代码中的self.streamUrl设置为rtmp://10.3.9.10:9090/rmspApp/133009</span></span><br><span class=\"line\"><span class=\"comment\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;</span>;<span class=\"comment\">//自己搭建的本地服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果本地服务器还没有配置好，可以使用网上开源的一个地址进行测试</span></span><br><span class=\"line\"><span class=\"comment\">//self.streamUrl = @&quot;rtmp://live.hkstv.hk.lxdns.com:1935/live/133009&quot;;//开源的RTMP服务器(更改房间号就可以了)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//播放</span></span><br><span class=\"line\"><span class=\"comment\">//使用FLV播放</span></span><br><span class=\"line\"><span class=\"comment\">//File -&gt; Open Network…</span></span><br><span class=\"line\"><span class=\"comment\">//RUL中输入  rtmp://10.3.9.10:9090/rmspApp/133009</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//iOS使用ijkplayer播放</span></span><br><span class=\"line\"><span class=\"comment\">//NSString * videoUrl = @&quot;rtmp://10.3.9.10:9090/rmspApp/133009&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span></span><br><span class=\"line\"><span class=\"comment\">//[_player prepareToPlay];</span></span><br><span class=\"line\"><span class=\"comment\">//[self.view addSubview:_player.view];</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"emsp-emsp-4-2-2-模拟HLS直播\"><a href=\"#emsp-emsp-4-2-2-模拟HLS直播\" class=\"headerlink\" title=\"&emsp;&emsp;4.2.2 模拟HLS直播\"></a>&emsp;&emsp;4.2.2 模拟HLS直播</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//推流</span></span><br><span class=\"line\"><span class=\"comment\">//将代码中的self.streamUrl设置为http://10.3.9.103:9088/hls/133009</span></span><br><span class=\"line\"><span class=\"comment\">//直播会有多个直播室，这里随便弄一个编号133009模拟</span></span><br><span class=\"line\"><span class=\"comment\">//注意拉流的端口号要与配置文件中的端口号一致（参见3.3）</span></span><br><span class=\"line\"><span class=\"keyword\">self</span>.streamUrl = <span class=\"string\">@&quot;http://10.3.9.103:9088/hls/133009&quot;</span>;<span class=\"comment\">//HLS本地服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//播放</span></span><br><span class=\"line\"><span class=\"comment\">//使用FLV播放</span></span><br><span class=\"line\"><span class=\"comment\">//File -&gt; Open Network…</span></span><br><span class=\"line\"><span class=\"comment\">//RUL中输入  http://10.3.9.103:9088/hls/133009.m3u8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用Safari播放</span></span><br><span class=\"line\"><span class=\"comment\">//在地址栏中输入  http://10.3.9.103:9088/hls/133009.m3u8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//iOS使用ijkplayer播放</span></span><br><span class=\"line\"><span class=\"comment\">//NSString * videoUrl = @&quot;http://10.3.9.103:9088/hls/133009.m3u8&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//self.player = [[IJKFFMoviePlayerController alloc] initWithContentURLString:videoUrl withOptions:nil];</span></span><br><span class=\"line\"><span class=\"comment\">//[_player prepareToPlay];</span></span><br><span class=\"line\"><span class=\"comment\">//[self.view addSubview:_player.view];</span></span><br></pre></td></tr></table></figure>\n\n<p>代码事例请前往github下载：<a href=\"https://github.com/xudusheng/Http-Live-Streaming\">https://github.com/xudusheng/Http-Live-Streaming</a> 。<br>后面会陆陆续续把相关的理论知识补上，请继续关注。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckor8h1d20001xn8ngi77a82r","category_id":"ckor8h1d50003xn8nh0ihh8b4","_id":"ckor8h1dc000axn8nfps6h5wt"},{"post_id":"ckor8h1d30002xn8nbkn20i2k","category_id":"ckor8h1d90007xn8nfac05h66","_id":"ckor8h1df000fxn8n7foodqj1"},{"post_id":"ckor8h1d60004xn8n40gfas4i","category_id":"ckor8h1d90007xn8nfac05h66","_id":"ckor8h1dh000ixn8n4yjb5367"},{"post_id":"ckor8h1d70005xn8n9v1jdfb8","category_id":"ckor8h1df000exn8n2i7ghydi","_id":"ckor8h1dk000nxn8n02yl26ds"},{"post_id":"ckor8h1d80006xn8n78jc88l7","category_id":"ckor8h1df000exn8n2i7ghydi","_id":"ckor8h1dl000pxn8n13071qkj"},{"post_id":"ckor8h1d90008xn8n7g0j0sof","category_id":"ckor8h1df000exn8n2i7ghydi","_id":"ckor8h1dl000qxn8n79tp00hu"},{"post_id":"ckor8h1da0009xn8n9dljfhhf","category_id":"ckor8h1dl000oxn8n5epecn0r","_id":"ckor8h1dm000txn8n3euk1dog"},{"post_id":"ckor8h1dd000cxn8n5yexbtlj","category_id":"ckor8h1dl000oxn8n5epecn0r","_id":"ckor8h1dn000vxn8n9y0l13tu"},{"post_id":"ckor8h1de000dxn8n2epxgw99","category_id":"ckor8h1dl000oxn8n5epecn0r","_id":"ckor8h1dn000wxn8n17t04fzq"},{"post_id":"ckor8h1dg000gxn8nbwrac6oc","category_id":"ckor8h1dm000uxn8ndora5f9e","_id":"ckor8h1do000zxn8nenkhbep6"},{"post_id":"ckor8h1dh000hxn8n0gvx4z8s","category_id":"ckor8h1dm000uxn8ndora5f9e","_id":"ckor8h1do0011xn8n57yw9flv"},{"post_id":"ckor8h1di000kxn8nb92j0rq1","category_id":"ckor8h1dm000uxn8ndora5f9e","_id":"ckor8h1dp0012xn8ne1rjduwr"},{"post_id":"ckor8h1dj000lxn8nbozf7sin","category_id":"ckor8h1dm000uxn8ndora5f9e","_id":"ckor8h1dp0013xn8n55tj8uf2"},{"post_id":"ckor8h1dq0014xn8n1e4t2viu","category_id":"ckor8h1dr0015xn8n1pund6lq","_id":"ckor8h1dr0016xn8n2vmpa8oh"}],"PostTag":[],"Tag":[]}}